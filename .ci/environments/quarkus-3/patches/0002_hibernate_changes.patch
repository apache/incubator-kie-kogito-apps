diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
index c19fa1eb5..a9d93e6db 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
@@ -36,14 +36,13 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;
+
+import io.hypersistence.utils.hibernate.type.json.JsonBlobType;
 
 @Entity(name = "processes")
 @Table(name = "processes")
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 public class ProcessInstanceEntity extends AbstractEntity {
 
     @Id
@@ -68,7 +67,7 @@ public class ProcessInstanceEntity extends AbstractEntity {
     private String parentProcessInstanceId;
     @Column(name = "lastUpdateTime")
     private ZonedDateTime lastUpdate;
-    @Type(type = "jsonb")
+    @Type(value = JsonBlobType.class)
     private ObjectNode variables;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "processInstance")
     private List<NodeInstanceEntity> nodes;
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
index 784048459..60104cf2f 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
@@ -35,13 +35,12 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;
+
+import io.hypersistence.utils.hibernate.type.json.JsonBlobType;
 
 @Entity(name = "tasks")
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 @Table(name = "tasks")
 public class UserTaskInstanceEntity extends AbstractEntity {
 
@@ -90,9 +89,9 @@ public class UserTaskInstanceEntity extends AbstractEntity {
     private String processId;
     private String rootProcessId;
     private String rootProcessInstanceId;
-    @Type(type = "jsonb")
+    @Type(value = JsonBlobType.class)
     private ObjectNode inputs;
-    @Type(type = "jsonb")
+    @Type(value = JsonBlobType.class)
     private ObjectNode outputs;
     private String endpoint;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "userTask")
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
index d848509ae..a75c4c1b3 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
@@ -27,7 +27,7 @@ import jakarta.persistence.criteria.Path;
 import jakarta.persistence.criteria.Predicate;
 import jakarta.persistence.criteria.Root;
 
-import org.hibernate.query.criteria.internal.path.PluralAttributePath;
+import org.hibernate.metamodel.mapping.ordering.ast.PluralAttributePath;
 import org.kie.kogito.index.oracle.model.AbstractEntity;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java b/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
index c2fe8a6a8..10f4e88b6 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
@@ -44,7 +44,7 @@ public class DDLSchemaExporter {
         try (KogitoOracleSqlContainer oracleSql = new KogitoOracleSqlContainer()) {
             oracleSql.waitingFor(Wait.forListeningPort());
             oracleSql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, oracleSql.getJdbcUrl());
             settings.put(Environment.USER, oracleSql.getUsername());
             settings.put(Environment.PASS, oracleSql.getPassword());
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
index e5ed19ef9..0f59c2811 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
@@ -36,13 +36,11 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 @Entity(name = "processes")
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 @Table(name = "processes")
 public class ProcessInstanceEntity extends AbstractEntity {
 
@@ -68,7 +66,7 @@ public class ProcessInstanceEntity extends AbstractEntity {
     private String parentProcessInstanceId;
     @Column(name = "lastUpdateTime")
     private ZonedDateTime lastUpdate;
-    @Type(type = "jsonb")
+    @Type(value = JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode variables;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "processInstance")
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
index 2e28ef813..3a709e6a8 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
@@ -35,13 +35,11 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 @Entity(name = "tasks")
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 @Table(name = "tasks")
 public class UserTaskInstanceEntity extends AbstractEntity {
 
@@ -90,10 +88,10 @@ public class UserTaskInstanceEntity extends AbstractEntity {
     private String processId;
     private String rootProcessId;
     private String rootProcessInstanceId;
-    @Type(type = "jsonb")
+    @Type(value = JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode inputs;
-    @Type(type = "jsonb")
+    @Type(value = JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode outputs;
     private String endpoint;
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
index 10b132749..9ec287dff 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
@@ -27,7 +27,7 @@ import jakarta.persistence.criteria.Path;
 import jakarta.persistence.criteria.Predicate;
 import jakarta.persistence.criteria.Root;
 
-import org.hibernate.query.criteria.internal.path.PluralAttributePath;
+import org.hibernate.metamodel.mapping.ordering.ast.PluralAttributePath;
 import org.kie.kogito.index.postgresql.model.AbstractEntity;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java b/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
index 485218875..58b366a3e 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
@@ -44,7 +44,7 @@ public class DDLSchemaExporter {
         try (KogitoPostgreSqlContainer postgresql = new KogitoPostgreSqlContainer()) {
             postgresql.waitingFor(Wait.forListeningPort());
             postgresql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, postgresql.getJdbcUrl());
             settings.put(Environment.USER, postgresql.getUsername());
             settings.put(Environment.PASS, postgresql.getPassword());
diff --git a/kogito-apps-build-parent/pom.xml b/kogito-apps-build-parent/pom.xml
index c7d927289..5b0eec732 100644
--- a/kogito-apps-build-parent/pom.xml
+++ b/kogito-apps-build-parent/pom.xml
@@ -47,7 +47,8 @@
         <!-- OptaPlanner version -->
         <version.org.optaplanner>9.37.0.Final</version.org.optaplanner>
 
-        <version.com.vladmihalcea.hibernate-types-55>2.12.1</version.com.vladmihalcea.hibernate-types-55>
+        <version.org.hibernate>6.2.0.Final</version.org.hibernate> <!-- Aligned with Quarkus bom -->
+        <version.io.hypersistence.hypersistence-utils-hibernate-62>3.3.2</version.io.hypersistence.hypersistence-utils-hibernate-62>
         <version.org.apache.opennlp>1.9.2</version.org.apache.opennlp>
         <version.org.apache.commons.csv>1.8</version.org.apache.commons.csv>
         <version.org.jredisearch>2.0.0</version.org.jredisearch>
@@ -140,6 +141,11 @@
                 <type>pom</type>
                 <scope>import</scope>
             </dependency>
+            <dependency>
+                <groupId>org.hibernate.orm</groupId>
+                <artifactId>hibernate-ant</artifactId>
+                <version>${version.org.hibernate}</version>
+            </dependency>
             <dependency>
                 <groupId>com.redislabs</groupId>
                 <artifactId>jredisearch</artifactId>
@@ -172,9 +178,9 @@
                 <scope>test</scope>
             </dependency>
             <dependency>
-                <groupId>com.vladmihalcea</groupId>
-                <artifactId>hibernate-types-55</artifactId>
-                <version>${version.com.vladmihalcea.hibernate-types-55}</version>
+                <groupId>io.hypersistence</groupId>
+                <artifactId>hypersistence-utils-hibernate-62</artifactId>
+                <version>${version.io.hypersistence.hypersistence-utils-hibernate-62}</version>
             </dependency>
             <dependency>
                 <groupId>com.graphql-java</groupId>
diff --git a/persistence-commons/persistence-commons-oracle/pom.xml b/persistence-commons/persistence-commons-oracle/pom.xml
index 1bf5edcff..9d58b88b3 100644
--- a/persistence-commons/persistence-commons-oracle/pom.xml
+++ b/persistence-commons/persistence-commons-oracle/pom.xml
@@ -42,8 +42,12 @@
       <artifactId>quarkus-jdbc-oracle</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.vladmihalcea</groupId>
-      <artifactId>hibernate-types-55</artifactId>
+      <groupId>org.hibernate.orm</groupId>
+      <artifactId>hibernate-ant</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>io.hypersistence</groupId>
+      <artifactId>hypersistence-utils-hibernate-62</artifactId>
     </dependency>
     <dependency>
       <groupId>io.quarkus</groupId>
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
index d52ea5eb6..78deea035 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
@@ -21,7 +21,9 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Collectors;
 
+import org.hibernate.metamodel.model.domain.BasicDomainType;
 import org.hibernate.query.NativeQuery;
+import org.hibernate.type.BasicTypeReference;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
 import org.kie.kogito.persistence.api.query.FilterCondition;
@@ -32,7 +34,8 @@ import org.slf4j.LoggerFactory;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;
+
+import io.hypersistence.utils.hibernate.type.json.JsonBlobType;
 
 import static java.lang.String.format;
 import static java.util.stream.Collectors.joining;
@@ -137,7 +140,7 @@ public class OracleQuery<T> implements Query<T> {
         jakarta.persistence.Query query = repository.getEntityManager()
                 .createNativeQuery(queryString.toString())
                 .unwrap(NativeQuery.class)
-                .addScalar("json_value", new JsonBlobType(type));
+                .addScalar("json_value", type); // TODO Quarkus 3: This does not work and should be fix in a next PR
 
         if (limit != null) {
             query.setMaxResults(limit);
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
index 8b67f527f..83847f502 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
@@ -25,6 +25,7 @@ import java.util.Objects;
 
 import org.hibernate.HibernateException;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.type.SqlTypes;
 import org.hibernate.usertype.UserType;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -34,34 +35,34 @@ import com.fasterxml.jackson.databind.node.ObjectNode;
 
 import static java.lang.String.format;
 
-public class JsonBinaryType implements UserType {
+public class JsonBinaryType implements UserType<JsonNode> {
 
     private ObjectMapper mapper = new ObjectMapper();
 
     @Override
-    public int[] sqlTypes() {
-        return new int[] { Types.JAVA_OBJECT };
+    public int getSqlType() {
+        return SqlTypes.JAVA_OBJECT;
     }
 
     @Override
-    public Class returnedClass() {
+    public Class<JsonNode> returnedClass() {
         return JsonNode.class;
     }
 
     @Override
-    public boolean equals(Object x, Object y) throws HibernateException {
+    public boolean equals(JsonNode x, JsonNode y) throws HibernateException {
         return Objects.equals(x, y);
     }
 
     @Override
-    public int hashCode(Object x) throws HibernateException {
+    public int hashCode(JsonNode x) throws HibernateException {
         return Objects.hashCode(x);
     }
 
     @Override
-    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
-            throws HibernateException, SQLException {
-        final String json = rs.getString(names[0]);
+    public JsonNode nullSafeGet(ResultSet rs, int position, SharedSessionContractImplementor session, Object owner)
+            throws SQLException {
+        final String json = rs.getString(position);
         if (json == null) {
             return null;
         }
@@ -73,8 +74,8 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public void nullSafeSet(PreparedStatement ps, Object value, int index, SharedSessionContractImplementor session)
-            throws HibernateException, SQLException {
+    public void nullSafeSet(PreparedStatement ps, JsonNode value, int index, SharedSessionContractImplementor session)
+            throws SQLException {
         if (value == null) {
             ps.setNull(index, Types.OTHER);
             return;
@@ -92,7 +93,7 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Object deepCopy(Object value) throws HibernateException {
+    public JsonNode deepCopy(JsonNode value) throws HibernateException {
         if (value == null) {
             return null;
         }
@@ -109,12 +110,12 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Serializable disassemble(Object value) throws HibernateException {
+    public Serializable disassemble(JsonNode value) throws HibernateException {
         return this.deepCopy(value).toString();
     }
 
     @Override
-    public Object assemble(Serializable cached, Object owner) throws HibernateException {
+    public JsonNode assemble(Serializable cached, Object owner) throws HibernateException {
         try {
             return mapper.readTree(cached.toString());
         } catch (JsonProcessingException ex) {
@@ -123,7 +124,7 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Object replace(Object original, Object target, Object owner) throws HibernateException {
+    public JsonNode replace(JsonNode original, JsonNode target, Object owner) throws HibernateException {
         return original;
     }
 }
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
index 7cbf7ce42..6ba957970 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
@@ -27,16 +27,15 @@ import jakarta.persistence.Table;
 import jakarta.persistence.UniqueConstraint;
 
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;
+
+import io.hypersistence.utils.hibernate.type.json.JsonType;
 
 @Entity
 @IdClass(CacheId.class)
 @Table(name = "kogito_data_cache", uniqueConstraints = @UniqueConstraint(columnNames = { "name", "key" }),
         indexes = @Index(columnList = "name,key", unique = true))
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 public class CacheEntity {
 
     @Id
@@ -47,7 +46,7 @@ public class CacheEntity {
     @Column(nullable = false)
     private String key;
 
-    @Type(type = "jsonb")
+    @Type(value = JsonType.class)
     @Column(name = "json_value")
     private ObjectNode value;
 
diff --git a/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java b/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
index 4c3faf1d0..642789526 100644
--- a/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
+++ b/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
@@ -37,7 +37,7 @@ public class DDLSchemaExporter {
         try (KogitoOracleSqlContainer oracle = new KogitoOracleSqlContainer()) {
             oracle.waitingFor(Wait.forListeningPort());
             oracle.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, oracle.getJdbcUrl());
             settings.put(Environment.USER, oracle.getUsername());
             settings.put(Environment.PASS, oracle.getPassword());
diff --git a/persistence-commons/persistence-commons-postgresql/pom.xml b/persistence-commons/persistence-commons-postgresql/pom.xml
index 4685623d4..f95fc30a4 100644
--- a/persistence-commons/persistence-commons-postgresql/pom.xml
+++ b/persistence-commons/persistence-commons-postgresql/pom.xml
@@ -42,8 +42,12 @@
       <artifactId>quarkus-jdbc-postgresql</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.vladmihalcea</groupId>
-      <artifactId>hibernate-types-55</artifactId>
+      <groupId>org.hibernate.orm</groupId>
+      <artifactId>hibernate-ant</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>io.hypersistence</groupId>
+      <artifactId>hypersistence-utils-hibernate-62</artifactId>
     </dependency>
     <dependency>
       <groupId>io.quarkus</groupId>
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
index e01355e78..1abc2fdbc 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
@@ -31,7 +31,8 @@ import org.slf4j.LoggerFactory;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;
+
+import io.hypersistence.utils.hibernate.type.json.JsonNodeBinaryType;
 
 import static java.lang.String.format;
 import static java.util.stream.Collectors.joining;
@@ -134,7 +135,7 @@ public class PostgresQuery<T> implements Query<T> {
 
         LOGGER.debug("Executing PostgreSQL query: {}", queryString);
         jakarta.persistence.Query query = repository.getEntityManager().createNativeQuery(queryString.toString());
-        query.unwrap(org.hibernate.query.NativeQuery.class).addScalar("json_value", JsonNodeBinaryType.INSTANCE);
+        query.unwrap(org.hibernate.query.NativeQuery.class).addScalar("json_value", type); // TODO Quarkus 3: This does not work and should be fix in a next PR
 
         if (limit != null) {
             query.setMaxResults(limit);
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
index 83622105b..653aae0f1 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
@@ -25,6 +25,7 @@ import java.util.Objects;
 
 import org.hibernate.HibernateException;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.type.SqlTypes;
 import org.hibernate.usertype.UserType;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -34,34 +35,34 @@ import com.fasterxml.jackson.databind.node.ObjectNode;
 
 import static java.lang.String.format;
 
-public class JsonBinaryType implements UserType {
+public class JsonBinaryType implements UserType<JsonNode> {
 
     private ObjectMapper mapper = new ObjectMapper();
 
     @Override
-    public int[] sqlTypes() {
-        return new int[] { Types.JAVA_OBJECT };
+    public int getSqlType() {
+        return SqlTypes.JAVA_OBJECT;
     }
 
     @Override
-    public Class returnedClass() {
+    public Class<JsonNode> returnedClass() {
         return JsonNode.class;
     }
 
     @Override
-    public boolean equals(Object x, Object y) throws HibernateException {
+    public boolean equals(JsonNode x, JsonNode y) {
         return Objects.equals(x, y);
     }
 
     @Override
-    public int hashCode(Object x) throws HibernateException {
+    public int hashCode(JsonNode x) {
         return Objects.hashCode(x);
     }
 
     @Override
-    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
-            throws HibernateException, SQLException {
-        final String json = rs.getString(names[0]);
+    public JsonNode nullSafeGet(ResultSet rs, int position, SharedSessionContractImplementor session, Object owner)
+            throws SQLException {
+        final String json = rs.getString(position);
         if (json == null) {
             return null;
         }
@@ -73,8 +74,8 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public void nullSafeSet(PreparedStatement ps, Object value, int index, SharedSessionContractImplementor session)
-            throws HibernateException, SQLException {
+    public void nullSafeSet(PreparedStatement ps, JsonNode value, int index, SharedSessionContractImplementor session)
+            throws SQLException {
         if (value == null) {
             ps.setNull(index, Types.OTHER);
             return;
@@ -91,7 +92,7 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Object deepCopy(Object value) throws HibernateException {
+    public JsonNode deepCopy(JsonNode value) throws HibernateException {
         if (value == null) {
             return null;
         }
@@ -108,12 +109,12 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Serializable disassemble(Object value) throws HibernateException {
+    public Serializable disassemble(JsonNode value) throws HibernateException {
         return this.deepCopy(value).toString();
     }
 
     @Override
-    public Object assemble(Serializable cached, Object owner) throws HibernateException {
+    public JsonNode assemble(Serializable cached, Object owner) throws HibernateException {
         try {
             return mapper.readTree(cached.toString());
         } catch (JsonProcessingException ex) {
@@ -122,7 +123,7 @@ public class JsonBinaryType implements UserType {
     }
 
     @Override
-    public Object replace(Object original, Object target, Object owner) throws HibernateException {
+    public JsonNode replace(JsonNode original, JsonNode target, Object owner) throws HibernateException {
         return original;
     }
 }
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
index 111e79ee5..f4e95df2b 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
@@ -27,7 +27,6 @@ import jakarta.persistence.Table;
 import jakarta.persistence.UniqueConstraint;
 
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -36,7 +35,6 @@ import com.fasterxml.jackson.databind.node.ObjectNode;
 @IdClass(CacheId.class)
 @Table(name = "kogito_data_cache", uniqueConstraints = @UniqueConstraint(columnNames = { "name",
         "key" }), indexes = @Index(columnList = "name,key", unique = true))
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 public class CacheEntity {
 
     @Id
@@ -47,7 +45,7 @@ public class CacheEntity {
     @Column(nullable = false)
     private String key;
 
-    @Type(type = "jsonb")
+    @Type(value = JsonBinaryType.class)
     @Column(name = "json_value", columnDefinition = "jsonb")
     private ObjectNode value;
 
diff --git a/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java b/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
index 98a54340f..012341591 100644
--- a/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
+++ b/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
@@ -37,7 +37,7 @@ public class DDLSchemaExporter {
         try (KogitoPostgreSqlContainer postgresql = new KogitoPostgreSqlContainer()) {
             postgresql.waitingFor(Wait.forListeningPort());
             postgresql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, postgresql.getJdbcUrl());
             settings.put(Environment.USER, postgresql.getUsername());
             settings.put(Environment.PASS, postgresql.getPassword());
