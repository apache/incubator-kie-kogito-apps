diff --git a/apps-integration-tests/integration-tests-data-index-service/integration-tests-data-index-service-common/src/test/java/org/kie/kogito/index/AbstractProcessDataIndexIT.java b/apps-integration-tests/integration-tests-data-index-service/integration-tests-data-index-service-common/src/test/java/org/kie/kogito/index/AbstractProcessDataIndexIT.java
index 72aebeb09..ee13a5625 100644
--- a/apps-integration-tests/integration-tests-data-index-service/integration-tests-data-index-service-common/src/test/java/org/kie/kogito/index/AbstractProcessDataIndexIT.java
+++ b/apps-integration-tests/integration-tests-data-index-service/integration-tests-data-index-service-common/src/test/java/org/kie/kogito/index/AbstractProcessDataIndexIT.java
@@ -206,7 +206,7 @@ public abstract class AbstractProcessDataIndexIT {
                 .get("/approvals/{processId}/tasks")
                 .then()
                 .statusCode(200)
-                .body("$.size()", is(1))
+                .body("size()", is(1))
                 .body("[0].name", is("secondLineApproval"))
                 .body("[0].id", notNullValue())
                 .extract()
@@ -473,7 +473,7 @@ public abstract class AbstractProcessDataIndexIT {
                         .get("/approvals/{id}/firstLineApproval/{taskId}/comments")
                         .then()
                         .statusCode(200)
-                        .body("$.size()", is(1))
+                        .body("size()", is(1))
                         .body("[0].content", is(commentContent)));

         await()
@@ -584,7 +584,7 @@ public abstract class AbstractProcessDataIndexIT {
                         .get("/approvals/{id}/firstLineApproval/{taskId}/attachments")
                         .then()
                         .statusCode(200)
-                        .body("$.size()", is(1))
+                        .body("size()", is(1))
                         .body("[0].name", is(attachmentName)));

         AtomicReference<Map<String, String>> attachmentMapRef = new AtomicReference<>();
diff --git a/data-index/data-index-service/data-index-service-common/src/test/java/org/kie/kogito/index/service/GraphQLUtils.java b/data-index/data-index-service/data-index-service-common/src/test/java/org/kie/kogito/index/service/GraphQLUtils.java
index 5109b4e11..a7ec15508 100644
--- a/data-index/data-index-service/data-index-service-common/src/test/java/org/kie/kogito/index/service/GraphQLUtils.java
+++ b/data-index/data-index-service/data-index-service-common/src/test/java/org/kie/kogito/index/service/GraphQLUtils.java
@@ -51,8 +51,27 @@ import static org.kie.kogito.index.json.JsonUtils.getObjectMapper;

 public class GraphQLUtils {

+    private static final String ID = "id";
+    private static final String VERSION = "version";
+    private static final String STATE = "state";
+    private static final String START = "start";
+    private static final String PROCESS_ID = "processId";
+    private static final String PARENT_PROCESS_INSTANCE_ID = "parentProcessInstanceId";
+    private static final String IS_NULL = "isNull";
+    private static final String NODE = "node";
+    private static final String MILESTONE = "milestone";
+    private static final String ADDON = "addon";
+    private static final String STATUS = "status";
+    private static final String BUSSINES_KEY = "bk";
+    private static final String IDENT = "ident";
+    private static final String ACTUAL_OWNER = "actualOwner";
+    private static final String STARTED = "started";
+    private static final String COMPLETED = "completed";
+    private static final String POTENTIAL_GROUPS = "potentialGroups";
+    private static final String POTENTIAL_USERS = "potentialUsers";
+
     private static final Logger LOGGER = LoggerFactory.getLogger(GraphQLUtils.class);
-    private static final Map<Class, String> QUERY_FIELDS = new HashMap<>();
+    private static final Map<Class<?>, String> QUERY_FIELDS = new HashMap<>();
     private static final Map<String, String> QUERIES = new HashMap<>();

     static {
@@ -77,115 +96,115 @@ public class GraphQLUtils {
     }

     public static String getProcessDefinitionByIdAndVersion(String id, String version) {
-        return getProcessDefinitionQuery("ProcessDefinitionByIdAndVersion", id, version);
+        return getProcessDefinitionQuery("ProcessDefinitionByIdAndVersion", Map.of(ID, id, VERSION, version));
     }

     public static String getProcessInstanceById(String id) {
-        return getProcessInstanceQuery("ProcessInstanceById", id);
+        return getProcessInstanceQuery("ProcessInstanceById", Map.of(ID, id));
     }

     public static String getProcessInstanceByIdAndState(String id, ProcessInstanceState state) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndState", id, state.name());
+        return getProcessInstanceQuery("ProcessInstanceByIdAndState", Map.of(ID, id, STATE, state.name()));
     }

     public static String getProcessInstanceByIdAndStart(String id, String start) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndStart", id, start);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndStart", Map.of(ID, id, START, start));
     }

     public static String getProcessInstanceByIdAndProcessId(String id, String processId) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndProcessId", id, processId);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndProcessId", Map.of(ID, id, PROCESS_ID, processId));
     }

     public static String getProcessInstanceByIdAndParentProcessInstanceId(String id, String parentProcessInstanceId) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndParentProcessInstanceId", id, parentProcessInstanceId);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndParentProcessInstanceId", Map.of(ID, id, PARENT_PROCESS_INSTANCE_ID, parentProcessInstanceId));
     }

     public static String getProcessInstanceByParentProcessInstanceId(String parentProcessInstanceId) {
-        return getProcessInstanceQuery("ProcessInstanceByParentProcessInstanceId", parentProcessInstanceId);
+        return getProcessInstanceQuery("ProcessInstanceByParentProcessInstanceId", Map.of(PARENT_PROCESS_INSTANCE_ID, parentProcessInstanceId));
     }

     public static String getProcessInstanceByIdAndNullParentProcessInstanceId(String id, Boolean isNull) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndNullParentProcessInstanceId", id, isNull.toString());
+        return getProcessInstanceQuery("ProcessInstanceByIdAndNullParentProcessInstanceId", Map.of(ID, id, IS_NULL, isNull));
     }

     public static String getProcessInstanceByIdAndNullRootProcessInstanceId(String id, Boolean isNull) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndNullRootProcessInstanceId", id, isNull.toString());
+        return getProcessInstanceQuery("ProcessInstanceByIdAndNullRootProcessInstanceId", Map.of(ID, id, IS_NULL, isNull));
     }

     public static String getProcessInstanceByRootProcessInstanceId(String rootProcessInstanceId) {
-        return getProcessInstanceQuery("ProcessInstanceByRootProcessInstanceId", rootProcessInstanceId);
+        return getProcessInstanceQuery("ProcessInstanceByRootProcessInstanceId", Map.of(ID, rootProcessInstanceId));
     }

     public static String getProcessInstanceByIdAndErrorNode(String id, String nodeDefinitionId) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndErrorNode", id, nodeDefinitionId);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndErrorNode", Map.of(ID, id, NODE, nodeDefinitionId));
     }

     public static String getProcessInstanceByIdAndAddon(String id, String addon) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndAddon", id, addon);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndAddon", Map.of(ID, id, ADDON, addon));
     }

     public static String getProcessInstanceByIdAndMilestoneName(String id, String milestone) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndMilestoneName", id, milestone);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndMilestoneName", Map.of(ID, id, MILESTONE, milestone));
     }

     public static String getProcessInstanceByIdAndMilestoneStatus(String id, String status) {
-        return getProcessInstanceQuery("ProcessInstanceByIdAndMilestoneStatus", id, status);
+        return getProcessInstanceQuery("ProcessInstanceByIdAndMilestoneStatus", Map.of(ID, id, STATUS, status));
     }

-    public static String getProcessInstanceByBusinessKey(String businessKeys) {
-        return getProcessInstanceQuery("ProcessInstanceByBusinessKey", businessKeys);
+    public static String getProcessInstanceByBusinessKey(String businessKey) {
+        return getProcessInstanceQuery("ProcessInstanceByBusinessKey", Map.of(BUSSINES_KEY, businessKey));
     }

     public static String getProcessInstanceByCreatedBy(String identity) {
-        return getProcessInstanceQuery("ProcessInstanceByCreatedBy", identity);
+        return getProcessInstanceQuery("ProcessInstanceByCreatedBy", Map.of(IDENT, identity));
     }

     public static String getProcessInstanceByUpdatedBy(String identity) {
-        return getProcessInstanceQuery("ProcessInstanceByUpdatedBy", identity);
+        return getProcessInstanceQuery("ProcessInstanceByUpdatedBy", Map.of(IDENT, identity));
     }

     public static String getUserTaskInstanceById(String id) {
-        return getUserTaskInstanceQuery("UserTaskInstanceById", id);
+        return getUserTaskInstanceQuery("UserTaskInstanceById", Map.of(ID, id));
     }

     public static String getUserTaskInstanceByProcessInstanceId(String id) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByProcessInstanceId", id);
+        return getUserTaskInstanceQuery("UserTaskInstanceByProcessInstanceId", Map.of(ID, id));
     }

     public static String getUserTaskInstanceByIdAndActualOwner(String id, String actualOwner) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndActualOwner", id, actualOwner);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndActualOwner", Map.of(ID, id, ACTUAL_OWNER, actualOwner));
     }

     public static String getUserTaskInstanceByIdAndProcessId(String id, String processId) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndProcessId", id, processId);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndProcessId", Map.of(ID, id, PROCESS_ID, processId));
     }

     public static String getUserTaskInstanceByIdNoActualOwner(String id) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdNoActualOwner", id);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdNoActualOwner", Map.of(ID, id));
     }

     public static String getUserTaskInstanceByIdAndState(String id, String state) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndState", id, state);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndState", Map.of(ID, id, STATE, state));
     }

     public static String getUserTaskInstanceByIdAndStarted(String id, String started) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndStarted", id, started);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndStarted", Map.of(ID, id, STARTED, started));
     }

     public static String getUserTaskInstanceByIdAndCompleted(String id, String completed) {
-        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndCompleted", id, completed);
+        return getUserTaskInstanceQuery("UserTaskInstanceByIdAndCompleted", Map.of(ID, id, COMPLETED, completed));
     }

     public static String getUserTaskInstanceByIdAndPotentialGroups(String id, List<String> potentialGroups) throws Exception {
-        return getUserTaskInstanceWithArray("UserTaskInstanceByIdAndPotentialGroups", potentialGroups, "potentialGroups", id);
+        return getUserTaskInstanceWithArray("UserTaskInstanceByIdAndPotentialGroups", potentialGroups, POTENTIAL_GROUPS, Map.of(ID, id));
     }

     public static String getUserTaskInstanceByIdAndPotentialUsers(String id, List<String> potentialUsers) throws Exception {
-        return getUserTaskInstanceWithArray("UserTaskInstanceByIdAndPotentialUsers", potentialUsers, "potentialUsers", id);
+        return getUserTaskInstanceWithArray("UserTaskInstanceByIdAndPotentialUsers", potentialUsers, POTENTIAL_USERS, Map.of(ID, id));
     }

     public static String getJobById(String id) {
-        return getJobQuery("JobById", id);
+        return getJobQuery("JobById", Map.of(ID, id));
     }

     public static String getTravelsByUserTaskId(String id) {
@@ -208,7 +227,7 @@ public class GraphQLUtils {
         return getQuery("DealsByTaskIdNoActualOwner", id);
     }

-    private static String getUserTaskInstanceWithArray(String query, List<String> values, String variable, String... args) throws Exception {
+    private static String getUserTaskInstanceWithArray(String query, List<String> values, String variable, Map<String, Object> args) throws Exception {
         String json = getUserTaskInstanceQuery(query, args);
         ObjectNode jsonNode = (ObjectNode) getObjectMapper().readTree(json);
         ArrayNode pg = (ArrayNode) jsonNode.get("variables").get(variable);
@@ -220,24 +239,32 @@ public class GraphQLUtils {
         return format(QUERIES.get(name), args);
     }

-    private static String getProcessInstanceQuery(String name, String... args) {
+    private static String getProcessInstanceQuery(String name, Map<String, Object> args) {
         return getQuery(name, ProcessInstance.class, args);
     }

-    private static String getProcessDefinitionQuery(String name, String... args) {
+    private static String getProcessDefinitionQuery(String name, Map<String, Object> args) {
         return getQuery(name, ProcessDefinition.class, args);
     }

-    private static String getUserTaskInstanceQuery(String name, String... args) {
+    private static String getUserTaskInstanceQuery(String name, Map<String, Object> args) {
         return getQuery(name, UserTaskInstance.class, args);
     }

-    private static String getJobQuery(String name, String... args) {
+    private static String getJobQuery(String name, Map<String, Object> args) {
         return getQuery(name, Job.class, args);
     }

-    private static String getQuery(String name, Class clazz, String... args) {
-        return format(QUERIES.get(name), insert(0, args, QUERY_FIELDS.get(clazz)));
+    private static String getQuery(String name, Class<?> clazz, Map<String, Object> args) {
+        try {
+            String query = format(QUERIES.get(name), QUERY_FIELDS.get(clazz));
+            JsonNode jsonQuery = getObjectMapper().readTree(query);
+            ObjectNode jsonVars = getObjectMapper().valueToTree(args);
+            jsonQuery.withObject("/variables").setAll(jsonVars);
+            return jsonQuery.toString();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
     }

     private static Stream<Field> getAllFieldsList(Class clazz) {
diff --git a/data-index/data-index-service/data-index-service-common/src/test/resources/graphql_queries.json b/data-index/data-index-service/data-index-service-common/src/test/resources/graphql_queries.json
index afc269c6e..543f91bc4 100644
--- a/data-index/data-index-service/data-index-service-common/src/test/resources/graphql_queries.json
+++ b/data-index/data-index-service/data-index-service-common/src/test/resources/graphql_queries.json
@@ -1,219 +1,134 @@
 {
   "ProcessDefinitionByIdAndVersion": {
     "query": "query ($id: String, $version: String) { ProcessDefinitions( where: {  id: {  equal : $id }, version: {  equal : $version } }, orderBy: { version: ASC }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "version": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceById": {
     "query": "query ($id: String) { ProcessInstances( where: {  id: {  equal : $id } }, orderBy: { lastUpdate: ASC }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndState": {
     "query": "query ($id: String, $state: ProcessInstanceState) { ProcessInstances( where: {  id: {  equal : $id }, state: { equal : $state } }, orderBy: { lastUpdate: ASC }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "state": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndAddon": {
     "query": "query ($id: String, $addon: String) { ProcessInstances( where: {  id: {  equal : $id }, addons: { contains : $addon } }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "addon": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndMilestoneName": {
     "query": "query ($id: String, $milestone: String) { ProcessInstances( where: {  id: {  equal : $id }, milestones: { name : { equal : $milestone } } }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "milestone": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndMilestoneStatus": {
     "query": "query ($id: String, $status: MilestoneStatus) { ProcessInstances( where: {  id: {  equal : $id }, milestones: { status : { equal : $status } } }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "status": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndStart": {
     "query": "query ($id: String, $start: DateTime) { ProcessInstances( where: {  id: {  equal : $id }, start: { equal : $start } }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "start": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndProcessId": {
     "query": "query ($id: String, $processId: String) { ProcessInstances( where: {  id: {  equal : $id }, processId: { equal : $processId } }, pagination : { limit: 10, offset: 0 } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "processId": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByParentProcessInstanceId": {
     "query": "query ( $parentProcessInstanceId: String ) { ProcessInstances( where: {  parentProcessInstanceId: {  equal : $parentProcessInstanceId } } ){ %s } }",
-    "variables": {
-      "parentProcessInstanceId": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndNullParentProcessInstanceId": {
     "query": "query ( $id: String, $isNull: Boolean ) { ProcessInstances( where: {  id: {  equal : $id }, parentProcessInstanceId: {  isNull : $isNull } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "isNull": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndParentProcessInstanceId": {
     "query": "query ( $id: String, $parentProcessInstanceId: String ) { ProcessInstances( where: {  id: {  equal : $id }, parentProcessInstanceId: {  equal : $parentProcessInstanceId } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "parentProcessInstanceId": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByRootProcessInstanceId": {
     "query": "query ( $id: String ) { ProcessInstances( where: {  rootProcessInstanceId: {  equal : $id } } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndNullRootProcessInstanceId": {
     "query": "query ( $id: String, $isNull: Boolean ) { ProcessInstances( where: {  id: {  equal : $id }, rootProcessInstanceId: {  isNull : $isNull } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "isNull": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByIdAndErrorNode": {
     "query": "query ( $id: String, $node: String ) { ProcessInstances( where: {  id: {  equal : $id }, error : { nodeDefinitionId: {  equal : $node } } }, orderBy: { error: { message: ASC }, lastUpdate: ASC } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "node": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByBusinessKey": {
     "query": "query ( $bk: [String!] ) { ProcessInstances(where: { businessKey : { in : $bk } }) { %s } }",
-    "variables": {
-      "bk": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByCreatedBy": {
     "query": "query ( $ident: String ) { ProcessInstances(where: { createdBy : { equal : $ident } }) { %s } }",
-    "variables": {
-      "ident": "%s"
-    }
+    "variables": {}
   },
   "ProcessInstanceByUpdatedBy": {
     "query": "query ( $ident: String ) { ProcessInstances(where: { updatedBy : { equal : $ident } }) { %s } }",
-    "variables": {
-      "ident": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceById": {
     "query": "query ( $id: String ) { UserTaskInstances( where: {  id: {  equal : $id } } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByProcessInstanceId": {
     "query": "query ( $id: String ) { UserTaskInstances( where: {  processInstanceId: {  equal : $id } } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndActualOwner": {
     "query": "query ( $id: String, $actualOwner: String ) { UserTaskInstances( where: {  id: {  equal : $id }, actualOwner: { equal: $actualOwner }, not: { excludedUsers: { contains : $actualOwner } } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "actualOwner": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndProcessId": {
     "query": "query ( $id: String, $processId: String ) { UserTaskInstances( where: {  id: {  equal : $id }, processId: { equal: $processId } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "processId": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdNoActualOwner": {
     "query": "query ( $id: String ) { UserTaskInstances( where: {  id: {  equal : $id }, actualOwner: { isNull: true } } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndState": {
     "query": "query ( $id: String, $state: String ) { UserTaskInstances( where: {  id: {  equal : $id }, state: { equal: $state } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "state": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndStarted": {
     "query": "query ( $id: String, $started: DateTime ) { UserTaskInstances( where: {  id: {  equal : $id }, started: { lessThanEqual: $started } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "started": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndCompleted": {
     "query": "query ( $id: String, $completed: DateTime ) { UserTaskInstances( where: {  id: {  equal : $id }, completed: { greaterThanEqual: $completed } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "completed": "%s"
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndPotentialGroups": {
     "query": "query ( $id: String, $potentialGroups: [String!] ) { UserTaskInstances( where: {  id: {  equal : $id }, potentialGroups: { containsAny: $potentialGroups } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "potentialGroups": []
-    }
+    "variables": {}
   },
   "UserTaskInstanceByIdAndPotentialUsers": {
     "query": "query ( $id: String, $potentialUsers: [String!] ) { UserTaskInstances( where: {  id: {  equal : $id }, potentialUsers: { containsAny: $potentialUsers } } ){ %s } }",
-    "variables": {
-      "id": "%s",
-      "potentialUsers": []
-    }
+    "variables": {}
   },
   "JobById": {
     "query": "query ( $id: String ) { Jobs( where: {  id: {  equal : $id } } ){ %s } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "TravelsByUserTaskId": {
     "query": "query ( $taskId: String ) { Travels ( where: { metadata: { userTasks: { id : { equal : $taskId } } } } ){ id, __typename, flight { flightNumber, arrival, departure }, hotel { name }, traveller { firstName }, metadata { lastUpdate, processInstances { id, processId, processName, rootProcessId, rootProcessInstanceId, parentProcessInstanceId, start, end, lastUpdate, endpoint, serviceUrl }, userTasks { id, description, name, priority, processInstanceId, actualOwner, lastUpdate, state } } } }",
-    "variables": {
-      "taskId": "%s"
-    }
+    "variables": {}
   },
   "TravelsByProcessInstanceId": {
     "query": "query ( $id: String ) { Travels ( where: { metadata: { processInstances : {  id : { equal : $id } } } }){ id, __typename, flight { flightNumber, arrival, departure }, hotel { name }, traveller { firstName, email, nationality, locations { city, street, country, zipCode }, aliases}, metadata { lastUpdate, processInstances { id, processId, processName, rootProcessId, rootProcessInstanceId, parentProcessInstanceId, state, start, end, endpoint, serviceUrl, lastUpdate }, userTasks { id, description, name, priority, processInstanceId, actualOwner, lastUpdate } } } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "TravelsByProcessInstanceIdAndTravellerFirstName": {
     "query": "query ( $id: String, $name: String ) { Travels ( where: { metadata : { processInstances : {  id : { equal : $id } } }, traveller : { firstName : { like : $name } } }){ id, flight { flightNumber, arrival, departure }, hotel { name }, traveller { firstName, email, nationality }, metadata { lastUpdate, processInstances { id, processId, processName, rootProcessId, rootProcessInstanceId, parentProcessInstanceId, start, end, endpoint, serviceUrl, lastUpdate } } } }",
-    "variables": {
-      "id": "%s",
-      "name": "%s"
-    }
+    "variables": {}
   },
   "DealsByTaskId": {
     "query": "query ( $id: String ) { Deals ( where: { metadata : { userTasks : { id : { equal : $id } } } } ){ id, __typename, name, review, metadata { lastUpdate, userTasks { id, description, state, name, priority, processInstanceId, actualOwner, started, completed, lastUpdate } } } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   },
   "DealsByTaskIdNoActualOwner": {
     "query": "query ( $id: String ) { Deals ( where: { metadata : { userTasks : { id : { equal : $id }, actualOwner: { isNull: true } } } } ){ id, __typename, name, review, metadata { lastUpdate, userTasks { id, description, state, name, priority, processInstanceId, actualOwner, started, completed, lastUpdate } } } }",
-    "variables": {
-      "id": "%s"
-    }
+    "variables": {}
   }
 }
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
index a9c041341..c7ea6b341 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/ProcessInstanceEntity.java
@@ -38,14 +38,12 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;

 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;

+import org.kie.kogito.persistence.oracle.hibernate.JsonBinaryType;
 @Entity(name = "processes")
 @Table(name = "processes")
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 public class ProcessInstanceEntity extends AbstractEntity {

     @Id
@@ -75,7 +73,7 @@ public class ProcessInstanceEntity extends AbstractEntity {
     private String createdBy;
     @Column(name = "updated_by")
     private String updatedBy;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     private ObjectNode variables;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "processInstance")
     private List<NodeInstanceEntity> nodes;
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
index 98cd6fd26..965a753b3 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/model/UserTaskInstanceEntity.java
@@ -38,13 +38,12 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;

 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;
+
+import org.kie.kogito.persistence.oracle.hibernate.JsonBinaryType;

 @Entity(name = "tasks")
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 @Table(name = "tasks")
 public class UserTaskInstanceEntity extends AbstractEntity {

@@ -93,9 +92,9 @@ public class UserTaskInstanceEntity extends AbstractEntity {
     private String processId;
     private String rootProcessId;
     private String rootProcessInstanceId;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     private ObjectNode inputs;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     private ObjectNode outputs;
     private String endpoint;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "userTask", orphanRemoval = true, fetch = FetchType.LAZY)
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
index a663c662b..dca6217b4 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/main/java/org/kie/kogito/index/oracle/storage/OracleQuery.java
@@ -29,8 +29,8 @@ import jakarta.persistence.criteria.Order;
 import jakarta.persistence.criteria.Path;
 import jakarta.persistence.criteria.Predicate;
 import jakarta.persistence.criteria.Root;
+import jakarta.persistence.metamodel.Attribute;

-import org.hibernate.query.criteria.internal.path.PluralAttributePath;
 import org.kie.kogito.index.oracle.model.AbstractEntity;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
@@ -137,10 +137,10 @@ public class OracleQuery<E extends AbstractEntity, T> implements Query<T> {
                     return builder.equal(getAttributePath(root, attribute), value);
                 case IS_NULL:
                     Path pathNull = getAttributePath(root, attribute);
-                    return pathNull instanceof PluralAttributePath ? builder.isEmpty(pathNull) : builder.isNull(pathNull);
+                    return isPluralAttribute(attribute) ? builder.isEmpty(pathNull) : builder.isNull(pathNull);
                 case NOT_NULL:
                     Path pathNotNull = getAttributePath(root, attribute);
-                    return pathNotNull instanceof PluralAttributePath ? builder.isNotEmpty(pathNotNull) : builder.isNotNull(pathNotNull);
+                    return isPluralAttribute(attribute) ? builder.isNotEmpty(pathNotNull) : builder.isNotNull(pathNotNull);
                 case BETWEEN:
                     List<Object> v = (List<Object>) value;
                     return builder.between(getAttributePath(root, attribute), (Comparable) v.get(0),
@@ -179,6 +179,11 @@ public class OracleQuery<E extends AbstractEntity, T> implements Query<T> {
         return join.get(split[split.length - 1]);
     }

+    private boolean isPluralAttribute(final String attribute) {
+        return this.repository.getEntityManager().getMetamodel().entity(this.entityClass).getDeclaredPluralAttributes().stream()
+                .map(Attribute::getName)
+                .anyMatch(pluralAttribute -> pluralAttribute.equals(attribute));
+    }
     private List<Predicate> getRecursivePredicate(AttributeFilter<?> filter, Root<E> root, CriteriaBuilder builder) {
         return ((List<AttributeFilter<?>>) filter.getValue())
                 .stream()
diff --git a/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java b/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
index cdcd3cde9..a47fba0db 100644
--- a/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
+++ b/data-index/data-index-storage/data-index-storage-oracle/src/test/java/org/kie/kogito/index/oracle/schema/DDLSchemaExporter.java
@@ -46,7 +46,7 @@ public class DDLSchemaExporter {
     public static void main(String[] args) {
         try (KogitoOracleSqlContainer oracleSql = new KogitoOracleSqlContainer()) {
             oracleSql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, oracleSql.getJdbcUrl());
             settings.put(Environment.USER, oracleSql.getUsername());
             settings.put(Environment.PASS, oracleSql.getPassword());
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
index 45ae037ac..fac15ead3 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/ProcessInstanceEntity.java
@@ -38,13 +38,11 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;

 import com.fasterxml.jackson.databind.node.ObjectNode;

 @Entity(name = "processes")
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 @Table(name = "processes")
 public class ProcessInstanceEntity extends AbstractEntity {

@@ -74,7 +72,7 @@ public class ProcessInstanceEntity extends AbstractEntity {
     private String createdBy;

     private String updatedBy;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode variables;
     @OneToMany(cascade = CascadeType.ALL, mappedBy = "processInstance")
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
index 94f6d5dbd..e8abc279b 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/model/UserTaskInstanceEntity.java
@@ -38,13 +38,11 @@ import jakarta.persistence.Table;
 import org.hibernate.annotations.OnDelete;
 import org.hibernate.annotations.OnDeleteAction;
 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;

 import com.fasterxml.jackson.databind.node.ObjectNode;

 @Entity(name = "tasks")
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 @Table(name = "tasks")
 public class UserTaskInstanceEntity extends AbstractEntity {

@@ -93,10 +91,10 @@ public class UserTaskInstanceEntity extends AbstractEntity {
     private String processId;
     private String rootProcessId;
     private String rootProcessInstanceId;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode inputs;
-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     @Column(columnDefinition = "jsonb")
     private ObjectNode outputs;
     private String endpoint;
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
index b3d980ec6..1df737162 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/main/java/org/kie/kogito/index/postgresql/storage/PostgreSqlQuery.java
@@ -29,8 +29,8 @@ import jakarta.persistence.criteria.Order;
 import jakarta.persistence.criteria.Path;
 import jakarta.persistence.criteria.Predicate;
 import jakarta.persistence.criteria.Root;
+import jakarta.persistence.metamodel.Attribute;

-import org.hibernate.query.criteria.internal.path.PluralAttributePath;
 import org.kie.kogito.index.postgresql.model.AbstractEntity;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
@@ -135,10 +135,10 @@ public class PostgreSqlQuery<K, E extends AbstractEntity, T> implements Query<T>
                     return builder.equal(getAttributePath(root, filter.getAttribute()), filter.getValue());
                 case IS_NULL:
                     Path pathNull = getAttributePath(root, filter.getAttribute());
-                    return pathNull instanceof PluralAttributePath ? builder.isEmpty(pathNull) : builder.isNull(pathNull);
+                    return isPluralAttribute(filter.getAttribute()) ? builder.isEmpty(pathNull) : builder.isNull(pathNull);
                 case NOT_NULL:
                     Path pathNotNull = getAttributePath(root, filter.getAttribute());
-                    return pathNotNull instanceof PluralAttributePath ? builder.isNotEmpty(pathNotNull) : builder.isNotNull(pathNotNull);
+                    return isPluralAttribute(filter.getAttribute()) ? builder.isNotEmpty(pathNotNull) : builder.isNotNull(pathNotNull);
                 case BETWEEN:
                     List<Object> value = (List<Object>) filter.getValue();
                     return builder
@@ -179,6 +179,12 @@ public class PostgreSqlQuery<K, E extends AbstractEntity, T> implements Query<T>
         return join.get(split[split.length - 1]);
     }

+    private boolean isPluralAttribute(final String attribute) {
+        return this.repository.getEntityManager().getMetamodel().entity(this.entityClass).getDeclaredPluralAttributes().stream()
+                .map(Attribute::getName)
+                .anyMatch(pluralAttribute -> pluralAttribute.equals(attribute));
+    }
+
     private List<Predicate> getRecursivePredicate(AttributeFilter<?> filter, Root<E> root, CriteriaBuilder builder) {
         return ((List<AttributeFilter<?>>) filter.getValue())
                 .stream()
diff --git a/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java b/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
index 9b082ecd2..16aaa771e 100644
--- a/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
+++ b/data-index/data-index-storage/data-index-storage-postgresql/src/test/java/org/kie/kogito/index/postgresql/schema/DDLSchemaExporter.java
@@ -48,7 +48,7 @@ public class DDLSchemaExporter {
         try (KogitoPostgreSqlContainer postgresql = new KogitoPostgreSqlContainer()) {
             postgresql.waitingFor(Wait.forListeningPort());
             postgresql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, postgresql.getJdbcUrl());
             settings.put(Environment.USER, postgresql.getUsername());
             settings.put(Environment.PASS, postgresql.getPassword());
diff --git a/kogito-apps-build-parent/pom.xml b/kogito-apps-build-parent/pom.xml
index 2ae4efff1..1dcf2e465 100644
--- a/kogito-apps-build-parent/pom.xml
+++ b/kogito-apps-build-parent/pom.xml
@@ -67,7 +67,7 @@
         <!-- OptaPlanner version -->
         <version.org.optaplanner>9.44.0.Final</version.org.optaplanner>

-        <version.com.vladmihalcea.hibernate-types-55>2.12.1</version.com.vladmihalcea.hibernate-types-55>
+        <version.org.hibernate>6.2.13.Final</version.org.hibernate>
         <version.org.apache.opennlp>1.9.2</version.org.apache.opennlp>
         <version.org.apache.commons.csv>1.8</version.org.apache.commons.csv>
         <version.org.jredisearch>2.0.0</version.org.jredisearch>
@@ -184,9 +184,9 @@
                 <scope>test</scope>
             </dependency>
             <dependency>
-                <groupId>com.vladmihalcea</groupId>
-                <artifactId>hibernate-types-55</artifactId>
-                <version>${version.com.vladmihalcea.hibernate-types-55}</version>
+                <groupId>org.hibernate.orm</groupId>
+                <artifactId>hibernate-ant</artifactId>
+                <version>${version.org.hibernate}</version>
             </dependency>
             <dependency>
                 <groupId>com.graphql-java</groupId>
diff --git a/persistence-commons/persistence-commons-oracle/pom.xml b/persistence-commons/persistence-commons-oracle/pom.xml
index ab6db2dbd..8e011f3c7 100644
--- a/persistence-commons/persistence-commons-oracle/pom.xml
+++ b/persistence-commons/persistence-commons-oracle/pom.xml
@@ -46,8 +46,8 @@
       <artifactId>quarkus-jdbc-oracle</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.vladmihalcea</groupId>
-      <artifactId>hibernate-types-55</artifactId>
+      <groupId>org.hibernate.orm</groupId>
+      <artifactId>hibernate-ant</artifactId>
     </dependency>
     <dependency>
       <groupId>io.quarkus</groupId>
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
index 45b33bc1f..bc0c0e758 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/OracleQuery.java
@@ -25,17 +25,19 @@ import java.util.Objects;
 import java.util.stream.Collectors;

 import org.hibernate.query.NativeQuery;
+import org.hibernate.type.CustomType;
+import org.hibernate.type.spi.TypeConfiguration;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
 import org.kie.kogito.persistence.api.query.FilterCondition;
 import org.kie.kogito.persistence.api.query.Query;
+import org.kie.kogito.persistence.oracle.hibernate.JsonBinaryType;
 import org.kie.kogito.persistence.oracle.model.CacheEntityRepository;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;

 import static java.lang.String.format;
 import static java.util.stream.Collectors.joining;
@@ -140,7 +142,7 @@ public class OracleQuery<T> implements Query<T> {
         jakarta.persistence.Query query = repository.getEntityManager()
                 .createNativeQuery(queryString.toString())
                 .unwrap(NativeQuery.class)
-                .addScalar("json_value", new JsonBlobType(type));
+                .addScalar("json_value", new CustomType<>(new JsonBinaryType(), new TypeConfiguration()));

         if (limit != null) {
             query.setMaxResults(limit);
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
index bee97ed84..667e799f6 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/hibernate/JsonBinaryType.java
@@ -18,91 +18,83 @@
  */
 package org.kie.kogito.persistence.oracle.hibernate;

+import java.io.ByteArrayInputStream;
 import java.io.Serializable;
+import java.sql.Blob;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.Types;
 import java.util.Objects;

 import org.hibernate.HibernateException;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.type.SqlTypes;
 import org.hibernate.usertype.UserType;

 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.node.ObjectNode;

 import static java.lang.String.format;

-public class JsonBinaryType implements UserType {
+public class JsonBinaryType implements UserType<JsonNode> {

     private ObjectMapper mapper = new ObjectMapper();

     @Override
-    public int[] sqlTypes() {
-        return new int[] { Types.JAVA_OBJECT };
+    public int getSqlType() {
+        return SqlTypes.BLOB;
     }

     @Override
-    public Class returnedClass() {
+    public Class<JsonNode> returnedClass() {
         return JsonNode.class;
     }

     @Override
-    public boolean equals(Object x, Object y) throws HibernateException {
+    public boolean equals(JsonNode x, JsonNode y) throws HibernateException {
         return Objects.equals(x, y);
     }

     @Override
-    public int hashCode(Object x) throws HibernateException {
+    public int hashCode(JsonNode x) throws HibernateException {
         return Objects.hashCode(x);
     }

     @Override
-    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
+    public JsonNode nullSafeGet(ResultSet rs, int position, SharedSessionContractImplementor session, Object owner)
             throws HibernateException, SQLException {
-        final String json = rs.getString(names[0]);
-        if (json == null) {
+        final Blob json = rs.getBlob(position);
+        if (json.length() == 0) {
             return null;
         }
         try {
-            return mapper.readTree(json.getBytes("UTF-8"));
+            return mapper.readTree(json.getBinaryStream());
         } catch (final Exception ex) {
-            throw new RuntimeException("Failed to convert String to Invoice: " + ex.getMessage(), ex);
+            throw new RuntimeException("Failed to convert String to JSON: " + ex.getMessage(), ex);
         }
     }

     @Override
-    public void nullSafeSet(PreparedStatement ps, Object value, int index, SharedSessionContractImplementor session)
+    public void nullSafeSet(PreparedStatement ps, JsonNode value, int index, SharedSessionContractImplementor session)
             throws HibernateException, SQLException {
         if (value == null) {
-            ps.setNull(index, Types.OTHER);
+            ps.setNull(index, SqlTypes.BLOB);
             return;
         }
-        if (value instanceof ObjectNode) {
-            try {
-                //ps.setObject(index, value.toString(), Types.OTHER);
-                ps.setObject(index, value.toString(), Types.LONGNVARCHAR);
-            } catch (final Exception ex) {
-                throw new RuntimeException(format("Failed to convert JSON to String: %s", ex.getMessage()), ex);
-            }
-        } else {
-            throw new RuntimeException(format("Cannot convert type %s as JSON String", value.getClass().getCanonicalName()));
+        try {
+            ps.setBlob(index, new ByteArrayInputStream(value.toString().getBytes()));
+        } catch (final Exception ex) {
+            throw new RuntimeException(format("Failed to convert JSON to String: %s", ex.getMessage()), ex);
         }
     }

     @Override
-    public Object deepCopy(Object value) throws HibernateException {
+    public JsonNode deepCopy(JsonNode value) throws HibernateException {
         if (value == null) {
             return null;
         }
-        if (value instanceof JsonNode) {
-            return ((JsonNode) value).deepCopy();
-        } else {
-            throw new RuntimeException(format("Cannot deep copy type %s", value.getClass().getCanonicalName()));
-        }
+        return value.deepCopy();
     }

     @Override
@@ -111,12 +103,12 @@ public class JsonBinaryType implements UserType {
     }

     @Override
-    public Serializable disassemble(Object value) throws HibernateException {
+    public Serializable disassemble(JsonNode value) throws HibernateException {
         return this.deepCopy(value).toString();
     }

     @Override
-    public Object assemble(Serializable cached, Object owner) throws HibernateException {
+    public JsonNode assemble(Serializable cached, Object owner) throws HibernateException {
         try {
             return mapper.readTree(cached.toString());
         } catch (JsonProcessingException ex) {
@@ -125,7 +117,7 @@ public class JsonBinaryType implements UserType {
     }

     @Override
-    public Object replace(Object original, Object target, Object owner) throws HibernateException {
+    public JsonNode replace(JsonNode original, JsonNode target, Object owner) throws HibernateException {
         return original;
     }
 }
diff --git a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
index 996177bfc..5c5660687 100644
--- a/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
+++ b/persistence-commons/persistence-commons-oracle/src/main/java/org/kie/kogito/persistence/oracle/model/CacheEntity.java
@@ -29,16 +29,15 @@ import jakarta.persistence.Table;
 import jakarta.persistence.UniqueConstraint;

 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
+
+import org.kie.kogito.persistence.oracle.hibernate.JsonBinaryType;

 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vladmihalcea.hibernate.type.json.JsonBlobType;

 @Entity
 @IdClass(CacheId.class)
 @Table(name = "kogito_data_cache", uniqueConstraints = @UniqueConstraint(columnNames = { "name", "key" }),
         indexes = @Index(columnList = "name,key", unique = true))
-@TypeDef(name = "jsonb", typeClass = JsonBlobType.class)
 public class CacheEntity {

     @Id
@@ -49,7 +48,7 @@ public class CacheEntity {
     @Column(nullable = false)
     private String key;

-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     @Column(name = "json_value")
     private ObjectNode value;

diff --git a/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java b/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
index 9269c56b9..18d42b55d 100644
--- a/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
+++ b/persistence-commons/persistence-commons-oracle/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
@@ -39,7 +39,7 @@ public class DDLSchemaExporter {
         try (KogitoOracleSqlContainer oracle = new KogitoOracleSqlContainer()) {
             oracle.waitingFor(Wait.forListeningPort());
             oracle.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, oracle.getJdbcUrl());
             settings.put(Environment.USER, oracle.getUsername());
             settings.put(Environment.PASS, oracle.getPassword());
diff --git a/persistence-commons/persistence-commons-postgresql/pom.xml b/persistence-commons/persistence-commons-postgresql/pom.xml
index 4a5ecaa1f..da5f3ca48 100644
--- a/persistence-commons/persistence-commons-postgresql/pom.xml
+++ b/persistence-commons/persistence-commons-postgresql/pom.xml
@@ -46,8 +46,8 @@
       <artifactId>quarkus-jdbc-postgresql</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.vladmihalcea</groupId>
-      <artifactId>hibernate-types-55</artifactId>
+      <groupId>org.hibernate.orm</groupId>
+      <artifactId>hibernate-ant</artifactId>
     </dependency>
     <dependency>
       <groupId>io.quarkus</groupId>
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
index cd6ab38b2..ae831210e 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/PostgresQuery.java
@@ -24,17 +24,19 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Collectors;

+import org.hibernate.type.CustomType;
+import org.hibernate.type.spi.TypeConfiguration;
 import org.kie.kogito.persistence.api.query.AttributeFilter;
 import org.kie.kogito.persistence.api.query.AttributeSort;
 import org.kie.kogito.persistence.api.query.FilterCondition;
 import org.kie.kogito.persistence.api.query.Query;
+import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;
 import org.kie.kogito.persistence.postgresql.model.CacheEntityRepository;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;

 import static java.lang.String.format;
 import static java.util.stream.Collectors.joining;
@@ -137,7 +139,7 @@ public class PostgresQuery<T> implements Query<T> {

         LOGGER.debug("Executing PostgreSQL query: {}", queryString);
         jakarta.persistence.Query query = repository.getEntityManager().createNativeQuery(queryString.toString());
-        query.unwrap(org.hibernate.query.NativeQuery.class).addScalar("json_value", JsonNodeBinaryType.INSTANCE);
+        query.unwrap(org.hibernate.query.NativeQuery.class).addScalar("json_value", new CustomType<>(new JsonBinaryType(), new TypeConfiguration()));

         if (limit != null) {
             query.setMaxResults(limit);
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
index 3f360bba2..937851b9f 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/hibernate/JsonBinaryType.java
@@ -27,81 +27,73 @@ import java.util.Objects;

 import org.hibernate.HibernateException;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.type.SqlTypes;
 import org.hibernate.usertype.UserType;

 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.node.ObjectNode;

 import static java.lang.String.format;

-public class JsonBinaryType implements UserType {
+public class JsonBinaryType implements UserType<JsonNode> {

     private ObjectMapper mapper = new ObjectMapper();

     @Override
-    public int[] sqlTypes() {
-        return new int[] { Types.JAVA_OBJECT };
+    public int getSqlType() {
+        return SqlTypes.BLOB;
     }

     @Override
-    public Class returnedClass() {
+    public Class<JsonNode> returnedClass() {
         return JsonNode.class;
     }

     @Override
-    public boolean equals(Object x, Object y) throws HibernateException {
+    public boolean equals(JsonNode x, JsonNode y) throws HibernateException {
         return Objects.equals(x, y);
     }

     @Override
-    public int hashCode(Object x) throws HibernateException {
+    public int hashCode(JsonNode x) throws HibernateException {
         return Objects.hashCode(x);
     }

     @Override
-    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
+    public JsonNode nullSafeGet(ResultSet rs, int position, SharedSessionContractImplementor session, Object owner)
             throws HibernateException, SQLException {
-        final String json = rs.getString(names[0]);
+        final String json = rs.getString(position);
         if (json == null) {
             return null;
         }
         try {
             return mapper.readTree(json.getBytes("UTF-8"));
         } catch (final Exception ex) {
-            throw new RuntimeException("Failed to convert String to Invoice: " + ex.getMessage(), ex);
+            throw new RuntimeException("Failed to convert String to JSON: " + ex.getMessage(), ex);
         }
     }

     @Override
-    public void nullSafeSet(PreparedStatement ps, Object value, int index, SharedSessionContractImplementor session)
+    public void nullSafeSet(PreparedStatement ps, JsonNode value, int index, SharedSessionContractImplementor session)
             throws HibernateException, SQLException {
         if (value == null) {
             ps.setNull(index, Types.OTHER);
             return;
         }
-        if (value instanceof ObjectNode) {
-            try {
-                ps.setObject(index, value.toString(), Types.OTHER);
-            } catch (final Exception ex) {
-                throw new RuntimeException(format("Failed to convert JSON to String: %s", ex.getMessage()), ex);
-            }
-        } else {
-            throw new RuntimeException(format("Cannot convert type %s as JSON String", value.getClass().getCanonicalName()));
+        try {
+            ps.setObject(index, value.toString(), Types.OTHER);
+        } catch (final Exception ex) {
+            throw new RuntimeException(format("Failed to convert JSON to String: %s", ex.getMessage()), ex);
         }
     }

     @Override
-    public Object deepCopy(Object value) throws HibernateException {
+    public JsonNode deepCopy(JsonNode value) throws HibernateException {
         if (value == null) {
             return null;
         }
-        if (value instanceof JsonNode) {
-            return ((JsonNode) value).deepCopy();
-        } else {
-            throw new RuntimeException(format("Cannot deep copy type %s", value.getClass().getCanonicalName()));
-        }
+        return value.deepCopy();
     }

     @Override
@@ -110,12 +102,12 @@ public class JsonBinaryType implements UserType {
     }

     @Override
-    public Serializable disassemble(Object value) throws HibernateException {
+    public Serializable disassemble(JsonNode value) throws HibernateException {
         return this.deepCopy(value).toString();
     }

     @Override
-    public Object assemble(Serializable cached, Object owner) throws HibernateException {
+    public JsonNode assemble(Serializable cached, Object owner) throws HibernateException {
         try {
             return mapper.readTree(cached.toString());
         } catch (JsonProcessingException ex) {
@@ -124,7 +116,7 @@ public class JsonBinaryType implements UserType {
     }

     @Override
-    public Object replace(Object original, Object target, Object owner) throws HibernateException {
+    public JsonNode replace(JsonNode original, JsonNode target, Object owner) throws HibernateException {
         return original;
     }
 }
diff --git a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
index 0f58963f9..a77c306cf 100644
--- a/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
+++ b/persistence-commons/persistence-commons-postgresql/src/main/java/org/kie/kogito/persistence/postgresql/model/CacheEntity.java
@@ -29,7 +29,6 @@ import jakarta.persistence.Table;
 import jakarta.persistence.UniqueConstraint;

 import org.hibernate.annotations.Type;
-import org.hibernate.annotations.TypeDef;
 import org.kie.kogito.persistence.postgresql.hibernate.JsonBinaryType;

 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -38,7 +37,6 @@ import com.fasterxml.jackson.databind.node.ObjectNode;
 @IdClass(CacheId.class)
 @Table(name = "kogito_data_cache", uniqueConstraints = @UniqueConstraint(columnNames = { "name",
         "key" }), indexes = @Index(columnList = "name,key", unique = true))
-@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
 public class CacheEntity {

     @Id
@@ -49,7 +47,7 @@ public class CacheEntity {
     @Column(nullable = false)
     private String key;

-    @Type(type = "jsonb")
+    @Type(JsonBinaryType.class)
     @Column(name = "json_value", columnDefinition = "jsonb")
     private ObjectNode value;

diff --git a/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java b/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
index 2d8e5734f..1092d6354 100644
--- a/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
+++ b/persistence-commons/persistence-commons-postgresql/src/test/java/org/kie/kogito/persistence/schema/DDLSchemaExporter.java
@@ -39,7 +39,7 @@ public class DDLSchemaExporter {
         try (KogitoPostgreSqlContainer postgresql = new KogitoPostgreSqlContainer()) {
             postgresql.waitingFor(Wait.forListeningPort());
             postgresql.start();
-            Map<String, String> settings = new HashMap<>();
+            Map<String, Object> settings = new HashMap<>();
             settings.put(Environment.URL, postgresql.getJdbcUrl());
             settings.put(Environment.USER, postgresql.getUsername());
             settings.put(Environment.PASS, postgresql.getPassword());
