diff --git a/data-index/data-index-common/pom.xml b/data-index/data-index-common/pom.xml
index f25994ad6..72a276de2 100644
--- a/data-index/data-index-common/pom.xml
+++ b/data-index/data-index-common/pom.xml
@@ -65,6 +65,10 @@
       <groupId>io.quarkus</groupId>
       <artifactId>quarkus-oidc</artifactId>
     </dependency>
+    <dependency>
+      <groupId>io.smallrye.reactive</groupId>
+      <artifactId>mutiny-zero-flow-adapters</artifactId>
+    </dependency>
     <dependency>
       <groupId>io.quarkus</groupId>
       <artifactId>quarkus-junit5</artifactId>
diff --git a/data-index/data-index-service/data-index-service-common/src/main/java/org/kie/kogito/index/service/graphql/GraphQLSchemaManagerImpl.java b/data-index/data-index-service/data-index-service-common/src/main/java/org/kie/kogito/index/service/graphql/GraphQLSchemaManagerImpl.java
index 3738fca0e..af2de1c99 100644
--- a/data-index/data-index-service/data-index-service-common/src/main/java/org/kie/kogito/index/service/graphql/GraphQLSchemaManagerImpl.java
+++ b/data-index/data-index-service/data-index-service-common/src/main/java/org/kie/kogito/index/service/graphql/GraphQLSchemaManagerImpl.java
@@ -49,6 +49,7 @@ import graphql.schema.idl.TypeDefinitionRegistry;

 import static java.lang.String.format;
 import static java.util.stream.Collectors.toList;
+import static mutiny.zero.flow.adapters.AdaptersToReactiveStreams.publisher;
 import static org.kie.kogito.index.json.JsonUtils.getObjectMapper;

 @ApplicationScoped
@@ -184,11 +185,11 @@ public class GraphQLSchemaManagerImpl extends AbstractGraphQLSchemaManager {
     }

     private DataFetcher<Publisher<ObjectNode>> objectCreatedPublisher(Supplier<Storage> cache) {
-        return env -> cache.get().objectCreatedListener();
+        return env -> publisher(cache.get().objectCreatedListener());
     }

     private DataFetcher<Publisher<ObjectNode>> objectUpdatedPublisher(Supplier<Storage> cache) {
-        return env -> cache.get().objectUpdatedListener();
+        return env -> publisher(cache.get().objectUpdatedListener());
     }

     private Supplier<DataIndexServiceException> cacheNotFoundException(String processId) {
@@ -196,11 +197,11 @@ public class GraphQLSchemaManagerImpl extends AbstractGraphQLSchemaManager {
     }

     protected DataFetcher<Publisher<ObjectNode>> getDomainModelUpdatedDataFetcher(String processId) {
-        return env -> Optional.ofNullable(getCacheService().getDomainModelCache(processId)).orElseThrow(cacheNotFoundException(processId)).objectUpdatedListener();
+        return env -> publisher(Optional.ofNullable(getCacheService().getDomainModelCache(processId)).orElseThrow(cacheNotFoundException(processId)).objectUpdatedListener());
     }

     protected DataFetcher<Publisher<ObjectNode>> getDomainModelAddedDataFetcher(String processId) {
-        return env -> Optional.ofNullable(getCacheService().getDomainModelCache(processId)).orElseThrow(cacheNotFoundException(processId)).objectCreatedListener();
+        return env -> publisher(Optional.ofNullable(getCacheService().getDomainModelCache(processId)).orElseThrow(cacheNotFoundException(processId)).objectCreatedListener());
     }

     protected DataFetcher<Collection<ObjectNode>> getDomainModelDataFetcher(String processId) {
