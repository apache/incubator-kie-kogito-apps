@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipeline {
    agent {
        label 'kie-rhel8 && docker && kie-mem16g && !built-in'
    }

    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }

    options {
        timestamps()
        timeout(time: 210, unit: 'MINUTES')
    }

    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        SONARCLOUD_TOKEN = credentials('SONARCLOUD_TOKEN')
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
        NODE_OPTIONS = '--max_old_space_size=4096'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    setupCypressEnv('9.7.0')
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout(githubscm.resolveRepository('kogito-apps', params.GIT_AUTHOR, params.BUILD_BRANCH_NAME, false))
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    getMavenCommand()
                        .withProfiles(['run-code-coverage'])
                        .run('clean install')
                }
            }
        }
        stage('Analyze') {
            steps {
                script {
                    getMavenCommand()
                        .withOptions(['-e', '-nsu'])
                        .withProfiles(['sonarcloud-analysis'])
                        .run('validate')
                }
            }
        }
    }
    post {
        always {
            script {
                junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                util.archiveConsoleLog()
            }
        }
        unsuccessful {
            script {
                mailer.sendMarkdownTestSummaryNotification('SonarCloud', "[${params.BUILD_BRANCH_NAME}] Kogito Apps", [env.KOGITO_CI_EMAIL_TO])
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

MavenCommand getMavenCommand(){
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withSettingsXmlId('kogito_release_settings')
}

void setupCypressEnv(String cypressVersion) {
    if (env.CYPRESS_BINARY_URL) {
        env.CYPRESS_INSTALL_BINARY = "${CYPRESS_BINARY_URL}/cypress-${cypressVersion}.zip"
    }
}
