@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

droolsRepo = 'incubator-kie-drools'
optaplannerRepo = 'incubator-kie-optaplanner'
kogitoRuntimesRepo = 'incubator-kie-kogito-runtimes'
kogitoAppsRepo = 'incubator-kie-kogito-apps'

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }
    options {
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutDroolsRepo()
                    checkoutOptaplannerRepo()
                    checkoutKogitoRepo(kogitoRuntimesRepo)
                    checkoutKogitoRepo(kogitoAppsRepo)
                }
            }
        }
        stage('Build Drools') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand(droolsRepo)
                            .withProperty('quickly')
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                }
            }
        }
        stage('Build Optaplanner') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand(optaplannerRepo)
                            .withProperty('quickly')
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                }
            }
        }
        stage('Retrieve optaplanner snapshot version') {
            steps {
                script {
                    dir(optaplannerRepo) {
                        // query mvn to get the latest version
                        env.OPTAPLANNER_VERSION = """${sh (
                                script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout',
                                returnStdout: true
                            ).trim()}"""
                        assert env.OPTAPLANNER_VERSION != ''
                        echo "Optaplanner version is: ${env.OPTAPLANNER_VERSION}"
                    }
                }
            }
        }
        stage('Build Runtimes') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand(kogitoRuntimesRepo)
                            .withProperty('quickly')
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                        }
                }
            }
        }
        stage('Build Apps') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand(kogitoAppsRepo)
                            .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
                            .withProperty('skipUI')
                            .withProperty('maven.test.failure.ignore', true)
                            .withProperty('version.org.optaplanner', env.OPTAPLANNER_VERSION)
                            .withProperty('optaplanner') // Use specific profile https://github.com/apache/incubator-kie-kogito-apps/blob/48a5c8f9a905a2c17b9d0e01cee744902a4824f0/pom.xml#L63
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                }
            }
            post {
                always {
                    script {
                        archiveArtifacts artifacts: '**/target/*-runner.jar,**/target/*-runner', fingerprint: true, allowEmptyArchive: true
                        junit testResults: '**/target/surefire-reports/**/*.xml,**/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                        util.archiveConsoleLog()
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

void sendNotification() {
    mailer.sendMarkdownTestSummaryNotification("${NOTIFICATION_JOB_NAME}", "[${getBuildBranch()}] Kogito Apps", [env.KOGITO_CI_EMAIL_TO])
}

void checkoutKogitoRepo(String repo, String dirName=repo) {
    dir(dirName) {
        checkout(githubscm.resolveRepository(repo, params.GIT_AUTHOR, getKogitoTargetBranch(), false))
    }
}

void checkoutDroolsRepo() {
    dir(droolsRepo) {
        checkout(githubscm.resolveRepository(droolsRepo, params.GIT_AUTHOR, getDroolsTargetBranch(), false))
    }
}

void checkoutOptaplannerRepo() {
    dir(optaplannerRepo) {
        checkout(githubscm.resolveRepository(optaplannerRepo, 'apache', getOptaPlannerBranch(), false))
    }
}


String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoTargetBranch() {
    return getTargetBranch(0)
}

String getDroolsTargetBranch() {
    return getTargetBranch(7)
}

String getTargetBranch(Integer addToMajor) {
    String targetBranch = getBuildBranch()
    List versionSplit = targetBranch.split("\\.") as List

    if (versionSplit[0].isNumber()) {
        targetBranch = "${Integer.parseInt(versionSplit[0]) + addToMajor}.${versionSplit.tail().join('.')}"
    } else {
        echo "Cannot parse targetBranch as release branch so going further with current value: ${targetBranch}"
    }
    return targetBranch
}

String getOptaPlannerBranch() {
    return env['OPTAPLANNER_BRANCH'] ?: 'main'
}

MavenCommand getMavenCommand(String directory) {
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withProperty('java.net.preferIPv4Stack', true)
                .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
                .inDirectory(directory)
}

String getNativeBuilderImage() {
    return env.NATIVE_BUILDER_IMAGE
}
