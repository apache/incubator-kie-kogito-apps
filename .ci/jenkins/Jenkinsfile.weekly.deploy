import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

pipeline {
    agent {
        docker {
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timestamps()
        timeout(time: 600, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        MAVEN_DEPLOY_LOCAL_DIR = '/tmp/maven_deploy_dir'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    dir(getRepoName()) {
                        checkoutRepo()
                    }

                    env.PROJECT_VERSION = maven.mvnGetVersionProperty(getMavenCommand(), 'project.parent.version')
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                    }
                }
            }
        }
        stage('Update project version') {
            steps {
                script {
                    maven.mvnVersionsUpdateParentAndChildModules(
                        getMavenCommand(),
                        getProjectVersion(),
                        true
                    )
                }
            }
        }

        stage('Build & Test & Install/Deploy') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.MAVEN_REPO_CREDS_ID, usernameVariable: 'REPOSITORY_USER', passwordVariable: 'REPOSITORY_TOKEN')]) {
                        def installOrDeploy
                        if (shouldDeployToRepository()) {
                            installOrDeploy = "deploy -DdeployAtEnd -Dapache.repository.username=${REPOSITORY_USER} -Dapache.repository.password=${REPOSITORY_TOKEN} -DretryFailedDeploymentCount=5"
                        } else {
                            installOrDeploy = 'install'
                        }
                        configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                            getMavenCommand().withProperty('maven.test.failure.ignore', true)
                                .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
                                .withOptions(env.KOGITO_APPS_BUILD_MVN_OPTS ? [ env.KOGITO_APPS_BUILD_MVN_OPTS ] : [])
                                .skipTests(params.SKIP_TESTS)
                                .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                                .run("clean $installOrDeploy")
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        saveReports()
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Create and push a new tag') {
            steps {
                script {
                    projectVersion = getProjectVersion(false)
                    dir(getRepoName()) {
                        githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
                        githubscm.tagRepository(projectVersion)
                        githubscm.pushRemoteTag('origin', projectVersion, getGitAuthorPushCredsId())
                    }
                }
            }
        }

        stage('Trigger JIT Executor Native GH workflow') {
            steps {
                script {
                    dir(getRepoName()) {
                        checkoutTag = getProjectVersion(false)
                        kogitoVersion = getProjectVersion()
                        withCredentials([usernamePassword(credentialsId: "${getGitAuthorPushCredsId()}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            sh """
                            git config user.email ${GITHUB_USER}@jenkins.kie.apache.org
                            git config user.name ${GITHUB_USER}
                            gh workflow run "publish-jitexecutor-native.yml" --ref "${checkoutTag}" -f kogito_runtime_version="${kogitoVersion}" --repo="https://github.com/${getGitAuthor()}/${getRepoName()}"
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry ->  "${entry.key}=${entry.value}" }.join('\n')
                writeFile(text: propertiesStr, file: 'deployment.properties')
                archiveArtifacts(artifacts: 'deployment.properties')
            }
        }
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Weekly Deploy', "[${getBuildBranch()}] Kogito Apps", [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void saveReports() {
    // Remove `node_modules` to avoid heap space issues with junit command thereafter
    // Related to https://github.com/jenkinsci/junit-plugin/issues/478 and https://github.com/jenkinsci/junit-plugin/issues/467
    sh 'find . -type d -name node_modules -exec rm -rf {} \\; || true'
    junit(testResults: '**/junit.xml, **/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml, **/target/invoker-reports/**/*.xml', allowEmptyResults: true)
    archiveArtifacts artifacts: '**/*.log,**/cypress/screenshots/**,**/cypress/videos/**', allowEmptyArchive: true
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
    checkoutDatetime = getCheckoutDatetime()
    if (checkoutDatetime) {
        sh "git checkout `git rev-list -n 1 --before=\"${checkoutDatetime}\" ${getBuildBranch()}`"
    }
}

boolean isSpecificArtifactsUpload() {
    return env.MAVEN_DEPLOY_REPOSITORY && env.MAVEN_REPO_CREDS_ID
}

boolean shouldDeployToRepository() {
    return env.MAVEN_DEPLOY_REPOSITORY && env.MAVEN_REPO_CREDS_ID && getGitAuthor() == 'apache'
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value) {
        deployProperties[key] = value
    }
}

MavenCommand getMavenCommand(String directory = '') {
    directory = directory ?: getRepoName()
    def mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
                .inDirectory(directory)
                .withProperty('full')
    return mvnCmd
}

void runMavenLocalDeploy(boolean skipTests = true) {
    mvnCmd = getMavenCommand()
    mvnCmd.withLocalDeployFolder(getLocalDeploymentFolder())

    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]) {
        mvnCmd.withProperty('maven.test.failure.ignore', true)
            .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
            .withOptions(env.KOGITO_APPS_BUILD_MVN_OPTS ? [ env.KOGITO_APPS_BUILD_MVN_OPTS ] : [])
            .skipTests(skipTests)
            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
            .run('clean deploy')
    }
}

String getLocalDeploymentFolder() {
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${getRepoName()}"
}

String getCheckoutDatetime() {
    return params.GIT_CHECKOUT_DATETIME
}

String getProjectVersionDate() {
    def projectVersionDate = (getCheckoutDatetime() =~ /(\d{4}-\d{2}-\d{2})/)[0][0]
    return projectVersionDate.replace('-', '')
}

String getProjectVersion(boolean keepSnapshotSuffix = true) {
    def projectVersion = env.PROJECT_VERSION
    if (keepSnapshotSuffix) {
        return projectVersion.replace('-SNAPSHOT', "-${getProjectVersionDate()}-SNAPSHOT")
    }
    return projectVersion.replace('-SNAPSHOT', "-${getProjectVersionDate()}")
}
