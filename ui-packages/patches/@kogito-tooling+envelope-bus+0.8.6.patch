diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/api/index.d.ts b/node_modules/@kogito-tooling/envelope-bus/dist/api/index.d.ts
index 551c177..6ee08b0 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/api/index.d.ts
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/api/index.d.ts
@@ -30,6 +30,7 @@ export interface EnvelopeBusMessage<D, T> {
     purpose: EnvelopeBusMessagePurpose;
     error?: any;
     targetEnvelopeId?: string;
+    directSender?: EnvelopeBusMessageDirectSender;
 }
 export declare enum EnvelopeBusMessagePurpose {
     REQUEST = "request",
@@ -38,6 +39,10 @@ export declare enum EnvelopeBusMessagePurpose {
     UNSUBSCRIPTION = "unsubscription",
     NOTIFICATION = "notification"
 }
+export declare enum EnvelopeBusMessageDirectSender {
+    ENVELOPE_BUS_CONTROLLER = "envelopeBusController",
+    ENVELOPE_SERVER = "envelopeServer"
+}
 export interface EnvelopeBus {
     postMessage<D, T>(message: EnvelopeBusMessage<D, T>, targetOrigin?: string, _?: any): void;
 }
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/api/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/api/index.js
index 744cf3e..35b98cc 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/api/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/api/index.js
@@ -1 +1,133 @@
-module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.REQUEST="request",e.RESPONSE="response",e.SUBSCRIPTION="subscription",e.UNSUBSCRIPTION="unsubscription",e.NOTIFICATION="notification"}(t.EnvelopeBusMessagePurpose||(t.EnvelopeBusMessagePurpose={}))}]);
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/api/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/api/index.ts":
+/*!**************************!*\
+  !*** ./src/api/index.ts ***!
+  \**************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+var EnvelopeBusMessagePurpose;
+(function (EnvelopeBusMessagePurpose) {
+    EnvelopeBusMessagePurpose["REQUEST"] = "request";
+    EnvelopeBusMessagePurpose["RESPONSE"] = "response";
+    EnvelopeBusMessagePurpose["SUBSCRIPTION"] = "subscription";
+    EnvelopeBusMessagePurpose["UNSUBSCRIPTION"] = "unsubscription";
+    EnvelopeBusMessagePurpose["NOTIFICATION"] = "notification";
+})(EnvelopeBusMessagePurpose = exports.EnvelopeBusMessagePurpose || (exports.EnvelopeBusMessagePurpose = {}));
+var EnvelopeBusMessageDirectSender;
+(function (EnvelopeBusMessageDirectSender) {
+    EnvelopeBusMessageDirectSender["ENVELOPE_BUS_CONTROLLER"] = "envelopeBusController";
+    EnvelopeBusMessageDirectSender["ENVELOPE_SERVER"] = "envelopeServer";
+})(EnvelopeBusMessageDirectSender = exports.EnvelopeBusMessageDirectSender || (exports.EnvelopeBusMessageDirectSender = {}));
+
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/channel/EnvelopeServer.d.ts b/node_modules/@kogito-tooling/envelope-bus/dist/channel/EnvelopeServer.d.ts
index f8be87c..29ef416 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/channel/EnvelopeServer.d.ts
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/channel/EnvelopeServer.d.ts
@@ -1,8 +1,13 @@
 import { ApiDefinition, EnvelopeBus, EnvelopeBusMessage, FunctionPropertyNames } from "../api";
 import { EnvelopeBusMessageManager } from "../common";
+export declare enum EnvelopeServerType {
+    LOCAL = "local",
+    REMOTE = "remote"
+}
 export declare class EnvelopeServer<ApiToProvide extends ApiDefinition<ApiToProvide>, ApiToConsume extends ApiDefinition<ApiToConsume>> {
     readonly origin: string;
     readonly pollInit: (self: EnvelopeServer<ApiToProvide, ApiToConsume>) => Promise<any>;
+    readonly type: EnvelopeServerType;
     readonly manager: EnvelopeBusMessageManager<ApiToProvide, ApiToConsume>;
     static INIT_POLLING_TIMEOUT_IN_MS: number;
     static INIT_POLLING_INTERVAL_IN_MS: number;
@@ -10,7 +15,7 @@ export declare class EnvelopeServer<ApiToProvide extends ApiDefinition<ApiToProv
     initPollingTimeout?: ReturnType<typeof setTimeout>;
     readonly id: string;
     get envelopeApi(): import("../api").MessageBusClientApi<ApiToConsume>;
-    constructor(bus: EnvelopeBus, origin: string, pollInit: (self: EnvelopeServer<ApiToProvide, ApiToConsume>) => Promise<any>, manager?: EnvelopeBusMessageManager<ApiToProvide, ApiToConsume>);
+    constructor(bus: EnvelopeBus, origin: string, pollInit: (self: EnvelopeServer<ApiToProvide, ApiToConsume>) => Promise<any>, type?: EnvelopeServerType, manager?: EnvelopeBusMessageManager<ApiToProvide, ApiToConsume>);
     startInitPolling(): void;
     stopInitPolling(): void;
     receive(message: EnvelopeBusMessage<unknown, FunctionPropertyNames<ApiToProvide> | FunctionPropertyNames<ApiToConsume>>, api: ApiToProvide): void;
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/channel/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/channel/index.js
index cf836e2..82e08da 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/channel/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/channel/index.js
@@ -1 +1,581 @@
-module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.REQUEST="request",e.RESPONSE="response",e.SUBSCRIPTION="subscription",e.UNSUBSCRIPTION="unsubscription",e.NOTIFICATION="notification"}(t.EnvelopeBusMessagePurpose||(t.EnvelopeBusMessagePurpose={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(2))},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,s=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var s=r(0),i=function(){function e(e,t){var r,n,s=this;void 0===t&&(t=""+(new Date).getMilliseconds()),this.send=e,this.name=t,this.callbacks=new Map,this.remoteSubscriptions=[],this.localSubscriptions=new Map,this.clientApi=(r=new Map,n=new Map,{requests:new Proxy({},{set:function(e,t,n){return r.set(t,n),!0},get:function(e,t){var n,i=t;return null!==(n=r.get(i))&&void 0!==n?n:r.set(i,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.request.apply(s,o([i],e))})).get(i)}}),notifications:new Proxy({},{set:function(e,t,r){return n.set(t,r),!0},get:function(e,t){var r,i=t;return null!==(r=n.get(i))&&void 0!==r?r:n.set(i,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.notify.apply(s,o([i],e))})).get(i)}}),subscribe:function(e,t){return s.subscribe(e,t)},unsubscribe:function(e,t){return s.unsubscribe(e,t)}}),this.requestIdCounter=0}return Object.defineProperty(e.prototype,"server",{get:function(){var e=this;return{receive:function(t,r){return e.receive(t,r)}}},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e,t){var r,n=null!==(r=this.localSubscriptions.get(e))&&void 0!==r?r:[];return this.localSubscriptions.set(e,o(n,[t])),this.send({type:e,purpose:s.EnvelopeBusMessagePurpose.SUBSCRIPTION,data:[]}),t},e.prototype.unsubscribe=function(e,t){var r=this.localSubscriptions.get(e);if(r){var n=r.indexOf(t);n<0||(r.splice(n,1),this.send({type:e,purpose:s.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,data:[]}))}},e.prototype.request=function(e){for(var t=this,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var o=this.getNextRequestId();return this.send({requestId:o,type:e,data:r,purpose:s.EnvelopeBusMessagePurpose.REQUEST}),new Promise((function(e,r){t.callbacks.set(o,{resolve:e,reject:r})}))},e.prototype.notify=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.send({type:e,data:t,purpose:s.EnvelopeBusMessagePurpose.NOTIFICATION})},e.prototype.respond=function(e,t,r){if(e.purpose!==s.EnvelopeBusMessagePurpose.REQUEST)throw new Error("Cannot respond a message that is not a request");if(!e.requestId)throw new Error("Cannot respond a request without a requestId");this.send({requestId:e.requestId,purpose:s.EnvelopeBusMessagePurpose.RESPONSE,type:e.type,data:t,error:r})},e.prototype.callback=function(e){if(e.purpose!==s.EnvelopeBusMessagePurpose.RESPONSE)throw new Error("Cannot invoke callback with a message that is not a response");if(!e.requestId)throw new Error("Cannot acknowledge a response without a requestId");var t=this.callbacks.get(e.requestId);if(!t)throw new Error("Callback not found for "+e);this.callbacks.delete(e.requestId),e.error?(console.error(JSON.stringify(e.error)),t.reject(e.error)):t.resolve(e.data)},e.prototype.receive=function(e,t){var r,n,i=this;if(e.purpose!==s.EnvelopeBusMessagePurpose.RESPONSE)if(e.purpose!==s.EnvelopeBusMessagePurpose.REQUEST)if(e.purpose!==s.EnvelopeBusMessagePurpose.NOTIFICATION)if(e.purpose!==s.EnvelopeBusMessagePurpose.SUBSCRIPTION)if(e.purpose!==s.EnvelopeBusMessagePurpose.UNSUBSCRIPTION);else{a=e.type;var u=this.remoteSubscriptions.indexOf(a);u>=0&&this.remoteSubscriptions.splice(u,1)}else{var a=e.type;this.remoteSubscriptions.indexOf(a)<0&&this.remoteSubscriptions.push(a)}else{null===(r=t[a=e.type])||void 0===r||r.apply(t,e.data),this.remoteSubscriptions.indexOf(a)>=0&&this.send({type:a,purpose:s.EnvelopeBusMessagePurpose.NOTIFICATION,data:e.data});var p=e.type;(null!==(n=this.localSubscriptions.get(p))&&void 0!==n?n:[]).forEach((function(t){t.apply(void 0,o(e.data))}))}else{var l=e,c=t[l.type].apply(t,l.data);if(!(c instanceof Promise))throw new Error("Cannot make a request to '"+l.type+"' because it does not return a Promise");c.then((function(e){return i.respond(l,e)})).catch((function(e){return i.respond(l,void 0,e)}))}else this.callback(e)},e.prototype.getNextRequestId=function(){return this.name+"_"+this.requestIdCounter++},e}();t.EnvelopeBusMessageManager=i},,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(7))},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=r(0),s=r(1),i=function(){function e(e,t,r,o){var i=this;void 0===o&&(o=new s.EnvelopeBusMessageManager((function(t){return e.postMessage(n(n({},t),{targetEnvelopeId:i.id}))}),"EnvelopeServer")),this.origin=t,this.pollInit=r,this.manager=o,this.id=this.generateRandomId()}return Object.defineProperty(e.prototype,"envelopeApi",{get:function(){return this.manager.clientApi},enumerable:!0,configurable:!0}),e.prototype.startInitPolling=function(){var t=this;this.initPolling=setInterval((function(){t.pollInit(t).then((function(){return t.stopInitPolling()}))}),e.INIT_POLLING_INTERVAL_IN_MS),this.initPollingTimeout=setTimeout((function(){t.stopInitPolling(),console.info("Init polling timed out. Looks like the Envelope is not responding accordingly.")}),e.INIT_POLLING_TIMEOUT_IN_MS)},e.prototype.stopInitPolling=function(){clearInterval(this.initPolling),this.initPolling=void 0,clearTimeout(this.initPollingTimeout),this.initPollingTimeout=void 0},e.prototype.receive=function(e,t){e.targetEnvelopeId||(e.targetEnvelopeServerId===this.id?this.manager.server.receive(e,t):e.purpose===o.EnvelopeBusMessagePurpose.NOTIFICATION&&this.manager.server.receive(e,{}))},e.prototype.generateRandomId=function(){return"_"+Math.random().toString(36).substr(2,9)+"_"+(new Date).getMilliseconds()},e.INIT_POLLING_TIMEOUT_IN_MS=1e4,e.INIT_POLLING_INTERVAL_IN_MS=100,e}();t.EnvelopeServer=i}]);
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/channel/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/api/index.ts":
+/*!**************************!*\
+  !*** ./src/api/index.ts ***!
+  \**************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+var EnvelopeBusMessagePurpose;
+(function (EnvelopeBusMessagePurpose) {
+    EnvelopeBusMessagePurpose["REQUEST"] = "request";
+    EnvelopeBusMessagePurpose["RESPONSE"] = "response";
+    EnvelopeBusMessagePurpose["SUBSCRIPTION"] = "subscription";
+    EnvelopeBusMessagePurpose["UNSUBSCRIPTION"] = "unsubscription";
+    EnvelopeBusMessagePurpose["NOTIFICATION"] = "notification";
+})(EnvelopeBusMessagePurpose = exports.EnvelopeBusMessagePurpose || (exports.EnvelopeBusMessagePurpose = {}));
+var EnvelopeBusMessageDirectSender;
+(function (EnvelopeBusMessageDirectSender) {
+    EnvelopeBusMessageDirectSender["ENVELOPE_BUS_CONTROLLER"] = "envelopeBusController";
+    EnvelopeBusMessageDirectSender["ENVELOPE_SERVER"] = "envelopeServer";
+})(EnvelopeBusMessageDirectSender = exports.EnvelopeBusMessageDirectSender || (exports.EnvelopeBusMessageDirectSender = {}));
+
+
+/***/ }),
+
+/***/ "./src/channel/EnvelopeServer.ts":
+/*!***************************************!*\
+  !*** ./src/channel/EnvelopeServer.ts ***!
+  \***************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var api_1 = __webpack_require__(/*! ../api */ "./src/api/index.ts");
+var common_1 = __webpack_require__(/*! ../common */ "./src/common/index.ts");
+var EnvelopeServerType;
+(function (EnvelopeServerType) {
+    EnvelopeServerType["LOCAL"] = "local";
+    EnvelopeServerType["REMOTE"] = "remote";
+})(EnvelopeServerType = exports.EnvelopeServerType || (exports.EnvelopeServerType = {}));
+var EnvelopeServer = /** @class */ (function () {
+    function EnvelopeServer(bus, origin, pollInit, type, manager) {
+        var _this = this;
+        if (type === void 0) { type = EnvelopeServerType.REMOTE; }
+        if (manager === void 0) { manager = new common_1.EnvelopeBusMessageManager(function (message) { return bus.postMessage(__assign(__assign({}, message), { targetEnvelopeId: type === EnvelopeServerType.LOCAL ? _this.id : undefined, directSender: api_1.EnvelopeBusMessageDirectSender.ENVELOPE_SERVER })); }, "EnvelopeServer"); }
+        this.origin = origin;
+        this.pollInit = pollInit;
+        this.type = type;
+        this.manager = manager;
+        this.id = this.generateRandomId();
+    }
+    Object.defineProperty(EnvelopeServer.prototype, "envelopeApi", {
+        get: function () {
+            return this.manager.clientApi;
+        },
+        enumerable: true,
+        configurable: true
+    });
+    EnvelopeServer.prototype.startInitPolling = function () {
+        var _this = this;
+        this.initPolling = setInterval(function () {
+            _this.pollInit(_this).then(function () { return _this.stopInitPolling(); });
+        }, EnvelopeServer.INIT_POLLING_INTERVAL_IN_MS);
+        this.initPollingTimeout = setTimeout(function () {
+            _this.stopInitPolling();
+            console.info("Init polling timed out. Looks like the Envelope is not responding accordingly.");
+        }, EnvelopeServer.INIT_POLLING_TIMEOUT_IN_MS);
+    };
+    EnvelopeServer.prototype.stopInitPolling = function () {
+        clearInterval(this.initPolling);
+        this.initPolling = undefined;
+        clearTimeout(this.initPollingTimeout);
+        this.initPollingTimeout = undefined;
+    };
+    EnvelopeServer.prototype.receive = function (message, api) {
+        if (message.directSender === api_1.EnvelopeBusMessageDirectSender.ENVELOPE_SERVER) {
+            // When a message came from another EnvelopeServer, it should be ignored
+            return;
+        }
+        if (message.targetEnvelopeId) {
+            // When the message has a targetEnvelopeId, it was directed to a specific envelope,
+            // thus the channel should ignore it.
+            return;
+        }
+        if (message.targetEnvelopeServerId === this.id) {
+            // Message was sent directly from the Envelope to this EnvelopeServer
+            this.manager.server.receive(message, api);
+        }
+        else if (message.purpose === api_1.EnvelopeBusMessagePurpose.NOTIFICATION) {
+            // Message was sent from any Envelope to some EnvelopeServer, so it should be forwarded to this Envelope
+            this.manager.server.receive(message, {});
+        }
+    };
+    EnvelopeServer.prototype.generateRandomId = function () {
+        var randomPart = Math.random()
+            .toString(36)
+            .substr(2, 9);
+        var milliseconds = new Date().getMilliseconds();
+        return "_" + randomPart + "_" + milliseconds;
+    };
+    EnvelopeServer.INIT_POLLING_TIMEOUT_IN_MS = 10000;
+    EnvelopeServer.INIT_POLLING_INTERVAL_IN_MS = 100;
+    return EnvelopeServer;
+}());
+exports.EnvelopeServer = EnvelopeServer;
+
+
+/***/ }),
+
+/***/ "./src/channel/index.ts":
+/*!******************************!*\
+  !*** ./src/channel/index.ts ***!
+  \******************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./EnvelopeServer */ "./src/channel/EnvelopeServer.ts"));
+
+
+/***/ }),
+
+/***/ "./src/common/EnvelopeBusMessageManager.ts":
+/*!*************************************************!*\
+  !*** ./src/common/EnvelopeBusMessageManager.ts ***!
+  \*************************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+var __spread = (this && this.__spread) || function () {
+    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
+    return ar;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var api_1 = __webpack_require__(/*! ../api */ "./src/api/index.ts");
+var EnvelopeBusMessageManager = /** @class */ (function () {
+    function EnvelopeBusMessageManager(send, name) {
+        var _this = this;
+        if (name === void 0) { name = "" + new Date().getMilliseconds(); }
+        this.send = send;
+        this.name = name;
+        this.callbacks = new Map();
+        this.remoteSubscriptions = [];
+        // tslint:disable-next-line:ban-types
+        this.localSubscriptions = new Map();
+        this.clientApi = (function () {
+            var requestsCache = new Map();
+            var notificationsCache = new Map();
+            var requests = new Proxy({}, {
+                set: function (target, name, value) {
+                    requestsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = requestsCache.get(method)) !== null && _a !== void 0 ? _a : requestsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.request.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var notifications = new Proxy({}, {
+                set: function (target, name, value) {
+                    notificationsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = notificationsCache.get(method)) !== null && _a !== void 0 ? _a : notificationsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.notify.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var clientApi = {
+                requests: requests,
+                notifications: notifications,
+                subscribe: function (m, a) { return _this.subscribe(m, a); },
+                unsubscribe: function (m, a) { return _this.unsubscribe(m, a); }
+            };
+            return clientApi;
+        })();
+        this.requestIdCounter = 0;
+    }
+    Object.defineProperty(EnvelopeBusMessageManager.prototype, "server", {
+        get: function () {
+            var _this = this;
+            return {
+                receive: function (m, apiImpl) { return _this.receive(m, apiImpl); }
+            };
+        },
+        enumerable: true,
+        configurable: true
+    });
+    EnvelopeBusMessageManager.prototype.subscribe = function (method, callback) {
+        var _a;
+        var activeSubscriptions = (_a = this.localSubscriptions.get(method)) !== null && _a !== void 0 ? _a : [];
+        this.localSubscriptions.set(method, __spread(activeSubscriptions, [callback]));
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION,
+            data: []
+        });
+        return callback;
+    };
+    EnvelopeBusMessageManager.prototype.unsubscribe = function (method, callback) {
+        var values = this.localSubscriptions.get(method);
+        if (!values) {
+            return;
+        }
+        var index = values.indexOf(callback);
+        if (index < 0) {
+            return;
+        }
+        values.splice(index, 1);
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,
+            data: []
+        });
+    };
+    EnvelopeBusMessageManager.prototype.request = function (method) {
+        var _this = this;
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        var requestId = this.getNextRequestId();
+        this.send({
+            requestId: requestId,
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.REQUEST
+        });
+        return new Promise(function (resolve, reject) {
+            _this.callbacks.set(requestId, { resolve: resolve, reject: reject });
+        });
+        //TODO: Setup timeout to avoid memory leaks
+    };
+    EnvelopeBusMessageManager.prototype.notify = function (method) {
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        this.send({
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION
+        });
+    };
+    EnvelopeBusMessageManager.prototype.respond = function (request, data, error) {
+        if (request.purpose !== api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            throw new Error("Cannot respond a message that is not a request");
+        }
+        if (!request.requestId) {
+            throw new Error("Cannot respond a request without a requestId");
+        }
+        this.send({
+            requestId: request.requestId,
+            purpose: api_1.EnvelopeBusMessagePurpose.RESPONSE,
+            type: request.type,
+            data: data,
+            error: error
+        });
+    };
+    EnvelopeBusMessageManager.prototype.callback = function (response) {
+        if (response.purpose !== api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            throw new Error("Cannot invoke callback with a message that is not a response");
+        }
+        if (!response.requestId) {
+            throw new Error("Cannot acknowledge a response without a requestId");
+        }
+        var callback = this.callbacks.get(response.requestId);
+        if (!callback) {
+            throw new Error("Callback not found for " + response);
+        }
+        this.callbacks.delete(response.requestId);
+        if (!response.error) {
+            callback.resolve(response.data);
+        }
+        else {
+            console.error(JSON.stringify(response.error));
+            callback.reject(response.error);
+        }
+    };
+    EnvelopeBusMessageManager.prototype.receive = function (
+    // We can receive messages from both the APIs we provide and consume.
+    message, apiImpl) {
+        var _this = this;
+        var _a, _b;
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            // We can only receive responses for the API we consume.
+            this.callback(message);
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            // We can only receive requests for the API we provide.
+            var request_1 = message;
+            var response = apiImpl[request_1.type].apply(apiImpl, request_1.data);
+            if (!(response instanceof Promise)) {
+                throw new Error("Cannot make a request to '" + request_1.type + "' because it does not return a Promise");
+            }
+            response.then(function (data) { return _this.respond(request_1, data); }).catch(function (err) { return _this.respond(request_1, undefined, err); });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.NOTIFICATION) {
+            // We can only receive notifications for methods of the API we provide.
+            var method = message.type;
+            (_a = apiImpl[method]) === null || _a === void 0 ? void 0 : _a.apply(apiImpl, message.data);
+            if (this.remoteSubscriptions.indexOf(method) >= 0) {
+                this.send({
+                    type: method,
+                    purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION,
+                    data: message.data
+                });
+            }
+            // We can only receive notifications from subscriptions of the API we consume.
+            var localSubscriptionMethod = message.type;
+            ((_b = this.localSubscriptions.get(localSubscriptionMethod)) !== null && _b !== void 0 ? _b : []).forEach(function (callback) {
+                callback.apply(void 0, __spread(message.data));
+            });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION) {
+            // We can only receive subscriptions for methods of the API we provide.
+            var method = message.type;
+            if (this.remoteSubscriptions.indexOf(method) < 0) {
+                this.remoteSubscriptions.push(method);
+            }
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION) {
+            // We can only receive unsubscriptions for methods of the API we provide.
+            var method = message.type;
+            var index = this.remoteSubscriptions.indexOf(method);
+            if (index >= 0) {
+                this.remoteSubscriptions.splice(index, 1);
+            }
+            return;
+        }
+    };
+    EnvelopeBusMessageManager.prototype.getNextRequestId = function () {
+        return this.name + "_" + this.requestIdCounter++;
+    };
+    return EnvelopeBusMessageManager;
+}());
+exports.EnvelopeBusMessageManager = EnvelopeBusMessageManager;
+
+
+/***/ }),
+
+/***/ "./src/common/index.ts":
+/*!*****************************!*\
+  !*** ./src/common/index.ts ***!
+  \*****************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./EnvelopeBusMessageManager */ "./src/common/EnvelopeBusMessageManager.ts"));
+
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2hhbm5lbC9FbnZlbG9wZVNlcnZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2hhbm5lbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL0VudmVsb3BlQnVzTWVzc2FnZU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7Ozs7QUNsRkE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBZ0VILElBQVkseUJBTVg7QUFORCxXQUFZLHlCQUF5QjtJQUNuQyxnREFBbUI7SUFDbkIsa0RBQXFCO0lBQ3JCLDBEQUE2QjtJQUM3Qiw4REFBaUM7SUFDakMsMERBQTZCO0FB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QyxrQkFBUTtnQkFDM0UsUUFBUSx3QkFBSyxPQUFPLENBQUMsSUFBYyxHQUFFO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1lBRUgsT0FBTztTQUNSO1FBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLCtCQUF5QixDQUFDLFlBQVksRUFBRTtZQUM5RCx1RUFBdUU7WUFDdkUsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQStDLENBQUM7WUFDdkUsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN2QztZQUNELE9BQU87U0FDUjtRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSywrQkFBeUIsQ0FBQyxjQUFjLEVBQUU7WUFDaEUseUVBQXlFO1lBQ3pFLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUErQyxDQUFDO1lBQ3ZFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkQsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsT0FBTztTQUNSO0lBQ0gsQ0FBQztJQUVNLG9EQUFnQixHQUF2QjtRQUNFLE9BQVUsSUFBSSxDQUFDLElBQUksU0FBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUksQ0FBQztJQUNuRCxDQUFDO0lBQ0gsZ0NBQUM7QUFBRCxDQUFDO0FBNVBZLDhEQUF5Qjs7Ozs7Ozs7Ozs7Ozs7QUMvQnRDOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7OztBQUVILDhHQUE0QyIsImZpbGUiOiJjaGFubmVsL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvY2hhbm5lbC9pbmRleC50c1wiKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uQ2FsbGJhY2s8XG4gIEFwaVRvQ29uc3VtZSBleHRlbmRzIEFwaURlZmluaXRpb248QXBpVG9Db25zdW1lPixcbiAgTSBleHRlbmRzIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPlxuPiA9ICguLi5hcmdzOiBBcmdzVHlwZTxBcGlUb0NvbnN1bWVbTV0+KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPFQgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPFQ+PiA9IHtcbiAgW0sgaW4ga2V5b2YgVF06IFJldHVyblR5cGU8VFtLXT4gZXh0ZW5kcyB2b2lkID8gSyA6IG5ldmVyO1xufVtrZXlvZiBUXTtcblxuZXhwb3J0IHR5cGUgUmVxdWVzdFByb3BlcnR5TmFtZXM8VCBleHRlbmRzIEFwaURlZmluaXRpb248VD4+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogUmV0dXJuVHlwZTxUW0tdPiBleHRlbmRzIFByb21pc2U8YW55PiA/IEsgOiBuZXZlcjtcbn1ba2V5b2YgVF07XG5cbmV4cG9ydCB0eXBlIEZ1bmN0aW9uUHJvcGVydHlOYW1lczxUIGV4dGVuZHMgQXBpRGVmaW5pdGlvbjxUPj4gPSBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPFQ+IHwgUmVxdWVzdFByb3BlcnR5TmFtZXM8VD47XG5cbmV4cG9ydCB0eXBlIEFwaURlZmluaXRpb248VD4gPSB7IFtQIGluIGtleW9mIFRdOiAoLi4uYTogYW55KSA9PiBQcm9taXNlPGFueT4gfCB2b2lkIH07XG5leHBvcnQgdHlwZSBBcmdzVHlwZTxUPiA9IFQgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQSkgPT4gYW55ID8gQSA6IG5ldmVyO1xuXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25DYWxsYmFjazxBcGkgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPEFwaT4sIE0gZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaT4+ID0gKFxuICAuLi5hcmdzOiBBcmdzVHlwZTxBcGlbTV0+XG4pID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEFwaVJlcXVlc3RzPFQgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPFQ+PiA9IFBpY2s8VCwgUmVxdWVzdFByb3BlcnR5TmFtZXM8VD4+O1xuXG5leHBvcnQgdHlwZSBBcGlOb3RpZmljYXRpb25zPFQgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPFQ+PiA9IFBpY2s8VCwgTm90aWZpY2F0aW9uUHJvcGVydHlOYW1lczxUPj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUJ1c0NsaWVudEFwaTxBcGkgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPEFwaT4+IHtcbiAgcmVxdWVzdHM6IEFwaVJlcXVlc3RzPEFwaT47XG4gIG5vdGlmaWNhdGlvbnM6IEFwaU5vdGlmaWNhdGlvbnM8QXBpPjtcblxuICBzdWJzY3JpYmU8TWV0aG9kIGV4dGVuZHMgTm90aWZpY2F0aW9uUHJvcGVydHlOYW1lczxBcGk+PihcbiAgICBtZXRob2Q6IE1ldGhvZCxcbiAgICBjYWxsYmFjazogU3Vic2NyaXB0aW9uQ2FsbGJhY2s8QXBpLCBNZXRob2Q+XG4gICk6IFN1YnNjcmlwdGlvbkNhbGxiYWNrPEFwaSwgTWV0aG9kPjtcblxuICB1bnN1YnNjcmliZTxNZXRob2QgZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaT4+KFxuICAgIG1ldGhvZDogTWV0aG9kLFxuICAgIGNhbGxiYWNrOiBTdWJzY3JpcHRpb25DYWxsYmFjazxBcGksIE1ldGhvZD5cbiAgKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQnVzU2VydmVyPFxuICBBcGlUb1Byb3ZpZGUgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPEFwaVRvUHJvdmlkZT4sXG4gIEFwaVRvQ29uc3VtZSBleHRlbmRzIEFwaURlZmluaXRpb248QXBpVG9Db25zdW1lPlxuPiB7XG4gIHJlY2VpdmUoXG4gICAgbWVzc2FnZTogRW52ZWxvcGVCdXNNZXNzYWdlPHVua25vd24sIEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcGlUb1Byb3ZpZGU+IHwgRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4+LFxuICAgIGFwaUltcGw6IEFwaVRvUHJvdmlkZVxuICApOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudmVsb3BlQnVzTWVzc2FnZTxELCBUPiB7XG4gIGRhdGE6IEQ7XG4gIHR5cGU6IFQ7XG4gIHRhcmdldEVudmVsb3BlU2VydmVySWQ/OiBzdHJpbmc7IC8vIFVzZWQgZm9yIG1lc3NhZ2VzIGdvaW5nIGZyb20gdGhlIEVudmVsb3BlIHRvIHRoZSBFbnZlbG9wZVNlcnZlclxuICByZXF1ZXN0SWQ/OiBzdHJpbmc7IC8vIFVzZWQgd2hlbiBwdXJwb3NlIGlzIFJFUVVFU1Qgb3IgUkVTUE9OU0VcbiAgcHVycG9zZTogRW52ZWxvcGVCdXNNZXNzYWdlUHVycG9zZTtcbiAgZXJyb3I/OiBhbnk7IC8vIFVzZWQgb24gUkVTUE9OU0VTIHdoZW4gYW4gZXhjZXB0aW9uIGhhcHBlbnMgd2hlbiBwcm9jZXNzaW5nIGEgcmVxdWVzdFxuICB0YXJnZXRFbnZlbG9wZUlkPzogc3RyaW5nOyAvLyBVc2VkIGZvciBtZXNzYWdlcyBnb2luZyBmcm9tIHRoZSBFbnZlbG9wZVNlcnZlciB0byB0aGUgRW52ZWxvcGVcbiAgZGlyZWN0U2VuZGVyPzogRW52ZWxvcGVCdXNNZXNzYWdlRGlyZWN0U2VuZGVyO1xufVxuXG5leHBvcnQgZW51bSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlIHtcbiAgUkVRVUVTVCA9IFwicmVxdWVzdFwiLFxuICBSRVNQT05TRSA9IFwicmVzcG9uc2VcIixcbiAgU1VCU0NSSVBUSU9OID0gXCJzdWJzY3JpcHRpb25cIixcbiAgVU5TVUJTQ1JJUFRJT04gPSBcInVuc3Vic2NyaXB0aW9uXCIsXG4gIE5PVElGSUNBVElPTiA9IFwibm90aWZpY2F0aW9uXCJcbn1cblxuZXhwb3J0IGVudW0gRW52ZWxvcGVCdXNNZXNzYWdlRGlyZWN0U2VuZGVyIHtcbiAgRU5WRUxPUEVfQlVTX0NPTlRST0xMRVIgPSBcImVudmVsb3BlQnVzQ29udHJvbGxlclwiLFxuICBFTlZFTE9QRV9TRVJWRVIgPSBcImVudmVsb3BlU2VydmVyXCJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnZlbG9wZUJ1cyB7XG4gIHBvc3RNZXNzYWdlPEQsIFQ+KG1lc3NhZ2U6IEVudmVsb3BlQnVzTWVzc2FnZTxELCBUPiwgdGFyZ2V0T3JpZ2luPzogc3RyaW5nLCBfPzogYW55KTogdm9pZDtcbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQXBpRGVmaW5pdGlvbixcbiAgRW52ZWxvcGVCdXMsXG4gIEVudmVsb3BlQnVzTWVzc2FnZSxcbiAgRW52ZWxvcGVCdXNNZXNzYWdlRGlyZWN0U2VuZGVyLFxuICBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLFxuICBGdW5jdGlvblByb3BlcnR5TmFtZXNcbn0gZnJvbSBcIi4uL2FwaVwiO1xuaW1wb3J0IHsgRW52ZWxvcGVCdXNNZXNzYWdlTWFuYWdlciB9IGZyb20gXCIuLi9jb21tb25cIjtcblxuZXhwb3J0IGVudW0gRW52ZWxvcGVTZXJ2ZXJUeXBlIHtcbiAgTE9DQUwgPSBcImxvY2FsXCIsXG4gIFJFTU9URSA9IFwicmVtb3RlXCJcbn1cblxuZXhwb3J0IGNsYXNzIEVudmVsb3BlU2VydmVyPFxuICBBcGlUb1Byb3ZpZGUgZXh0ZW5kcyBBcGlEZWZpbml0aW9uPEFwaVRvUHJvdmlkZT4sXG4gIEFwaVRvQ29uc3VtZSBleHRlbmRzIEFwaURlZmluaXRpb248QXBpVG9Db25zdW1lPlxuPiB7XG4gIHB1YmxpYyBzdGF0aWMgSU5JVF9QT0xMSU5HX1RJTUVPVVRfSU5fTVMgPSAxMDAwMDtcbiAgcHVibGljIHN0YXRpYyBJTklUX1BPTExJTkdfSU5URVJWQUxfSU5fTVMgPSAxMDA7XG5cbiAgcHVibGljIGluaXRQb2xsaW5nPzogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0SW50ZXJ2YWw+O1xuICBwdWJsaWMgaW5pdFBvbGxpbmdUaW1lb3V0PzogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XG5cbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgcHVibGljIGdldCBlbnZlbG9wZUFwaSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmNsaWVudEFwaTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGJ1czogRW52ZWxvcGVCdXMsXG4gICAgcHVibGljIHJlYWRvbmx5IG9yaWdpbjogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBwb2xsSW5pdDogKHNlbGY6IEVudmVsb3BlU2VydmVyPEFwaVRvUHJvdmlkZSwgQXBpVG9Db25zdW1lPikgPT4gUHJvbWlzZTxhbnk+LFxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBFbnZlbG9wZVNlcnZlclR5cGUgPSBFbnZlbG9wZVNlcnZlclR5cGUuUkVNT1RFLFxuICAgIHB1YmxpYyByZWFkb25seSBtYW5hZ2VyID0gbmV3IEVudmVsb3BlQnVzTWVzc2FnZU1hbmFnZXI8QXBpVG9Qcm92aWRlLCBBcGlUb0NvbnN1bWU+KFxuICAgICAgbWVzc2FnZSA9PiBidXMucG9zdE1lc3NhZ2UoeyAuLi5tZXNzYWdlLCB0YXJnZXRFbnZlbG9wZUlkOiB0eXBlID09PSBFbnZlbG9wZVNlcnZlclR5cGUuTE9DQUwgPyB0aGlzLmlkIDogdW5kZWZpbmVkLCBkaXJlY3RTZW5kZXI6IEVudmVsb3BlQnVzTWVzc2FnZURpcmVjdFNlbmRlci5FTlZFTE9QRV9TRVJWRVIgfSksXG4gICAgICBcIkVudmVsb3BlU2VydmVyXCJcbiAgICApXG4gICkge1xuICAgIHRoaXMuaWQgPSB0aGlzLmdlbmVyYXRlUmFuZG9tSWQoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydEluaXRQb2xsaW5nKCkge1xuICAgIHRoaXMuaW5pdFBvbGxpbmcgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnBvbGxJbml0KHRoaXMpLnRoZW4oKCkgPT4gdGhpcy5zdG9wSW5pdFBvbGxpbmcoKSk7XG4gICAgfSwgRW52ZWxvcGVTZXJ2ZXIuSU5JVF9QT0xMSU5HX0lOVEVSVkFMX0lOX01TKTtcblxuICAgIHRoaXMuaW5pdFBvbGxpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnN0b3BJbml0UG9sbGluZygpO1xuICAgICAgY29uc29sZS5pbmZvKFwiSW5pdCBwb2xsaW5nIHRpbWVkIG91dC4gTG9va3MgbGlrZSB0aGUgRW52ZWxvcGUgaXMgbm90IHJlc3BvbmRpbmcgYWNjb3JkaW5nbHkuXCIpO1xuICAgIH0sIEVudmVsb3BlU2VydmVyLklOSVRfUE9MTElOR19USU1FT1VUX0lOX01TKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wSW5pdFBvbGxpbmcoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmluaXRQb2xsaW5nISk7XG4gICAgdGhpcy5pbml0UG9sbGluZyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5pbml0UG9sbGluZ1RpbWVvdXQhKTtcbiAgICB0aGlzLmluaXRQb2xsaW5nVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyByZWNlaXZlKFxuICAgIG1lc3NhZ2U6IEVudmVsb3BlQnVzTWVzc2FnZTx1bmtub3duLCBGdW5jdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Qcm92aWRlPiB8IEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcGlUb0NvbnN1bWU+PixcbiAgICBhcGk6IEFwaVRvUHJvdmlkZVxuICApIHtcbiAgICBpZiAobWVzc2FnZS5kaXJlY3RTZW5kZXIgPT09IEVudmVsb3BlQnVzTWVzc2FnZURpcmVjdFNlbmRlci5FTlZFTE9QRV9TRVJWRVIpIHtcbiAgICAgIC8vIFdoZW4gYSBtZXNzYWdlIGNhbWUgZnJvbSBhbm90aGVyIEVudmVsb3BlU2VydmVyLCBpdCBzaG91bGQgYmUgaWdub3JlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLnRhcmdldEVudmVsb3BlSWQpIHtcbiAgICAgIC8vIFdoZW4gdGhlIG1lc3NhZ2UgaGFzIGEgdGFyZ2V0RW52ZWxvcGVJZCwgaXQgd2FzIGRpcmVjdGVkIHRvIGEgc3BlY2lmaWMgZW52ZWxvcGUsXG4gICAgICAvLyB0aHVzIHRoZSBjaGFubmVsIHNob3VsZCBpZ25vcmUgaXQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UudGFyZ2V0RW52ZWxvcGVTZXJ2ZXJJZCA9PT0gdGhpcy5pZCkge1xuICAgICAgLy8gTWVzc2FnZSB3YXMgc2VudCBkaXJlY3RseSBmcm9tIHRoZSBFbnZlbG9wZSB0byB0aGlzIEVudmVsb3BlU2VydmVyXG4gICAgICB0aGlzLm1hbmFnZXIuc2VydmVyLnJlY2VpdmUobWVzc2FnZSwgYXBpKTtcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UucHVycG9zZSA9PT0gRW52ZWxvcGVCdXNNZXNzYWdlUHVycG9zZS5OT1RJRklDQVRJT04pIHtcbiAgICAgIC8vIE1lc3NhZ2Ugd2FzIHNlbnQgZnJvbSBhbnkgRW52ZWxvcGUgdG8gc29tZSBFbnZlbG9wZVNlcnZlciwgc28gaXQgc2hvdWxkIGJlIGZvcndhcmRlZCB0byB0aGlzIEVudmVsb3BlXG4gICAgICB0aGlzLm1hbmFnZXIuc2VydmVyLnJlY2VpdmUobWVzc2FnZSwge30gYXMgYW55KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2VuZXJhdGVSYW5kb21JZCgpIHtcbiAgICBjb25zdCByYW5kb21QYXJ0ID0gTWF0aC5yYW5kb20oKVxuICAgICAgLnRvU3RyaW5nKDM2KVxuICAgICAgLnN1YnN0cigyLCA5KTtcblxuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IG5ldyBEYXRlKCkuZ2V0TWlsbGlzZWNvbmRzKCk7XG5cbiAgICByZXR1cm4gYF8ke3JhbmRvbVBhcnR9XyR7bWlsbGlzZWNvbmRzfWA7XG4gIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0ICogZnJvbSBcIi4vRW52ZWxvcGVTZXJ2ZXJcIiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQXBpRGVmaW5pdGlvbixcbiAgQXBpTm90aWZpY2F0aW9ucyxcbiAgQXBpUmVxdWVzdHMsXG4gIEFyZ3NUeXBlLFxuICBFbnZlbG9wZUJ1c01lc3NhZ2UsXG4gIEVudmVsb3BlQnVzTWVzc2FnZVB1cnBvc2UsXG4gIEZ1bmN0aW9uUHJvcGVydHlOYW1lcyxcbiAgTWVzc2FnZUJ1c0NsaWVudEFwaSxcbiAgTWVzc2FnZUJ1c1NlcnZlcixcbiAgTm90aWZpY2F0aW9uQ2FsbGJhY2ssXG4gIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXMsXG4gIFJlcXVlc3RQcm9wZXJ0eU5hbWVzXG59IGZyb20gXCIuLi9hcGlcIjtcblxuZXhwb3J0IGNsYXNzIEVudmVsb3BlQnVzTWVzc2FnZU1hbmFnZXI8XG4gIEFwaVRvUHJvdmlkZSBleHRlbmRzIEFwaURlZmluaXRpb248QXBpVG9Qcm92aWRlPixcbiAgQXBpVG9Db25zdW1lIGV4dGVuZHMgQXBpRGVmaW5pdGlvbjxBcGlUb0NvbnN1bWU+XG4+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja3MgPSBuZXcgTWFwPHN0cmluZywgeyByZXNvbHZlOiAoYXJnOiB1bmtub3duKSA9PiB2b2lkOyByZWplY3Q6IChhcmc6IHVua25vd24pID0+IHZvaWQgfT4oKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IHJlbW90ZVN1YnNjcmlwdGlvbnM6IEFycmF5PE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Qcm92aWRlPj4gPSBbXTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxTdWJzY3JpcHRpb25zID0gbmV3IE1hcDxOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4sIEZ1bmN0aW9uW10+KCk7XG5cbiAgcHJpdmF0ZSByZXF1ZXN0SWRDb3VudGVyOiBudW1iZXI7XG5cbiAgcHVibGljIGNsaWVudEFwaTogTWVzc2FnZUJ1c0NsaWVudEFwaTxBcGlUb0NvbnN1bWU+ID0gKCgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0c0NhY2hlID0gbmV3IE1hcDxcbiAgICAgIFJlcXVlc3RQcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4sXG4gICAgICAoLi4uYXJnczogQXJnc1R5cGU8QXBpVG9Db25zdW1lW2tleW9mIEFwaVRvQ29uc3VtZV0+KSA9PiBQcm9taXNlPGFueT5cbiAgICA+KCk7XG5cbiAgICBjb25zdCBub3RpZmljYXRpb25zQ2FjaGUgPSBuZXcgTWFwPFxuICAgICAgTm90aWZpY2F0aW9uUHJvcGVydHlOYW1lczxBcGlUb0NvbnN1bWU+LFxuICAgICAgKC4uLmFyZ3M6IEFyZ3NUeXBlPEFwaVRvQ29uc3VtZVtrZXlvZiBBcGlUb0NvbnN1bWVdPikgPT4gdm9pZFxuICAgID4oKTtcblxuICAgIGNvbnN0IHJlcXVlc3RzOiBBcGlSZXF1ZXN0czxBcGlUb0NvbnN1bWU+ID0gbmV3IFByb3h5PEFwaVJlcXVlc3RzPEFwaVRvQ29uc3VtZT4+KHt9IGFzIEFwaVJlcXVlc3RzPEFwaVRvQ29uc3VtZT4sIHtcbiAgICAgIHNldDogKHRhcmdldCwgbmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgcmVxdWVzdHNDYWNoZS5zZXQobmFtZSBhcyBSZXF1ZXN0UHJvcGVydHlOYW1lczxBcGlUb0NvbnN1bWU+LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGdldDogKHRhcmdldCwgbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBuYW1lIGFzIFJlcXVlc3RQcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT47XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcmVxdWVzdHNDYWNoZS5nZXQobWV0aG9kKSA/P1xuICAgICAgICAgIHJlcXVlc3RzQ2FjaGUuc2V0KG1ldGhvZCwgKC4uLmFyZ3MpID0+IHRoaXMucmVxdWVzdChtZXRob2QsIC4uLmFyZ3MpIGFzIFByb21pc2U8YW55PikuZ2V0KG1ldGhvZClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBuZXcgUHJveHk8QXBpTm90aWZpY2F0aW9uczxBcGlUb0NvbnN1bWU+Pih7fSBhcyBBcGlOb3RpZmljYXRpb25zPEFwaVRvQ29uc3VtZT4sIHtcbiAgICAgIHNldDogKHRhcmdldCwgbmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgbm90aWZpY2F0aW9uc0NhY2hlLnNldChuYW1lIGFzIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPiwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBnZXQ6ICh0YXJnZXQsIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gbmFtZSBhcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT47XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgbm90aWZpY2F0aW9uc0NhY2hlLmdldChtZXRob2QpID8/XG4gICAgICAgICAgbm90aWZpY2F0aW9uc0NhY2hlLnNldChtZXRob2QsICguLi5hcmdzKSA9PiB0aGlzLm5vdGlmeShtZXRob2QsIC4uLmFyZ3MpKS5nZXQobWV0aG9kKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgY2xpZW50QXBpOiBNZXNzYWdlQnVzQ2xpZW50QXBpPEFwaVRvQ29uc3VtZT4gPSB7XG4gICAgICByZXF1ZXN0cyxcbiAgICAgIG5vdGlmaWNhdGlvbnMsXG4gICAgICBzdWJzY3JpYmU6IChtLCBhKSA9PiB0aGlzLnN1YnNjcmliZShtLCBhKSxcbiAgICAgIHVuc3Vic2NyaWJlOiAobSwgYSkgPT4gdGhpcy51bnN1YnNjcmliZShtLCBhKVxuICAgIH07XG5cbiAgICByZXR1cm4gY2xpZW50QXBpO1xuICB9KSgpO1xuXG4gIHB1YmxpYyBnZXQgc2VydmVyKCk6IE1lc3NhZ2VCdXNTZXJ2ZXI8QXBpVG9Qcm92aWRlLCBBcGlUb0NvbnN1bWU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVjZWl2ZTogKG0sIGFwaUltcGwpID0+IHRoaXMucmVjZWl2ZShtLCBhcGlJbXBsKVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlbmQ6IChcbiAgICAgIC8vIFdlIGNhbiBzZW5kIG1lc3NhZ2VzIGZvciBib3RoIHRoZSBBUElzIHdlIHByb3ZpZGUgYW5kIGNvbnN1bWVcbiAgICAgIG1lc3NhZ2U6IEVudmVsb3BlQnVzTWVzc2FnZTx1bmtub3duLCBGdW5jdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPiB8IEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcGlUb1Byb3ZpZGU+PlxuICAgICkgPT4gdm9pZCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IGAke25ldyBEYXRlKCkuZ2V0TWlsbGlzZWNvbmRzKCl9YFxuICApIHtcbiAgICB0aGlzLnJlcXVlc3RJZENvdW50ZXIgPSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmU8TSBleHRlbmRzIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPj4oXG4gICAgbWV0aG9kOiBNLFxuICAgIGNhbGxiYWNrOiAoLi4uYXJnczogQXJnc1R5cGU8QXBpVG9Db25zdW1lW01dPikgPT4gdm9pZFxuICApIHtcbiAgICBjb25zdCBhY3RpdmVTdWJzY3JpcHRpb25zID0gdGhpcy5sb2NhbFN1YnNjcmlwdGlvbnMuZ2V0KG1ldGhvZCkgPz8gW107XG4gICAgdGhpcy5sb2NhbFN1YnNjcmlwdGlvbnMuc2V0KG1ldGhvZCwgWy4uLmFjdGl2ZVN1YnNjcmlwdGlvbnMsIGNhbGxiYWNrXSk7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgIHB1cnBvc2U6IEVudmVsb3BlQnVzTWVzc2FnZVB1cnBvc2UuU1VCU0NSSVBUSU9OLFxuICAgICAgZGF0YTogW11cbiAgICB9KTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH1cblxuICBwcml2YXRlIHVuc3Vic2NyaWJlPE0gZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4+KFxuICAgIG1ldGhvZDogTSxcbiAgICBjYWxsYmFjazogTm90aWZpY2F0aW9uQ2FsbGJhY2s8QXBpVG9Db25zdW1lLCBNPlxuICApIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmxvY2FsU3Vic2NyaXB0aW9ucy5nZXQobWV0aG9kKTtcbiAgICBpZiAoIXZhbHVlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdmFsdWVzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgcHVycG9zZTogRW52ZWxvcGVCdXNNZXNzYWdlUHVycG9zZS5VTlNVQlNDUklQVElPTixcbiAgICAgIGRhdGE6IFtdXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlcXVlc3Q8TSBleHRlbmRzIFJlcXVlc3RQcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4+KG1ldGhvZDogTSwgLi4uYXJnczogQXJnc1R5cGU8QXBpVG9Db25zdW1lW01dPikge1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMuZ2V0TmV4dFJlcXVlc3RJZCgpO1xuXG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgZGF0YTogYXJncyxcbiAgICAgIHB1cnBvc2U6IEVudmVsb3BlQnVzTWVzc2FnZVB1cnBvc2UuUkVRVUVTVFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jYWxsYmFja3Muc2V0KHJlcXVlc3RJZCwgeyByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgfSkgYXMgUmV0dXJuVHlwZTxBcGlUb0NvbnN1bWVbTV0+O1xuXG4gICAgLy9UT0RPOiBTZXR1cCB0aW1lb3V0IHRvIGF2b2lkIG1lbW9yeSBsZWFrc1xuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnk8TSBleHRlbmRzIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPj4obWV0aG9kOiBNLCAuLi5hcmdzOiBBcmdzVHlwZTxBcGlUb0NvbnN1bWVbTV0+KSB7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICBwdXJwb3NlOiBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLk5PVElGSUNBVElPTlxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNwb25kPFQ+KFxuICAgIHJlcXVlc3Q6IEVudmVsb3BlQnVzTWVzc2FnZTx1bmtub3duLCBGdW5jdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Qcm92aWRlPj4sXG4gICAgZGF0YTogVCxcbiAgICBlcnJvcj86IGFueVxuICApOiB2b2lkIHtcbiAgICBpZiAocmVxdWVzdC5wdXJwb3NlICE9PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlJFUVVFU1QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXNwb25kIGEgbWVzc2FnZSB0aGF0IGlzIG5vdCBhIHJlcXVlc3RcIik7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0LnJlcXVlc3RJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlc3BvbmQgYSByZXF1ZXN0IHdpdGhvdXQgYSByZXF1ZXN0SWRcIik7XG4gICAgfVxuXG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHJlcXVlc3RJZDogcmVxdWVzdC5yZXF1ZXN0SWQsXG4gICAgICBwdXJwb3NlOiBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlJFU1BPTlNFLFxuICAgICAgdHlwZTogcmVxdWVzdC50eXBlIGFzIEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcGlUb1Byb3ZpZGU+LFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxsYmFjayhyZXNwb25zZTogRW52ZWxvcGVCdXNNZXNzYWdlPHVua25vd24sIEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcGlUb0NvbnN1bWU+Pikge1xuICAgIGlmIChyZXNwb25zZS5wdXJwb3NlICE9PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlJFU1BPTlNFKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW52b2tlIGNhbGxiYWNrIHdpdGggYSBtZXNzYWdlIHRoYXQgaXMgbm90IGEgcmVzcG9uc2VcIik7XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2UucmVxdWVzdElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWNrbm93bGVkZ2UgYSByZXNwb25zZSB3aXRob3V0IGEgcmVxdWVzdElkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja3MuZ2V0KHJlc3BvbnNlLnJlcXVlc3RJZCk7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGJhY2sgbm90IGZvdW5kIGZvciBcIiArIHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrcy5kZWxldGUocmVzcG9uc2UucmVxdWVzdElkKTtcblxuICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZXJyb3IpKTtcbiAgICAgIGNhbGxiYWNrLnJlamVjdChyZXNwb25zZS5lcnJvcik7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgcmVjZWl2ZShcbiAgICAvLyBXZSBjYW4gcmVjZWl2ZSBtZXNzYWdlcyBmcm9tIGJvdGggdGhlIEFQSXMgd2UgcHJvdmlkZSBhbmQgY29uc3VtZS5cbiAgICBtZXNzYWdlOiBFbnZlbG9wZUJ1c01lc3NhZ2U8dW5rbm93biwgRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4gfCBGdW5jdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Qcm92aWRlPj4sXG4gICAgYXBpSW1wbDogQXBpVG9Qcm92aWRlXG4gICkge1xuICAgIGlmIChtZXNzYWdlLnB1cnBvc2UgPT09IEVudmVsb3BlQnVzTWVzc2FnZVB1cnBvc2UuUkVTUE9OU0UpIHtcbiAgICAgIC8vIFdlIGNhbiBvbmx5IHJlY2VpdmUgcmVzcG9uc2VzIGZvciB0aGUgQVBJIHdlIGNvbnN1bWUuXG4gICAgICB0aGlzLmNhbGxiYWNrKG1lc3NhZ2UgYXMgRW52ZWxvcGVCdXNNZXNzYWdlPHVua25vd24sIFJlcXVlc3RQcm9wZXJ0eU5hbWVzPEFwaVRvQ29uc3VtZT4+KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5wdXJwb3NlID09PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlJFUVVFU1QpIHtcbiAgICAgIC8vIFdlIGNhbiBvbmx5IHJlY2VpdmUgcmVxdWVzdHMgZm9yIHRoZSBBUEkgd2UgcHJvdmlkZS5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBtZXNzYWdlIGFzIEVudmVsb3BlQnVzTWVzc2FnZTx1bmtub3duLCBSZXF1ZXN0UHJvcGVydHlOYW1lczxBcGlUb1Byb3ZpZGU+PjtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhcGlJbXBsW3JlcXVlc3QudHlwZV0uYXBwbHkoYXBpSW1wbCwgcmVxdWVzdC5kYXRhKTtcbiAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgbWFrZSBhIHJlcXVlc3QgdG8gJyR7cmVxdWVzdC50eXBlfScgYmVjYXVzZSBpdCBkb2VzIG5vdCByZXR1cm4gYSBQcm9taXNlYCk7XG4gICAgICB9XG5cbiAgICAgIHJlc3BvbnNlLnRoZW4oZGF0YSA9PiB0aGlzLnJlc3BvbmQocmVxdWVzdCwgZGF0YSkpLmNhdGNoKGVyciA9PiB0aGlzLnJlc3BvbmQocmVxdWVzdCwgdW5kZWZpbmVkLCBlcnIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5wdXJwb3NlID09PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLk5PVElGSUNBVElPTikge1xuICAgICAgLy8gV2UgY2FuIG9ubHkgcmVjZWl2ZSBub3RpZmljYXRpb25zIGZvciBtZXRob2RzIG9mIHRoZSBBUEkgd2UgcHJvdmlkZS5cbiAgICAgIGNvbnN0IG1ldGhvZCA9IG1lc3NhZ2UudHlwZSBhcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvUHJvdmlkZT47XG4gICAgICBhcGlJbXBsW21ldGhvZF0/LmFwcGx5KGFwaUltcGwsIG1lc3NhZ2UuZGF0YSk7XG5cbiAgICAgIGlmICh0aGlzLnJlbW90ZVN1YnNjcmlwdGlvbnMuaW5kZXhPZihtZXRob2QpID49IDApIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBtZXRob2QsXG4gICAgICAgICAgcHVycG9zZTogRW52ZWxvcGVCdXNNZXNzYWdlUHVycG9zZS5OT1RJRklDQVRJT04sXG4gICAgICAgICAgZGF0YTogbWVzc2FnZS5kYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjYW4gb25seSByZWNlaXZlIG5vdGlmaWNhdGlvbnMgZnJvbSBzdWJzY3JpcHRpb25zIG9mIHRoZSBBUEkgd2UgY29uc3VtZS5cbiAgICAgIGNvbnN0IGxvY2FsU3Vic2NyaXB0aW9uTWV0aG9kID0gbWVzc2FnZS50eXBlIGFzIE5vdGlmaWNhdGlvblByb3BlcnR5TmFtZXM8QXBpVG9Db25zdW1lPjtcbiAgICAgICh0aGlzLmxvY2FsU3Vic2NyaXB0aW9ucy5nZXQobG9jYWxTdWJzY3JpcHRpb25NZXRob2QpID8/IFtdKS5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgY2FsbGJhY2soLi4uKG1lc3NhZ2UuZGF0YSBhcyBhbnlbXSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5wdXJwb3NlID09PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlNVQlNDUklQVElPTikge1xuICAgICAgLy8gV2UgY2FuIG9ubHkgcmVjZWl2ZSBzdWJzY3JpcHRpb25zIGZvciBtZXRob2RzIG9mIHRoZSBBUEkgd2UgcHJvdmlkZS5cbiAgICAgIGNvbnN0IG1ldGhvZCA9IG1lc3NhZ2UudHlwZSBhcyBOb3RpZmljYXRpb25Qcm9wZXJ0eU5hbWVzPEFwaVRvUHJvdmlkZT47XG4gICAgICBpZiAodGhpcy5yZW1vdGVTdWJzY3JpcHRpb25zLmluZGV4T2YobWV0aG9kKSA8IDApIHtcbiAgICAgICAgdGhpcy5yZW1vdGVTdWJzY3JpcHRpb25zLnB1c2gobWV0aG9kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5wdXJwb3NlID09PSBFbnZlbG9wZUJ1c01lc3NhZ2VQdXJwb3NlLlVOU1VCU0NSSVBUSU9OKSB7XG4gICAgICAvLyBXZSBjYW4gb25seSByZWNlaXZlIHVuc3Vic2NyaXB0aW9ucyBmb3IgbWV0aG9kcyBvZiB0aGUgQVBJIHdlIHByb3ZpZGUuXG4gICAgICBjb25zdCBtZXRob2QgPSBtZXNzYWdlLnR5cGUgYXMgTm90aWZpY2F0aW9uUHJvcGVydHlOYW1lczxBcGlUb1Byb3ZpZGU+O1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnJlbW90ZVN1YnNjcmlwdGlvbnMuaW5kZXhPZihtZXRob2QpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5yZW1vdGVTdWJzY3JpcHRpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE5leHRSZXF1ZXN0SWQoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX1fJHt0aGlzLnJlcXVlc3RJZENvdW50ZXIrK31gO1xuICB9XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCAqIGZyb20gXCIuL0VudmVsb3BlQnVzTWVzc2FnZU1hbmFnZXJcIjtcbiJdLCJzb3VyY2VSb290IjoiIn0=
\ No newline at end of file
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/common/__tests__/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/common/__tests__/index.js
index 4d2d525..0ff5712 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/common/__tests__/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/common/__tests__/index.js
@@ -1 +1,136 @@
-module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}({10:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.messageBusClientApiMock=function(){var e=new Map,t=new Proxy({},{get:function(t,n){var r;return null!==(r=e.get(n))&&void 0!==r?r:e.set(n,jest.fn()).get(n)}});return{notifications:t,requests:t,subscribe:jest.fn(),unsubscribe:jest.fn()}}}});
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/common/__tests__/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/common/__tests__/index.ts":
+/*!***************************************!*\
+  !*** ./src/common/__tests__/index.ts ***!
+  \***************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+function messageBusClientApiMock() {
+    var mocks = new Map();
+    var proxyMock = new Proxy({}, {
+        get: function (target, name) {
+            var _a;
+            return (_a = mocks.get(name)) !== null && _a !== void 0 ? _a : mocks.set(name, jest.fn()).get(name);
+        }
+    });
+    return {
+        notifications: proxyMock,
+        requests: proxyMock,
+        subscribe: jest.fn(),
+        unsubscribe: jest.fn()
+    };
+}
+exports.messageBusClientApiMock = messageBusClientApiMock;
+
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9fX3Rlc3RzX18vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDbEZBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUlILFNBQWdCLHVCQUF1QjtJQUNyQyxJQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBWSxDQUFDO0lBRWxDLElBQU0sU0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLEVBQVMsRUFBRTtRQUNyQyxHQUFHLEVBQUUsVUFBQyxNQUFNLEVBQUUsSUFBSTs7WUFDaEIsYUFBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakUsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxhQUFhLEVBQUUsU0FBUztRQUN4QixRQUFRLEVBQUUsU0FBUztRQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNwQixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUN2QixDQUFDO0FBQ0osQ0FBQztBQWZELDBEQWVDIiwiZmlsZSI6ImNvbW1vbi9fX3Rlc3RzX18vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9jb21tb24vX190ZXN0c19fL2luZGV4LnRzXCIpO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDIwIFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcGlEZWZpbml0aW9uLCBNZXNzYWdlQnVzQ2xpZW50QXBpIH0gZnJvbSBcIi4uLy4uL2FwaVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZUJ1c0NsaWVudEFwaU1vY2s8VCBleHRlbmRzIEFwaURlZmluaXRpb248VD4+KCk6IE1lc3NhZ2VCdXNDbGllbnRBcGk8VD4ge1xuICBjb25zdCBtb2NrcyA9IG5ldyBNYXA8YW55LCBhbnk+KCk7XG5cbiAgY29uc3QgcHJveHlNb2NrID0gbmV3IFByb3h5KHt9IGFzIGFueSwge1xuICAgIGdldDogKHRhcmdldCwgbmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIG1vY2tzLmdldChuYW1lKSA/PyBtb2Nrcy5zZXQobmFtZSwgamVzdC5mbigpKS5nZXQobmFtZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIG5vdGlmaWNhdGlvbnM6IHByb3h5TW9jayxcbiAgICByZXF1ZXN0czogcHJveHlNb2NrLFxuICAgIHN1YnNjcmliZTogamVzdC5mbigpLFxuICAgIHVuc3Vic2NyaWJlOiBqZXN0LmZuKClcbiAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
\ No newline at end of file
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/common/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/common/index.js
index 2a75d0e..0259e4a 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/common/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/common/index.js
@@ -1 +1,436 @@
-module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.REQUEST="request",e.RESPONSE="response",e.SUBSCRIPTION="subscription",e.UNSUBSCRIPTION="unsubscription",e.NOTIFICATION="notification"}(t.EnvelopeBusMessagePurpose||(t.EnvelopeBusMessagePurpose={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(2))},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,s=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(o)throw o.error}}return u},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var s=r(0),u=function(){function e(e,t){var r,n,s=this;void 0===t&&(t=""+(new Date).getMilliseconds()),this.send=e,this.name=t,this.callbacks=new Map,this.remoteSubscriptions=[],this.localSubscriptions=new Map,this.clientApi=(r=new Map,n=new Map,{requests:new Proxy({},{set:function(e,t,n){return r.set(t,n),!0},get:function(e,t){var n,u=t;return null!==(n=r.get(u))&&void 0!==n?n:r.set(u,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.request.apply(s,o([u],e))})).get(u)}}),notifications:new Proxy({},{set:function(e,t,r){return n.set(t,r),!0},get:function(e,t){var r,u=t;return null!==(r=n.get(u))&&void 0!==r?r:n.set(u,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.notify.apply(s,o([u],e))})).get(u)}}),subscribe:function(e,t){return s.subscribe(e,t)},unsubscribe:function(e,t){return s.unsubscribe(e,t)}}),this.requestIdCounter=0}return Object.defineProperty(e.prototype,"server",{get:function(){var e=this;return{receive:function(t,r){return e.receive(t,r)}}},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e,t){var r,n=null!==(r=this.localSubscriptions.get(e))&&void 0!==r?r:[];return this.localSubscriptions.set(e,o(n,[t])),this.send({type:e,purpose:s.EnvelopeBusMessagePurpose.SUBSCRIPTION,data:[]}),t},e.prototype.unsubscribe=function(e,t){var r=this.localSubscriptions.get(e);if(r){var n=r.indexOf(t);n<0||(r.splice(n,1),this.send({type:e,purpose:s.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,data:[]}))}},e.prototype.request=function(e){for(var t=this,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var o=this.getNextRequestId();return this.send({requestId:o,type:e,data:r,purpose:s.EnvelopeBusMessagePurpose.REQUEST}),new Promise((function(e,r){t.callbacks.set(o,{resolve:e,reject:r})}))},e.prototype.notify=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.send({type:e,data:t,purpose:s.EnvelopeBusMessagePurpose.NOTIFICATION})},e.prototype.respond=function(e,t,r){if(e.purpose!==s.EnvelopeBusMessagePurpose.REQUEST)throw new Error("Cannot respond a message that is not a request");if(!e.requestId)throw new Error("Cannot respond a request without a requestId");this.send({requestId:e.requestId,purpose:s.EnvelopeBusMessagePurpose.RESPONSE,type:e.type,data:t,error:r})},e.prototype.callback=function(e){if(e.purpose!==s.EnvelopeBusMessagePurpose.RESPONSE)throw new Error("Cannot invoke callback with a message that is not a response");if(!e.requestId)throw new Error("Cannot acknowledge a response without a requestId");var t=this.callbacks.get(e.requestId);if(!t)throw new Error("Callback not found for "+e);this.callbacks.delete(e.requestId),e.error?(console.error(JSON.stringify(e.error)),t.reject(e.error)):t.resolve(e.data)},e.prototype.receive=function(e,t){var r,n,u=this;if(e.purpose!==s.EnvelopeBusMessagePurpose.RESPONSE)if(e.purpose!==s.EnvelopeBusMessagePurpose.REQUEST)if(e.purpose!==s.EnvelopeBusMessagePurpose.NOTIFICATION)if(e.purpose!==s.EnvelopeBusMessagePurpose.SUBSCRIPTION)if(e.purpose!==s.EnvelopeBusMessagePurpose.UNSUBSCRIPTION);else{a=e.type;var i=this.remoteSubscriptions.indexOf(a);i>=0&&this.remoteSubscriptions.splice(i,1)}else{var a=e.type;this.remoteSubscriptions.indexOf(a)<0&&this.remoteSubscriptions.push(a)}else{null===(r=t[a=e.type])||void 0===r||r.apply(t,e.data),this.remoteSubscriptions.indexOf(a)>=0&&this.send({type:a,purpose:s.EnvelopeBusMessagePurpose.NOTIFICATION,data:e.data});var p=e.type;(null!==(n=this.localSubscriptions.get(p))&&void 0!==n?n:[]).forEach((function(t){t.apply(void 0,o(e.data))}))}else{var c=e,l=t[c.type].apply(t,c.data);if(!(l instanceof Promise))throw new Error("Cannot make a request to '"+c.type+"' because it does not return a Promise");l.then((function(e){return u.respond(c,e)})).catch((function(e){return u.respond(c,void 0,e)}))}else this.callback(e)},e.prototype.getNextRequestId=function(){return this.name+"_"+this.requestIdCounter++},e}();t.EnvelopeBusMessageManager=u}]);
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/common/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/api/index.ts":
+/*!**************************!*\
+  !*** ./src/api/index.ts ***!
+  \**************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+var EnvelopeBusMessagePurpose;
+(function (EnvelopeBusMessagePurpose) {
+    EnvelopeBusMessagePurpose["REQUEST"] = "request";
+    EnvelopeBusMessagePurpose["RESPONSE"] = "response";
+    EnvelopeBusMessagePurpose["SUBSCRIPTION"] = "subscription";
+    EnvelopeBusMessagePurpose["UNSUBSCRIPTION"] = "unsubscription";
+    EnvelopeBusMessagePurpose["NOTIFICATION"] = "notification";
+})(EnvelopeBusMessagePurpose = exports.EnvelopeBusMessagePurpose || (exports.EnvelopeBusMessagePurpose = {}));
+var EnvelopeBusMessageDirectSender;
+(function (EnvelopeBusMessageDirectSender) {
+    EnvelopeBusMessageDirectSender["ENVELOPE_BUS_CONTROLLER"] = "envelopeBusController";
+    EnvelopeBusMessageDirectSender["ENVELOPE_SERVER"] = "envelopeServer";
+})(EnvelopeBusMessageDirectSender = exports.EnvelopeBusMessageDirectSender || (exports.EnvelopeBusMessageDirectSender = {}));
+
+
+/***/ }),
+
+/***/ "./src/common/EnvelopeBusMessageManager.ts":
+/*!*************************************************!*\
+  !*** ./src/common/EnvelopeBusMessageManager.ts ***!
+  \*************************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+var __spread = (this && this.__spread) || function () {
+    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
+    return ar;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var api_1 = __webpack_require__(/*! ../api */ "./src/api/index.ts");
+var EnvelopeBusMessageManager = /** @class */ (function () {
+    function EnvelopeBusMessageManager(send, name) {
+        var _this = this;
+        if (name === void 0) { name = "" + new Date().getMilliseconds(); }
+        this.send = send;
+        this.name = name;
+        this.callbacks = new Map();
+        this.remoteSubscriptions = [];
+        // tslint:disable-next-line:ban-types
+        this.localSubscriptions = new Map();
+        this.clientApi = (function () {
+            var requestsCache = new Map();
+            var notificationsCache = new Map();
+            var requests = new Proxy({}, {
+                set: function (target, name, value) {
+                    requestsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = requestsCache.get(method)) !== null && _a !== void 0 ? _a : requestsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.request.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var notifications = new Proxy({}, {
+                set: function (target, name, value) {
+                    notificationsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = notificationsCache.get(method)) !== null && _a !== void 0 ? _a : notificationsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.notify.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var clientApi = {
+                requests: requests,
+                notifications: notifications,
+                subscribe: function (m, a) { return _this.subscribe(m, a); },
+                unsubscribe: function (m, a) { return _this.unsubscribe(m, a); }
+            };
+            return clientApi;
+        })();
+        this.requestIdCounter = 0;
+    }
+    Object.defineProperty(EnvelopeBusMessageManager.prototype, "server", {
+        get: function () {
+            var _this = this;
+            return {
+                receive: function (m, apiImpl) { return _this.receive(m, apiImpl); }
+            };
+        },
+        enumerable: true,
+        configurable: true
+    });
+    EnvelopeBusMessageManager.prototype.subscribe = function (method, callback) {
+        var _a;
+        var activeSubscriptions = (_a = this.localSubscriptions.get(method)) !== null && _a !== void 0 ? _a : [];
+        this.localSubscriptions.set(method, __spread(activeSubscriptions, [callback]));
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION,
+            data: []
+        });
+        return callback;
+    };
+    EnvelopeBusMessageManager.prototype.unsubscribe = function (method, callback) {
+        var values = this.localSubscriptions.get(method);
+        if (!values) {
+            return;
+        }
+        var index = values.indexOf(callback);
+        if (index < 0) {
+            return;
+        }
+        values.splice(index, 1);
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,
+            data: []
+        });
+    };
+    EnvelopeBusMessageManager.prototype.request = function (method) {
+        var _this = this;
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        var requestId = this.getNextRequestId();
+        this.send({
+            requestId: requestId,
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.REQUEST
+        });
+        return new Promise(function (resolve, reject) {
+            _this.callbacks.set(requestId, { resolve: resolve, reject: reject });
+        });
+        //TODO: Setup timeout to avoid memory leaks
+    };
+    EnvelopeBusMessageManager.prototype.notify = function (method) {
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        this.send({
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION
+        });
+    };
+    EnvelopeBusMessageManager.prototype.respond = function (request, data, error) {
+        if (request.purpose !== api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            throw new Error("Cannot respond a message that is not a request");
+        }
+        if (!request.requestId) {
+            throw new Error("Cannot respond a request without a requestId");
+        }
+        this.send({
+            requestId: request.requestId,
+            purpose: api_1.EnvelopeBusMessagePurpose.RESPONSE,
+            type: request.type,
+            data: data,
+            error: error
+        });
+    };
+    EnvelopeBusMessageManager.prototype.callback = function (response) {
+        if (response.purpose !== api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            throw new Error("Cannot invoke callback with a message that is not a response");
+        }
+        if (!response.requestId) {
+            throw new Error("Cannot acknowledge a response without a requestId");
+        }
+        var callback = this.callbacks.get(response.requestId);
+        if (!callback) {
+            throw new Error("Callback not found for " + response);
+        }
+        this.callbacks.delete(response.requestId);
+        if (!response.error) {
+            callback.resolve(response.data);
+        }
+        else {
+            console.error(JSON.stringify(response.error));
+            callback.reject(response.error);
+        }
+    };
+    EnvelopeBusMessageManager.prototype.receive = function (
+    // We can receive messages from both the APIs we provide and consume.
+    message, apiImpl) {
+        var _this = this;
+        var _a, _b;
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            // We can only receive responses for the API we consume.
+            this.callback(message);
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            // We can only receive requests for the API we provide.
+            var request_1 = message;
+            var response = apiImpl[request_1.type].apply(apiImpl, request_1.data);
+            if (!(response instanceof Promise)) {
+                throw new Error("Cannot make a request to '" + request_1.type + "' because it does not return a Promise");
+            }
+            response.then(function (data) { return _this.respond(request_1, data); }).catch(function (err) { return _this.respond(request_1, undefined, err); });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.NOTIFICATION) {
+            // We can only receive notifications for methods of the API we provide.
+            var method = message.type;
+            (_a = apiImpl[method]) === null || _a === void 0 ? void 0 : _a.apply(apiImpl, message.data);
+            if (this.remoteSubscriptions.indexOf(method) >= 0) {
+                this.send({
+                    type: method,
+                    purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION,
+                    data: message.data
+                });
+            }
+            // We can only receive notifications from subscriptions of the API we consume.
+            var localSubscriptionMethod = message.type;
+            ((_b = this.localSubscriptions.get(localSubscriptionMethod)) !== null && _b !== void 0 ? _b : []).forEach(function (callback) {
+                callback.apply(void 0, __spread(message.data));
+            });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION) {
+            // We can only receive subscriptions for methods of the API we provide.
+            var method = message.type;
+            if (this.remoteSubscriptions.indexOf(method) < 0) {
+                this.remoteSubscriptions.push(method);
+            }
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION) {
+            // We can only receive unsubscriptions for methods of the API we provide.
+            var method = message.type;
+            var index = this.remoteSubscriptions.indexOf(method);
+            if (index >= 0) {
+                this.remoteSubscriptions.splice(index, 1);
+            }
+            return;
+        }
+    };
+    EnvelopeBusMessageManager.prototype.getNextRequestId = function () {
+        return this.name + "_" + this.requestIdCounter++;
+    };
+    return EnvelopeBusMessageManager;
+}());
+exports.EnvelopeBusMessageManager = EnvelopeBusMessageManager;
+
+
+/***/ }),
+
+/***/ "./src/common/index.ts":
+/*!*****************************!*\
+  !*** ./src/common/index.ts ***!
+  \*****************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./EnvelopeBusMessageManager */ "./src/common/EnvelopeBusMessageManager.ts"));
+
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/envelope/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/envelope/index.js
index d9082a6..883a6c9 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/envelope/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/envelope/index.js
@@ -1 +1,570 @@
-module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.REQUEST="request",e.RESPONSE="response",e.SUBSCRIPTION="subscription",e.UNSUBSCRIPTION="unsubscription",e.NOTIFICATION="notification"}(t.EnvelopeBusMessagePurpose||(t.EnvelopeBusMessagePurpose={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(2))},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,s,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){s={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(s)throw s.error}}return i},s=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var o=r(0),i=function(){function e(e,t){var r,n,o=this;void 0===t&&(t=""+(new Date).getMilliseconds()),this.send=e,this.name=t,this.callbacks=new Map,this.remoteSubscriptions=[],this.localSubscriptions=new Map,this.clientApi=(r=new Map,n=new Map,{requests:new Proxy({},{set:function(e,t,n){return r.set(t,n),!0},get:function(e,t){var n,i=t;return null!==(n=r.get(i))&&void 0!==n?n:r.set(i,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.request.apply(o,s([i],e))})).get(i)}}),notifications:new Proxy({},{set:function(e,t,r){return n.set(t,r),!0},get:function(e,t){var r,i=t;return null!==(r=n.get(i))&&void 0!==r?r:n.set(i,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.notify.apply(o,s([i],e))})).get(i)}}),subscribe:function(e,t){return o.subscribe(e,t)},unsubscribe:function(e,t){return o.unsubscribe(e,t)}}),this.requestIdCounter=0}return Object.defineProperty(e.prototype,"server",{get:function(){var e=this;return{receive:function(t,r){return e.receive(t,r)}}},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e,t){var r,n=null!==(r=this.localSubscriptions.get(e))&&void 0!==r?r:[];return this.localSubscriptions.set(e,s(n,[t])),this.send({type:e,purpose:o.EnvelopeBusMessagePurpose.SUBSCRIPTION,data:[]}),t},e.prototype.unsubscribe=function(e,t){var r=this.localSubscriptions.get(e);if(r){var n=r.indexOf(t);n<0||(r.splice(n,1),this.send({type:e,purpose:o.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,data:[]}))}},e.prototype.request=function(e){for(var t=this,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var s=this.getNextRequestId();return this.send({requestId:s,type:e,data:r,purpose:o.EnvelopeBusMessagePurpose.REQUEST}),new Promise((function(e,r){t.callbacks.set(s,{resolve:e,reject:r})}))},e.prototype.notify=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.send({type:e,data:t,purpose:o.EnvelopeBusMessagePurpose.NOTIFICATION})},e.prototype.respond=function(e,t,r){if(e.purpose!==o.EnvelopeBusMessagePurpose.REQUEST)throw new Error("Cannot respond a message that is not a request");if(!e.requestId)throw new Error("Cannot respond a request without a requestId");this.send({requestId:e.requestId,purpose:o.EnvelopeBusMessagePurpose.RESPONSE,type:e.type,data:t,error:r})},e.prototype.callback=function(e){if(e.purpose!==o.EnvelopeBusMessagePurpose.RESPONSE)throw new Error("Cannot invoke callback with a message that is not a response");if(!e.requestId)throw new Error("Cannot acknowledge a response without a requestId");var t=this.callbacks.get(e.requestId);if(!t)throw new Error("Callback not found for "+e);this.callbacks.delete(e.requestId),e.error?(console.error(JSON.stringify(e.error)),t.reject(e.error)):t.resolve(e.data)},e.prototype.receive=function(e,t){var r,n,i=this;if(e.purpose!==o.EnvelopeBusMessagePurpose.RESPONSE)if(e.purpose!==o.EnvelopeBusMessagePurpose.REQUEST)if(e.purpose!==o.EnvelopeBusMessagePurpose.NOTIFICATION)if(e.purpose!==o.EnvelopeBusMessagePurpose.SUBSCRIPTION)if(e.purpose!==o.EnvelopeBusMessagePurpose.UNSUBSCRIPTION);else{a=e.type;var u=this.remoteSubscriptions.indexOf(a);u>=0&&this.remoteSubscriptions.splice(u,1)}else{var a=e.type;this.remoteSubscriptions.indexOf(a)<0&&this.remoteSubscriptions.push(a)}else{null===(r=t[a=e.type])||void 0===r||r.apply(t,e.data),this.remoteSubscriptions.indexOf(a)>=0&&this.send({type:a,purpose:o.EnvelopeBusMessagePurpose.NOTIFICATION,data:e.data});var p=e.type;(null!==(n=this.localSubscriptions.get(p))&&void 0!==n?n:[]).forEach((function(t){t.apply(void 0,s(e.data))}))}else{var c=e,l=t[c.type].apply(t,c.data);if(!(l instanceof Promise))throw new Error("Cannot make a request to '"+c.type+"' because it does not return a Promise");l.then((function(e){return i.respond(c,e)})).catch((function(e){return i.respond(c,void 0,e)}))}else this.callback(e)},e.prototype.getNextRequestId=function(){return this.name+"_"+this.requestIdCounter++},e}();t.EnvelopeBusMessageManager=i},,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(9))},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=r(0),o=r(1),i=function(){function e(e,t){var r=this;this.bus=e,this.envelopeId=t,this.manager=new o.EnvelopeBusMessageManager((function(e){return r.send(e)}),"KogitoEnvelopeBus")}return Object.defineProperty(e.prototype,"channelApi",{get:function(){return this.manager.clientApi},enumerable:!0,configurable:!0}),e.prototype.associate=function(e,t){this.targetOrigin=e,this.associatedEnvelopeServerId=t},e.prototype.startListening=function(e){var t=this;this.eventListener||(this.eventListener=function(r){return t.receive(r.data,e)},window.addEventListener("message",this.eventListener))},e.prototype.stopListening=function(){window.removeEventListener("message",this.eventListener)},e.prototype.send=function(e){if(!this.targetOrigin||!this.associatedEnvelopeServerId)throw new Error("Tried to send message without associated Envelope Server set");this.bus.postMessage(n(n({},e),{targetEnvelopeServerId:this.associatedEnvelopeServerId}),this.targetOrigin)},e.prototype.receive=function(e,t){this.envelopeId&&this.envelopeId!==e.targetEnvelopeId||(e.targetEnvelopeServerId?e.targetEnvelopeServerId&&e.purpose===s.EnvelopeBusMessagePurpose.NOTIFICATION&&this.manager.server.receive(e,{}):this.manager.server.receive(e,t))},e}();t.EnvelopeBusController=i}]);
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/envelope/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/api/index.ts":
+/*!**************************!*\
+  !*** ./src/api/index.ts ***!
+  \**************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+var EnvelopeBusMessagePurpose;
+(function (EnvelopeBusMessagePurpose) {
+    EnvelopeBusMessagePurpose["REQUEST"] = "request";
+    EnvelopeBusMessagePurpose["RESPONSE"] = "response";
+    EnvelopeBusMessagePurpose["SUBSCRIPTION"] = "subscription";
+    EnvelopeBusMessagePurpose["UNSUBSCRIPTION"] = "unsubscription";
+    EnvelopeBusMessagePurpose["NOTIFICATION"] = "notification";
+})(EnvelopeBusMessagePurpose = exports.EnvelopeBusMessagePurpose || (exports.EnvelopeBusMessagePurpose = {}));
+var EnvelopeBusMessageDirectSender;
+(function (EnvelopeBusMessageDirectSender) {
+    EnvelopeBusMessageDirectSender["ENVELOPE_BUS_CONTROLLER"] = "envelopeBusController";
+    EnvelopeBusMessageDirectSender["ENVELOPE_SERVER"] = "envelopeServer";
+})(EnvelopeBusMessageDirectSender = exports.EnvelopeBusMessageDirectSender || (exports.EnvelopeBusMessageDirectSender = {}));
+
+
+/***/ }),
+
+/***/ "./src/common/EnvelopeBusMessageManager.ts":
+/*!*************************************************!*\
+  !*** ./src/common/EnvelopeBusMessageManager.ts ***!
+  \*************************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+var __spread = (this && this.__spread) || function () {
+    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
+    return ar;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var api_1 = __webpack_require__(/*! ../api */ "./src/api/index.ts");
+var EnvelopeBusMessageManager = /** @class */ (function () {
+    function EnvelopeBusMessageManager(send, name) {
+        var _this = this;
+        if (name === void 0) { name = "" + new Date().getMilliseconds(); }
+        this.send = send;
+        this.name = name;
+        this.callbacks = new Map();
+        this.remoteSubscriptions = [];
+        // tslint:disable-next-line:ban-types
+        this.localSubscriptions = new Map();
+        this.clientApi = (function () {
+            var requestsCache = new Map();
+            var notificationsCache = new Map();
+            var requests = new Proxy({}, {
+                set: function (target, name, value) {
+                    requestsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = requestsCache.get(method)) !== null && _a !== void 0 ? _a : requestsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.request.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var notifications = new Proxy({}, {
+                set: function (target, name, value) {
+                    notificationsCache.set(name, value);
+                    return true;
+                },
+                get: function (target, name) {
+                    var _a;
+                    var method = name;
+                    return ((_a = notificationsCache.get(method)) !== null && _a !== void 0 ? _a : notificationsCache.set(method, function () {
+                        var args = [];
+                        for (var _i = 0; _i < arguments.length; _i++) {
+                            args[_i] = arguments[_i];
+                        }
+                        return _this.notify.apply(_this, __spread([method], args));
+                    }).get(method));
+                }
+            });
+            var clientApi = {
+                requests: requests,
+                notifications: notifications,
+                subscribe: function (m, a) { return _this.subscribe(m, a); },
+                unsubscribe: function (m, a) { return _this.unsubscribe(m, a); }
+            };
+            return clientApi;
+        })();
+        this.requestIdCounter = 0;
+    }
+    Object.defineProperty(EnvelopeBusMessageManager.prototype, "server", {
+        get: function () {
+            var _this = this;
+            return {
+                receive: function (m, apiImpl) { return _this.receive(m, apiImpl); }
+            };
+        },
+        enumerable: true,
+        configurable: true
+    });
+    EnvelopeBusMessageManager.prototype.subscribe = function (method, callback) {
+        var _a;
+        var activeSubscriptions = (_a = this.localSubscriptions.get(method)) !== null && _a !== void 0 ? _a : [];
+        this.localSubscriptions.set(method, __spread(activeSubscriptions, [callback]));
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION,
+            data: []
+        });
+        return callback;
+    };
+    EnvelopeBusMessageManager.prototype.unsubscribe = function (method, callback) {
+        var values = this.localSubscriptions.get(method);
+        if (!values) {
+            return;
+        }
+        var index = values.indexOf(callback);
+        if (index < 0) {
+            return;
+        }
+        values.splice(index, 1);
+        this.send({
+            type: method,
+            purpose: api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION,
+            data: []
+        });
+    };
+    EnvelopeBusMessageManager.prototype.request = function (method) {
+        var _this = this;
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        var requestId = this.getNextRequestId();
+        this.send({
+            requestId: requestId,
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.REQUEST
+        });
+        return new Promise(function (resolve, reject) {
+            _this.callbacks.set(requestId, { resolve: resolve, reject: reject });
+        });
+        //TODO: Setup timeout to avoid memory leaks
+    };
+    EnvelopeBusMessageManager.prototype.notify = function (method) {
+        var args = [];
+        for (var _i = 1; _i < arguments.length; _i++) {
+            args[_i - 1] = arguments[_i];
+        }
+        this.send({
+            type: method,
+            data: args,
+            purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION
+        });
+    };
+    EnvelopeBusMessageManager.prototype.respond = function (request, data, error) {
+        if (request.purpose !== api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            throw new Error("Cannot respond a message that is not a request");
+        }
+        if (!request.requestId) {
+            throw new Error("Cannot respond a request without a requestId");
+        }
+        this.send({
+            requestId: request.requestId,
+            purpose: api_1.EnvelopeBusMessagePurpose.RESPONSE,
+            type: request.type,
+            data: data,
+            error: error
+        });
+    };
+    EnvelopeBusMessageManager.prototype.callback = function (response) {
+        if (response.purpose !== api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            throw new Error("Cannot invoke callback with a message that is not a response");
+        }
+        if (!response.requestId) {
+            throw new Error("Cannot acknowledge a response without a requestId");
+        }
+        var callback = this.callbacks.get(response.requestId);
+        if (!callback) {
+            throw new Error("Callback not found for " + response);
+        }
+        this.callbacks.delete(response.requestId);
+        if (!response.error) {
+            callback.resolve(response.data);
+        }
+        else {
+            console.error(JSON.stringify(response.error));
+            callback.reject(response.error);
+        }
+    };
+    EnvelopeBusMessageManager.prototype.receive = function (
+    // We can receive messages from both the APIs we provide and consume.
+    message, apiImpl) {
+        var _this = this;
+        var _a, _b;
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.RESPONSE) {
+            // We can only receive responses for the API we consume.
+            this.callback(message);
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.REQUEST) {
+            // We can only receive requests for the API we provide.
+            var request_1 = message;
+            var response = apiImpl[request_1.type].apply(apiImpl, request_1.data);
+            if (!(response instanceof Promise)) {
+                throw new Error("Cannot make a request to '" + request_1.type + "' because it does not return a Promise");
+            }
+            response.then(function (data) { return _this.respond(request_1, data); }).catch(function (err) { return _this.respond(request_1, undefined, err); });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.NOTIFICATION) {
+            // We can only receive notifications for methods of the API we provide.
+            var method = message.type;
+            (_a = apiImpl[method]) === null || _a === void 0 ? void 0 : _a.apply(apiImpl, message.data);
+            if (this.remoteSubscriptions.indexOf(method) >= 0) {
+                this.send({
+                    type: method,
+                    purpose: api_1.EnvelopeBusMessagePurpose.NOTIFICATION,
+                    data: message.data
+                });
+            }
+            // We can only receive notifications from subscriptions of the API we consume.
+            var localSubscriptionMethod = message.type;
+            ((_b = this.localSubscriptions.get(localSubscriptionMethod)) !== null && _b !== void 0 ? _b : []).forEach(function (callback) {
+                callback.apply(void 0, __spread(message.data));
+            });
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.SUBSCRIPTION) {
+            // We can only receive subscriptions for methods of the API we provide.
+            var method = message.type;
+            if (this.remoteSubscriptions.indexOf(method) < 0) {
+                this.remoteSubscriptions.push(method);
+            }
+            return;
+        }
+        if (message.purpose === api_1.EnvelopeBusMessagePurpose.UNSUBSCRIPTION) {
+            // We can only receive unsubscriptions for methods of the API we provide.
+            var method = message.type;
+            var index = this.remoteSubscriptions.indexOf(method);
+            if (index >= 0) {
+                this.remoteSubscriptions.splice(index, 1);
+            }
+            return;
+        }
+    };
+    EnvelopeBusMessageManager.prototype.getNextRequestId = function () {
+        return this.name + "_" + this.requestIdCounter++;
+    };
+    return EnvelopeBusMessageManager;
+}());
+exports.EnvelopeBusMessageManager = EnvelopeBusMessageManager;
+
+
+/***/ }),
+
+/***/ "./src/common/index.ts":
+/*!*****************************!*\
+  !*** ./src/common/index.ts ***!
+  \*****************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./EnvelopeBusMessageManager */ "./src/common/EnvelopeBusMessageManager.ts"));
+
+
+/***/ }),
+
+/***/ "./src/envelope/EnvelopeBusController.ts":
+/*!***********************************************!*\
+  !*** ./src/envelope/EnvelopeBusController.ts ***!
+  \***********************************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var api_1 = __webpack_require__(/*! ../api */ "./src/api/index.ts");
+var common_1 = __webpack_require__(/*! ../common */ "./src/common/index.ts");
+var EnvelopeBusController = /** @class */ (function () {
+    function EnvelopeBusController(bus, envelopeId) {
+        var _this = this;
+        this.bus = bus;
+        this.envelopeId = envelopeId;
+        this.manager = new common_1.EnvelopeBusMessageManager(function (message) { return _this.send(message); }, "KogitoEnvelopeBus");
+    }
+    Object.defineProperty(EnvelopeBusController.prototype, "channelApi", {
+        get: function () {
+            return this.manager.clientApi;
+        },
+        enumerable: true,
+        configurable: true
+    });
+    EnvelopeBusController.prototype.associate = function (origin, envelopeServerId) {
+        this.targetOrigin = origin;
+        this.associatedEnvelopeServerId = envelopeServerId;
+    };
+    EnvelopeBusController.prototype.startListening = function (apiImpl) {
+        var _this = this;
+        if (this.eventListener) {
+            return;
+        }
+        this.eventListener = function (event) { return _this.receive(event.data, apiImpl); };
+        window.addEventListener("message", this.eventListener);
+    };
+    EnvelopeBusController.prototype.stopListening = function () {
+        window.removeEventListener("message", this.eventListener);
+    };
+    EnvelopeBusController.prototype.send = function (message) {
+        if (!this.targetOrigin || !this.associatedEnvelopeServerId) {
+            throw new Error("Tried to send message without associated Envelope Server set");
+        }
+        this.bus.postMessage(__assign(__assign({}, message), { targetEnvelopeServerId: this.associatedEnvelopeServerId, directSender: api_1.EnvelopeBusMessageDirectSender.ENVELOPE_BUS_CONTROLLER }), this.targetOrigin);
+    };
+    EnvelopeBusController.prototype.receive = function (message, apiImpl) {
+        if (message.directSender === api_1.EnvelopeBusMessageDirectSender.ENVELOPE_BUS_CONTROLLER) {
+            // When a message came from another EnvelopeBusController, it should be ignored
+            return;
+        }
+        if (this.envelopeId !== message.targetEnvelopeId) {
+            // The message should be ignored if it contains a different targetEnvelopeId.
+            // Messages coming from REMOTE EnvelopeServers will have targetEnvelopeId equal to undefined, and
+            // EnvelopeBusControllers will have envelopeId equal to undefined when paired with REMOTE EnvelopeServers,
+            // thus messages from REMOTE EnvelopeServers won't be ignored.
+            return;
+        }
+        if (!message.targetEnvelopeServerId) {
+            // Message was sent directly from the Channel to this Envelope
+            this.manager.server.receive(message, apiImpl);
+        }
+        else if (message.targetEnvelopeServerId && message.purpose === api_1.EnvelopeBusMessagePurpose.NOTIFICATION) {
+            // Message was redirected by the Channel from another Envelope
+            this.manager.server.receive(message, {});
+        }
+    };
+    return EnvelopeBusController;
+}());
+exports.EnvelopeBusController = EnvelopeBusController;
+
+
+/***/ }),
+
+/***/ "./src/envelope/index.ts":
+/*!*******************************!*\
+  !*** ./src/envelope/index.ts ***!
+  \*******************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./EnvelopeBusController */ "./src/envelope/EnvelopeBusController.ts"));
+
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/@kogito-tooling/envelope-bus/dist/hooks/index.js b/node_modules/@kogito-tooling/envelope-bus/dist/hooks/index.js
index 5992650..4938479 100644
--- a/node_modules/@kogito-tooling/envelope-bus/dist/hooks/index.js
+++ b/node_modules/@kogito-tooling/envelope-bus/dist/hooks/index.js
@@ -1 +1,226 @@
-module.exports=function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=3)}([,,,function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var r in e)n.hasOwnProperty(r)||(n[r]=e[r])}(r(4))},function(e,n,r){"use strict";var t=this&&this.__read||function(e,n){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,o,u=r.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(t=u.next()).done;)i.push(t.value)}catch(e){o={error:e}}finally{try{t&&!t.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(t(arguments[n]));return e};Object.defineProperty(n,"__esModule",{value:!0});var u=r(5);n.useConnectedEnvelopeServer=function(e,n){u.useEffect((function(){var r=function(r){return e.receive(r.data,n)};return window.addEventListener("message",r,!1),e.startInitPolling(),function(){e.stopInitPolling(),window.removeEventListener("message",r)}}),[e,n])},n.useSubscription=function(e,n,r){u.useEffect((function(){var t=e.subscribe(n,r);return function(){e.unsubscribe(n,t)}}),[e,n,r])},n.useSubscriptionOnce=function(e,n,r){u.useEffect((function(){var t=!1,u=e.subscribe(n,(function(){for(var i=[],c=0;c<arguments.length;c++)i[c]=arguments[c];r.apply(void 0,o(i)),t=!0,e.unsubscribe(n,u)}));return function(){t||e.unsubscribe(n,u)}}),[e,n,r])}},function(e,n){e.exports=require("react")}]);
\ No newline at end of file
+module.exports =
+/******/ (function(modules) { // webpackBootstrap
+/******/ 	// The module cache
+/******/ 	var installedModules = {};
+/******/
+/******/ 	// The require function
+/******/ 	function __webpack_require__(moduleId) {
+/******/
+/******/ 		// Check if module is in cache
+/******/ 		if(installedModules[moduleId]) {
+/******/ 			return installedModules[moduleId].exports;
+/******/ 		}
+/******/ 		// Create a new module (and put it into the cache)
+/******/ 		var module = installedModules[moduleId] = {
+/******/ 			i: moduleId,
+/******/ 			l: false,
+/******/ 			exports: {}
+/******/ 		};
+/******/
+/******/ 		// Execute the module function
+/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+/******/
+/******/ 		// Flag the module as loaded
+/******/ 		module.l = true;
+/******/
+/******/ 		// Return the exports of the module
+/******/ 		return module.exports;
+/******/ 	}
+/******/
+/******/
+/******/ 	// expose the modules object (__webpack_modules__)
+/******/ 	__webpack_require__.m = modules;
+/******/
+/******/ 	// expose the module cache
+/******/ 	__webpack_require__.c = installedModules;
+/******/
+/******/ 	// define getter function for harmony exports
+/******/ 	__webpack_require__.d = function(exports, name, getter) {
+/******/ 		if(!__webpack_require__.o(exports, name)) {
+/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
+/******/ 		}
+/******/ 	};
+/******/
+/******/ 	// define __esModule on exports
+/******/ 	__webpack_require__.r = function(exports) {
+/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
+/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
+/******/ 		}
+/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
+/******/ 	};
+/******/
+/******/ 	// create a fake namespace object
+/******/ 	// mode & 1: value is a module id, require it
+/******/ 	// mode & 2: merge all properties of value into the ns
+/******/ 	// mode & 4: return value when already ns object
+/******/ 	// mode & 8|1: behave like require
+/******/ 	__webpack_require__.t = function(value, mode) {
+/******/ 		if(mode & 1) value = __webpack_require__(value);
+/******/ 		if(mode & 8) return value;
+/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
+/******/ 		var ns = Object.create(null);
+/******/ 		__webpack_require__.r(ns);
+/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
+/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
+/******/ 		return ns;
+/******/ 	};
+/******/
+/******/ 	// getDefaultExport function for compatibility with non-harmony modules
+/******/ 	__webpack_require__.n = function(module) {
+/******/ 		var getter = module && module.__esModule ?
+/******/ 			function getDefault() { return module['default']; } :
+/******/ 			function getModuleExports() { return module; };
+/******/ 		__webpack_require__.d(getter, 'a', getter);
+/******/ 		return getter;
+/******/ 	};
+/******/
+/******/ 	// Object.prototype.hasOwnProperty.call
+/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
+/******/
+/******/ 	// __webpack_public_path__
+/******/ 	__webpack_require__.p = "";
+/******/
+/******/
+/******/ 	// Load entry module and return exports
+/******/ 	return __webpack_require__(__webpack_require__.s = "./src/hooks/index.ts");
+/******/ })
+/************************************************************************/
+/******/ ({
+
+/***/ "./src/hooks/Hooks.ts":
+/*!****************************!*\
+  !*** ./src/hooks/Hooks.ts ***!
+  \****************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+var __spread = (this && this.__spread) || function () {
+    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
+    return ar;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var react_1 = __webpack_require__(/*! react */ "react");
+function useConnectedEnvelopeServer(envelopeServer, api) {
+    react_1.useEffect(function () {
+        var listener = function (msg) { return envelopeServer.receive(msg.data, api); };
+        window.addEventListener("message", listener, false);
+        envelopeServer.startInitPolling();
+        return function () {
+            envelopeServer.stopInitPolling();
+            window.removeEventListener("message", listener);
+        };
+    }, [envelopeServer, api]);
+}
+exports.useConnectedEnvelopeServer = useConnectedEnvelopeServer;
+function useSubscription(bus, method, callback) {
+    react_1.useEffect(function () {
+        var subscription = bus.subscribe(method, callback);
+        return function () {
+            bus.unsubscribe(method, subscription);
+        };
+    }, [bus, method, callback]);
+}
+exports.useSubscription = useSubscription;
+function useSubscriptionOnce(bus, method, callback) {
+    react_1.useEffect(function () {
+        var unsubscribed = false;
+        var subscription = bus.subscribe(method, function () {
+            var args = [];
+            for (var _i = 0; _i < arguments.length; _i++) {
+                args[_i] = arguments[_i];
+            }
+            callback.apply(void 0, __spread(args));
+            unsubscribed = true;
+            bus.unsubscribe(method, subscription);
+        });
+        return function () {
+            if (!unsubscribed) {
+                bus.unsubscribe(method, subscription);
+            }
+        };
+    }, [bus, method, callback]);
+}
+exports.useSubscriptionOnce = useSubscriptionOnce;
+
+
+/***/ }),
+
+/***/ "./src/hooks/index.ts":
+/*!****************************!*\
+  !*** ./src/hooks/index.ts ***!
+  \****************************/
+/*! no static exports found */
+/***/ (function(module, exports, __webpack_require__) {
+
+"use strict";
+
+/*
+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function __export(m) {
+    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+}
+Object.defineProperty(exports, "__esModule", { value: true });
+__export(__webpack_require__(/*! ./Hooks */ "./src/hooks/Hooks.ts"));
+
+
+/***/ }),
+
+/***/ "react":
+/*!************************!*\
+  !*** external "react" ***!
+  \************************/
+/*! no static exports found */
+/***/ (function(module, exports) {
+
+module.exports = require("react");
+
+/***/ })
+
+/******/ });
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
