// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Domain Explorer Column picker component Snapshot testing 1`] = `
<DomainExplorerColumnPicker
  columnPickerType="Travels"
  data={
    Array [
      Object {
        "name": "id",
        "type": Object {
          "__typename": "__Type",
          "fields": null,
          "kind": "SCALAR",
          "name": "String",
        },
      },
      Object {
        "name": "flight",
        "type": Object {
          "fields": Array [
            Object {
              "name": "arrival",
              "type": Object {
                "kind": "SCALAR",
                "name": "String",
              },
            },
            Object {
              "name": "departure",
              "type": Object {
                "kind": "SCALAR",
                "name": "String",
              },
            },
          ],
          "kind": "OBJECT",
          "name": "Flight",
        },
      },
      Object {
        "name": "hotel",
        "type": Object {
          "fields": Array [
            Object {
              "name": "address",
              "type": Object {
                "kind": "OBJECT",
                "name": "Address",
              },
            },
            Object {
              "name": "bookingNumber",
              "type": Object {
                "kind": "SCALAR",
                "name": "String",
              },
            },
          ],
          "kind": "OBJECT",
          "name": "Hotel",
        },
      },
    ]
  }
  enableCache={false}
  getPicker={
    Object {
      "data": Object {},
      "loading": false,
    }
  }
  getQueryTypes={
    Object {
      "data": Object {
        "__schema": Object {
          "queryType": Array [
            Object {
              "fields": Array [
                Object {
                  "name": "city",
                  "type": Object {
                    "kind": "SCALAR",
                    "name": "String",
                  },
                },
                Object {
                  "name": "country",
                  "type": Object {
                    "kind": "SCALAR",
                    "name": "String",
                  },
                },
                Object {
                  "name": "location",
                  "type": Object {
                    "kind": "OBJECT",
                    "name": "Test",
                  },
                },
              ],
              "kind": "OBJECT",
              "name": "Address",
            },
            Object {
              "fields": Array [
                Object {
                  "name": "city",
                  "type": Object {
                    "kind": "SCALAR",
                    "name": "String",
                  },
                },
                Object {
                  "name": "country",
                  "type": Object {
                    "kind": "SCALAR",
                    "name": "String",
                  },
                },
              ],
              "kind": "OBJECT",
              "name": "Test",
            },
          ],
        },
      },
      "loading": false,
    }
  }
  isLoadingMore={true}
  offsetVal={0}
  pageSize={10}
  parameters={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  selected={Array []}
  setColumnFilters={[MockFunction]}
  setDisplayEmptyState={[MockFunction]}
  setDisplayTable={[MockFunction]}
  setEnableCache={[MockFunction]}
  setError={[MockFunction]}
  setIsLoadingMore={[MockFunction]}
  setOffsetVal={[MockFunction]}
  setPageSize={[MockFunction]}
  setParameters={[MockFunction]}
  setSelected={[MockFunction]}
  setTableLoading={
    [MockFunction] {
      "calls": Array [
        Array [
          true,
        ],
        Array [
          true,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <Component
    aria-label="Select Input"
    ariaLabelledBy="Column Picker dropdown"
    id="columnPicker-dropdown"
    isExpanded={false}
    isGrouped={true}
    maxHeight="60vh"
    onSelect={[Function]}
    onToggle={[Function]}
    placeholderText="Select Columns"
    selections={Array []}
    variant="checkbox"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "aria-label": "Select Input",
          "ariaLabelledBy": "Column Picker dropdown",
          "children": Array [
            <SelectGroup
              id=""
              label=" "
              value=" "
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="id"
              />
            </SelectGroup>,
            <SelectGroup
              id="flight"
              label="flight"
              value="flight"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="arrivalflight"
              >
                arrival
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="departureflight"
              >
                departure
              </SelectOption>
            </SelectGroup>,
            <SelectGroup
              id="Test"
              label="hotel / address / location"
              value="hotelTest"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="cityhotelTest"
              >
                city
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="countryhotelTest"
              >
                country
              </SelectOption>
            </SelectGroup>,
            <SelectGroup
              id="Address"
              label="hotel / address"
              value="hotelAddress"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="cityhotelAddress"
              >
                city
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="countryhotelAddress"
              >
                country
              </SelectOption>
            </SelectGroup>,
            <SelectGroup
              id="hotel"
              label="hotel"
              value="hotel"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="bookingNumberhotel"
              >
                bookingNumber
              </SelectOption>
            </SelectGroup>,
          ],
          "id": "columnPicker-dropdown",
          "isExpanded": false,
          "isGrouped": true,
          "maxHeight": "60vh",
          "onSelect": [Function],
          "onToggle": [Function],
          "placeholderText": "Select Columns",
          "selections": Array [],
          "variant": "checkbox",
        }
      }
      consumerContext={null}
    >
      <Select
        aria-label="Select Input"
        ariaLabelClear="Clear all"
        ariaLabelRemove="Remove"
        ariaLabelToggle="Options menu"
        ariaLabelTypeAhead=""
        ariaLabelledBy="Column Picker dropdown"
        className=""
        createText="Create"
        customContent={null}
        direction="down"
        hasInlineFilter={false}
        id="columnPicker-dropdown"
        isCreatable={false}
        isDisabled={false}
        isExpanded={false}
        isGrouped={true}
        isPlain={false}
        maxHeight="60vh"
        noResultsFoundText="No results found"
        onClear={[Function]}
        onCreateOption={[Function]}
        onFilter={null}
        onSelect={[Function]}
        onToggle={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        placeholderText="Select Columns"
        selections={Array []}
        toggleIcon={null}
        toggleId={null}
        variant="checkbox"
        width=""
      >
        <div
          className="pf-c-select"
          style={
            Object {
              "width": "",
            }
          }
        >
          <SelectToggle
            ariaLabelToggle="Options menu"
            ariaLabelledBy="Column Picker dropdown pf-toggle-id-1"
            className=""
            handleTypeaheadKeys={[Function]}
            hasClearButton={false}
            id="pf-toggle-id-1"
            isActive={false}
            isDisabled={false}
            isExpanded={false}
            isFocused={false}
            isHovered={false}
            isPlain={false}
            onClose={[Function]}
            onEnter={[Function]}
            onToggle={[Function]}
            parentRef={
              Object {
                "current": <div
                  class="pf-c-select"
                >
                  <button
                    aria-expanded="false"
                    aria-labelledby="Column Picker dropdown pf-toggle-id-2"
                    class="pf-c-select__toggle"
                    id="pf-toggle-id-2"
                    type="button"
                  >
                    <div
                      class="pf-c-select__toggle-wrapper"
                    >
                      <span
                        class="pf-c-select__toggle-text"
                      >
                        Select Columns
                      </span>
                    </div>
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>,
              }
            }
            type="button"
            variant="checkbox"
          >
            <button
              aria-expanded={false}
              aria-haspopup={null}
              aria-labelledby="Column Picker dropdown pf-toggle-id-1"
              className="pf-c-select__toggle"
              disabled={false}
              id="pf-toggle-id-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              type="button"
            >
              <div
                className="pf-c-select__toggle-wrapper"
              >
                <span
                  className="pf-c-select__toggle-text"
                >
                  Select Columns
                </span>
              </div>
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  className="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </CaretDownIcon>
            </button>
          </SelectToggle>
        </div>
      </Select>
    </ComponentWithOuia>
  </Component>
  <Component
    id="apply-columns"
    onClick={[Function]}
    variant="primary"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "children": "Apply columns",
          "id": "apply-columns",
          "onClick": [Function],
          "variant": "primary",
        }
      }
      consumerContext={null}
    >
      <Button
        id="apply-columns"
        onClick={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        variant="primary"
      >
        <button
          aria-disabled={null}
          aria-label={null}
          className="pf-c-button pf-m-primary"
          disabled={false}
          id="apply-columns"
          onClick={[Function]}
          tabIndex={null}
          type="button"
        >
          Apply columns
        </button>
      </Button>
    </ComponentWithOuia>
  </Component>
  <Component
    aria-label="Refresh list"
    className="pf-u-m-md"
    id="refresh-button"
    onClick={[Function]}
    variant="plain"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "aria-label": "Refresh list",
          "children": <SyncIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
            title={null}
          />,
          "className": "pf-u-m-md",
          "id": "refresh-button",
          "onClick": [Function],
          "variant": "plain",
        }
      }
      consumerContext={null}
    >
      <Button
        aria-label="Refresh list"
        className="pf-u-m-md"
        id="refresh-button"
        onClick={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        variant="plain"
      >
        <button
          aria-disabled={null}
          aria-label="Refresh list"
          className="pf-c-button pf-m-plain pf-u-m-md"
          disabled={false}
          id="refresh-button"
          onClick={[Function]}
          tabIndex={null}
          type="button"
        >
          <SyncIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 512 512"
              width="1em"
            >
              <path
                d="M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"
                transform=""
              />
            </svg>
          </SyncIcon>
        </button>
      </Button>
    </ComponentWithOuia>
  </Component>
</DomainExplorerColumnPicker>
`;

exports[`Domain Explorer Column picker component check condition remembered params equal to zero 1`] = `
<DomainExplorerColumnPicker
  columnPickerType=" "
  data={Array []}
  enableCache={false}
  getPicker={
    Object {
      "data": Object {},
      "loading": false,
    }
  }
  getQueryTypes={
    Object {
      "data": Object {},
      "loading": false,
    }
  }
  isLoadingMore={true}
  offsetVal={10}
  pageSize={2}
  parameters={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedParams={Array []}
  selected={Array []}
  setColumnFilters={[MockFunction]}
  setDisplayEmptyState={[MockFunction]}
  setDisplayTable={[MockFunction]}
  setEnableCache={[MockFunction]}
  setError={
    [MockFunction] {
      "calls": Array [
        Array [
          [GraphQLError: Syntax Error: Expected Name, found (],
        ],
        Array [
          [GraphQLError: Syntax Error: Expected Name, found (],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setIsLoadingMore={[MockFunction]}
  setOffsetVal={[MockFunction]}
  setPageSize={[MockFunction]}
  setParameters={[MockFunction]}
  setSelected={[MockFunction]}
  setTableLoading={
    [MockFunction] {
      "calls": Array [
        Array [
          true,
        ],
        Array [
          true,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <Component
    aria-label="Select Input"
    ariaLabelledBy="Column Picker dropdown"
    id="columnPicker-dropdown"
    isExpanded={false}
    isGrouped={true}
    maxHeight="60vh"
    onSelect={[Function]}
    onToggle={[Function]}
    placeholderText="Select Columns"
    selections={Array []}
    variant="checkbox"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "aria-label": "Select Input",
          "ariaLabelledBy": "Column Picker dropdown",
          "children": Array [
            <SelectGroup
              id=""
              label=" "
              value=" "
            />,
          ],
          "id": "columnPicker-dropdown",
          "isExpanded": false,
          "isGrouped": true,
          "maxHeight": "60vh",
          "onSelect": [Function],
          "onToggle": [Function],
          "placeholderText": "Select Columns",
          "selections": Array [],
          "variant": "checkbox",
        }
      }
      consumerContext={null}
    >
      <Select
        aria-label="Select Input"
        ariaLabelClear="Clear all"
        ariaLabelRemove="Remove"
        ariaLabelToggle="Options menu"
        ariaLabelTypeAhead=""
        ariaLabelledBy="Column Picker dropdown"
        className=""
        createText="Create"
        customContent={null}
        direction="down"
        hasInlineFilter={false}
        id="columnPicker-dropdown"
        isCreatable={false}
        isDisabled={false}
        isExpanded={false}
        isGrouped={true}
        isPlain={false}
        maxHeight="60vh"
        noResultsFoundText="No results found"
        onClear={[Function]}
        onCreateOption={[Function]}
        onFilter={null}
        onSelect={[Function]}
        onToggle={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        placeholderText="Select Columns"
        selections={Array []}
        toggleIcon={null}
        toggleId={null}
        variant="checkbox"
        width=""
      >
        <div
          className="pf-c-select"
          style={
            Object {
              "width": "",
            }
          }
        >
          <SelectToggle
            ariaLabelToggle="Options menu"
            ariaLabelledBy="Column Picker dropdown pf-toggle-id-4"
            className=""
            handleTypeaheadKeys={[Function]}
            hasClearButton={false}
            id="pf-toggle-id-4"
            isActive={false}
            isDisabled={false}
            isExpanded={false}
            isFocused={false}
            isHovered={false}
            isPlain={false}
            onClose={[Function]}
            onEnter={[Function]}
            onToggle={[Function]}
            parentRef={
              Object {
                "current": <div
                  class="pf-c-select"
                >
                  <button
                    aria-expanded="false"
                    aria-labelledby="Column Picker dropdown pf-toggle-id-5"
                    class="pf-c-select__toggle"
                    id="pf-toggle-id-5"
                    type="button"
                  >
                    <div
                      class="pf-c-select__toggle-wrapper"
                    >
                      <span
                        class="pf-c-select__toggle-text"
                      >
                        Select Columns
                      </span>
                    </div>
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>,
              }
            }
            type="button"
            variant="checkbox"
          >
            <button
              aria-expanded={false}
              aria-haspopup={null}
              aria-labelledby="Column Picker dropdown pf-toggle-id-4"
              className="pf-c-select__toggle"
              disabled={false}
              id="pf-toggle-id-4"
              onClick={[Function]}
              onKeyDown={[Function]}
              type="button"
            >
              <div
                className="pf-c-select__toggle-wrapper"
              >
                <span
                  className="pf-c-select__toggle-text"
                >
                  Select Columns
                </span>
              </div>
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  className="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </CaretDownIcon>
            </button>
          </SelectToggle>
        </div>
      </Select>
    </ComponentWithOuia>
  </Component>
  <Component
    id="apply-columns"
    onClick={[Function]}
    variant="primary"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "children": "Apply columns",
          "id": "apply-columns",
          "onClick": [Function],
          "variant": "primary",
        }
      }
      consumerContext={null}
    >
      <Button
        id="apply-columns"
        onClick={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        variant="primary"
      >
        <button
          aria-disabled={null}
          aria-label={null}
          className="pf-c-button pf-m-primary"
          disabled={false}
          id="apply-columns"
          onClick={[Function]}
          tabIndex={null}
          type="button"
        >
          Apply columns
        </button>
      </Button>
    </ComponentWithOuia>
  </Component>
  <Component
    aria-label="Refresh list"
    className="pf-u-m-md"
    id="refresh-button"
    onClick={[Function]}
    variant="plain"
  >
    <ComponentWithOuia
      component={[Function]}
      componentProps={
        Object {
          "aria-label": "Refresh list",
          "children": <SyncIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
            title={null}
          />,
          "className": "pf-u-m-md",
          "id": "refresh-button",
          "onClick": [Function],
          "variant": "plain",
        }
      }
      consumerContext={null}
    >
      <Button
        aria-label="Refresh list"
        className="pf-u-m-md"
        id="refresh-button"
        onClick={[Function]}
        ouiaContext={
          Object {
            "isOuia": false,
            "ouiaId": null,
          }
        }
        variant="plain"
      >
        <button
          aria-disabled={null}
          aria-label="Refresh list"
          className="pf-c-button pf-m-plain pf-u-m-md"
          disabled={false}
          id="refresh-button"
          onClick={[Function]}
          tabIndex={null}
          type="button"
        >
          <SyncIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 512 512"
              width="1em"
            >
              <path
                d="M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"
                transform=""
              />
            </svg>
          </SyncIcon>
        </button>
      </Button>
    </ComponentWithOuia>
  </Component>
</DomainExplorerColumnPicker>
`;

exports[`Domain Explorer Column picker component check invalid column picker 1`] = `
<Fragment>
  <Component
    aria-label="Select Input"
    ariaLabelledBy="Column Picker dropdown"
    id="columnPicker-dropdown"
    isExpanded={false}
    isGrouped={true}
    maxHeight="60vh"
    onSelect={[Function]}
    onToggle={[Function]}
    placeholderText="Select Columns"
    selections={Array []}
    variant="checkbox"
  >
    <SelectGroup
      id=""
      key="0.7336705311965102"
      label=" "
      value=" "
    />
  </Component>
  <Component
    id="apply-columns"
    onClick={[Function]}
    variant="primary"
  >
    Apply columns
  </Component>
  <Component
    aria-label="Refresh list"
    className="pf-u-m-md"
    id="refresh-button"
    onClick={[Function]}
    variant="plain"
  >
    <SyncIcon
      color="currentColor"
      noVerticalAlign={false}
      size="sm"
      title={null}
    />
  </Component>
</Fragment>
`;
