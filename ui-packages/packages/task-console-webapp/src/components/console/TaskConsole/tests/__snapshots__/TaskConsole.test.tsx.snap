// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskConsole tests Snapshot 1`] = `
<TaskConsole
  apolloClient={
    ApolloClient {
      "__actionHookForDevTools": [MockFunction],
      "__requestRaw": [MockFunction],
      "addResolvers": [MockFunction],
      "clearStore": [MockFunction],
      "extract": [MockFunction],
      "getResolvers": [MockFunction],
      "initQueryManager": [MockFunction],
      "mutate": [MockFunction],
      "onClearStore": [MockFunction],
      "onResetStore": [MockFunction],
      "query": [MockFunction],
      "reFetchObservableQueries": [MockFunction],
      "readFragment": [MockFunction],
      "readQuery": [MockFunction],
      "resetStore": [MockFunction],
      "restore": [MockFunction],
      "setLocalStateFragmentMatcher": [MockFunction],
      "setResolvers": [MockFunction],
      "stop": [MockFunction],
      "subscribe": [MockFunction],
      "watchQuery": [MockFunction],
      "writeData": [MockFunction],
      "writeFragment": [MockFunction],
      "writeQuery": [MockFunction],
    }
  }
  userContext={
    TestUserContextImpl {
      "currentUser": Object {
        "groups": Array [
          "employees",
        ],
        "id": "john",
      },
      "userManager": TestUserManagerImpl {
        "system": Array [
          "john",
          "mary",
          "poul",
        ],
        "users": Array [],
      },
    }
  }
>
  <KogitoAppContextProvider
    userContext={
      TestUserContextImpl {
        "currentUser": Object {
          "groups": Array [
            "employees",
          ],
          "id": "john",
        },
        "userManager": TestUserManagerImpl {
          "system": Array [
            "john",
            "mary",
            "poul",
          ],
          "users": Array [],
        },
      }
    }
  >
    <TaskConsoleContextsProvider
      client={
        ApolloClient {
          "__actionHookForDevTools": [MockFunction],
          "__requestRaw": [MockFunction],
          "addResolvers": [MockFunction],
          "clearStore": [MockFunction],
          "extract": [MockFunction],
          "getResolvers": [MockFunction],
          "initQueryManager": [MockFunction],
          "mutate": [MockFunction],
          "onClearStore": [MockFunction],
          "onResetStore": [MockFunction],
          "query": [MockFunction],
          "reFetchObservableQueries": [MockFunction],
          "readFragment": [MockFunction],
          "readQuery": [MockFunction],
          "resetStore": [MockFunction],
          "restore": [MockFunction],
          "setLocalStateFragmentMatcher": [MockFunction],
          "setResolvers": [MockFunction],
          "stop": [MockFunction],
          "subscribe": [MockFunction],
          "watchQuery": [MockFunction],
          "writeData": [MockFunction],
          "writeFragment": [MockFunction],
          "writeQuery": [MockFunction],
        }
      }
    >
      <TaskInboxContextProvider
        apolloClient={
          ApolloClient {
            "__actionHookForDevTools": [MockFunction],
            "__requestRaw": [MockFunction],
            "addResolvers": [MockFunction],
            "clearStore": [MockFunction],
            "extract": [MockFunction],
            "getResolvers": [MockFunction],
            "initQueryManager": [MockFunction],
            "mutate": [MockFunction],
            "onClearStore": [MockFunction],
            "onResetStore": [MockFunction],
            "query": [MockFunction],
            "reFetchObservableQueries": [MockFunction],
            "readFragment": [MockFunction],
            "readQuery": [MockFunction],
            "resetStore": [MockFunction],
            "restore": [MockFunction],
            "setLocalStateFragmentMatcher": [MockFunction],
            "setResolvers": [MockFunction],
            "stop": [MockFunction],
            "subscribe": [MockFunction],
            "watchQuery": [MockFunction],
            "writeData": [MockFunction],
            "writeFragment": [MockFunction],
            "writeQuery": [MockFunction],
          }
        }
      >
        <BrowserRouter>
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Switch>
              <Route
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/"
                render={[Function]}
              >
                <PageLayout
                  BrandAltText="Task Console Logo"
                  BrandClick={[Function]}
                  BrandSrc="taskConsoleLogo.svg"
                  PageNav={
                    <MockedComponent
                      pathname="/"
                    />
                  }
                  pageNavOpen={false}
                >
                  <MockedComponent />
                </PageLayout>
              </Route>
            </Switch>
          </Router>
        </BrowserRouter>
      </TaskInboxContextProvider>
    </TaskConsoleContextsProvider>
  </KogitoAppContextProvider>
</TaskConsole>
`;
