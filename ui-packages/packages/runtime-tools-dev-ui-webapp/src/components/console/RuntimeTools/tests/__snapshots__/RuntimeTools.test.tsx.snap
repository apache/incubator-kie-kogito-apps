// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Runtime Tools tests Snapshot tests with default props 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <RuntimeTools
      dataIndex="http:localhost:4000"
      navigate="JobsManagement"
      users={
        Array [
          Object {
            "groups": Array [
              "admin",
            ],
            "id": "John snow",
          },
        ]
      }
    >
      <ConsolesLayout
        apolloClient={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "clearStoreCallbacks": Array [],
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "localState": LocalState {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "client": [Circular],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "queryManager": QueryManager {
              "assumeImmutableResults": false,
              "clientAwareness": Object {
                "name": undefined,
                "version": undefined,
              },
              "dataStore": DataStore {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
              },
              "fetchQueryRejectFns": Map {},
              "idCounter": 1,
              "inFlightLinkObservables": Map {},
              "link": ApolloLink {
                "request": [Function],
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "client": [Circular],
              },
              "mutationStore": MutationStore {
                "store": Object {},
              },
              "onBroadcast": [Function],
              "pollingInfoByQueryId": Map {},
              "queries": Map {},
              "queryDeduplication": true,
              "queryStore": QueryStore {
                "store": Object {},
              },
              "ssrMode": false,
              "transformCache": WeakMap {},
            },
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
            },
            "typeDefs": undefined,
            "version": "2.6.10",
            "watchQuery": [Function],
          }
        }
        users={
          Array [
            Object {
              "groups": Array [
                "admin",
              ],
              "id": "John snow",
            },
          ]
        }
      >
        <ApolloProvider
          client={
            ApolloClient {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "clearStoreCallbacks": Array [],
              "defaultOptions": Object {},
              "disableNetworkFetches": false,
              "link": ApolloLink {
                "request": [Function],
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "client": [Circular],
              },
              "mutate": [Function],
              "query": [Function],
              "queryDeduplication": true,
              "queryManager": QueryManager {
                "assumeImmutableResults": false,
                "clientAwareness": Object {
                  "name": undefined,
                  "version": undefined,
                },
                "dataStore": DataStore {
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "cacheKeyRoot": KeyTrie {
                      "weakness": true,
                    },
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "freezeResults": false,
                      "resultCaching": true,
                    },
                    "data": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "silenceBroadcast": false,
                    "storeReader": StoreReader {
                      "executeSelectionSet": [Function],
                      "executeStoreQuery": [Function],
                      "executeSubSelectedArray": [Function],
                      "freezeResults": false,
                    },
                    "storeWriter": StoreWriter {},
                    "typenameDocumentCache": Map {},
                    "watches": Set {},
                  },
                },
                "fetchQueryRejectFns": Map {},
                "idCounter": 1,
                "inFlightLinkObservables": Map {},
                "link": ApolloLink {
                  "request": [Function],
                },
                "localState": LocalState {
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "cacheKeyRoot": KeyTrie {
                      "weakness": true,
                    },
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "freezeResults": false,
                      "resultCaching": true,
                    },
                    "data": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "silenceBroadcast": false,
                    "storeReader": StoreReader {
                      "executeSelectionSet": [Function],
                      "executeStoreQuery": [Function],
                      "executeSubSelectedArray": [Function],
                      "freezeResults": false,
                    },
                    "storeWriter": StoreWriter {},
                    "typenameDocumentCache": Map {},
                    "watches": Set {},
                  },
                  "client": [Circular],
                },
                "mutationStore": MutationStore {
                  "store": Object {},
                },
                "onBroadcast": [Function],
                "pollingInfoByQueryId": Map {},
                "queries": Map {},
                "queryDeduplication": true,
                "queryStore": QueryStore {
                  "store": Object {},
                },
                "ssrMode": false,
                "transformCache": WeakMap {},
              },
              "reFetchObservableQueries": [Function],
              "resetStore": [Function],
              "resetStoreCallbacks": Array [],
              "store": DataStore {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
              },
              "typeDefs": undefined,
              "version": "2.6.10",
              "watchQuery": [Function],
            }
          }
        >
          <DevUIAppContextProvider
            users={
              Array [
                Object {
                  "groups": Array [
                    "admin",
                  ],
                  "id": "John snow",
                },
              ]
            }
          >
            <TaskInboxContextProvider
              apolloClient={
                ApolloClient {
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "cacheKeyRoot": KeyTrie {
                      "weakness": true,
                    },
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "freezeResults": false,
                      "resultCaching": true,
                    },
                    "data": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "silenceBroadcast": false,
                    "storeReader": StoreReader {
                      "executeSelectionSet": [Function],
                      "executeStoreQuery": [Function],
                      "executeSubSelectedArray": [Function],
                      "freezeResults": false,
                    },
                    "storeWriter": StoreWriter {},
                    "typenameDocumentCache": Map {},
                    "watches": Set {},
                  },
                  "clearStoreCallbacks": Array [],
                  "defaultOptions": Object {},
                  "disableNetworkFetches": false,
                  "link": ApolloLink {
                    "request": [Function],
                  },
                  "localState": LocalState {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": KeyTrie {
                        "weakness": true,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "freezeResults": false,
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                        "executeSubSelectedArray": [Function],
                        "freezeResults": false,
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Map {},
                      "watches": Set {},
                    },
                    "client": [Circular],
                  },
                  "mutate": [Function],
                  "query": [Function],
                  "queryDeduplication": true,
                  "queryManager": QueryManager {
                    "assumeImmutableResults": false,
                    "clientAwareness": Object {
                      "name": undefined,
                      "version": undefined,
                    },
                    "dataStore": DataStore {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {},
                        "watches": Set {},
                      },
                    },
                    "fetchQueryRejectFns": Map {},
                    "idCounter": 1,
                    "inFlightLinkObservables": Map {},
                    "link": ApolloLink {
                      "request": [Function],
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {},
                        "watches": Set {},
                      },
                      "client": [Circular],
                    },
                    "mutationStore": MutationStore {
                      "store": Object {},
                    },
                    "onBroadcast": [Function],
                    "pollingInfoByQueryId": Map {},
                    "queries": Map {},
                    "queryDeduplication": true,
                    "queryStore": QueryStore {
                      "store": Object {},
                    },
                    "ssrMode": false,
                    "transformCache": WeakMap {},
                  },
                  "reFetchObservableQueries": [Function],
                  "resetStore": [Function],
                  "resetStoreCallbacks": Array [],
                  "store": DataStore {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": KeyTrie {
                        "weakness": true,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "freezeResults": false,
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                        "executeSubSelectedArray": [Function],
                        "freezeResults": false,
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Map {},
                      "watches": Set {},
                    },
                  },
                  "typeDefs": undefined,
                  "version": "2.6.10",
                  "watchQuery": [Function],
                }
              }
            >
              <ProcessListContextProvider
                apolloClient={
                  ApolloClient {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": KeyTrie {
                        "weakness": true,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "freezeResults": false,
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                        "executeSubSelectedArray": [Function],
                        "freezeResults": false,
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Map {},
                      "watches": Set {},
                    },
                    "clearStoreCallbacks": Array [],
                    "defaultOptions": Object {},
                    "disableNetworkFetches": false,
                    "link": ApolloLink {
                      "request": [Function],
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {},
                        "watches": Set {},
                      },
                      "client": [Circular],
                    },
                    "mutate": [Function],
                    "query": [Function],
                    "queryDeduplication": true,
                    "queryManager": QueryManager {
                      "assumeImmutableResults": false,
                      "clientAwareness": Object {
                        "name": undefined,
                        "version": undefined,
                      },
                      "dataStore": DataStore {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "cacheKeyRoot": KeyTrie {
                            "weakness": true,
                          },
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "fragmentMatcher": HeuristicFragmentMatcher {},
                            "freezeResults": false,
                            "resultCaching": true,
                          },
                          "data": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "silenceBroadcast": false,
                          "storeReader": StoreReader {
                            "executeSelectionSet": [Function],
                            "executeStoreQuery": [Function],
                            "executeSubSelectedArray": [Function],
                            "freezeResults": false,
                          },
                          "storeWriter": StoreWriter {},
                          "typenameDocumentCache": Map {},
                          "watches": Set {},
                        },
                      },
                      "fetchQueryRejectFns": Map {},
                      "idCounter": 1,
                      "inFlightLinkObservables": Map {},
                      "link": ApolloLink {
                        "request": [Function],
                      },
                      "localState": LocalState {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "cacheKeyRoot": KeyTrie {
                            "weakness": true,
                          },
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "fragmentMatcher": HeuristicFragmentMatcher {},
                            "freezeResults": false,
                            "resultCaching": true,
                          },
                          "data": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "silenceBroadcast": false,
                          "storeReader": StoreReader {
                            "executeSelectionSet": [Function],
                            "executeStoreQuery": [Function],
                            "executeSubSelectedArray": [Function],
                            "freezeResults": false,
                          },
                          "storeWriter": StoreWriter {},
                          "typenameDocumentCache": Map {},
                          "watches": Set {},
                        },
                        "client": [Circular],
                      },
                      "mutationStore": MutationStore {
                        "store": Object {},
                      },
                      "onBroadcast": [Function],
                      "pollingInfoByQueryId": Map {},
                      "queries": Map {},
                      "queryDeduplication": true,
                      "queryStore": QueryStore {
                        "store": Object {},
                      },
                      "ssrMode": false,
                      "transformCache": WeakMap {},
                    },
                    "reFetchObservableQueries": [Function],
                    "resetStore": [Function],
                    "resetStoreCallbacks": Array [],
                    "store": DataStore {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {},
                        "watches": Set {},
                      },
                    },
                    "typeDefs": undefined,
                    "version": "2.6.10",
                    "watchQuery": [Function],
                  }
                }
              >
                <ProcessDetailsContextProvider
                  apolloClient={
                    ApolloClient {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Map {},
                        "watches": Set {},
                      },
                      "clearStoreCallbacks": Array [],
                      "defaultOptions": Object {},
                      "disableNetworkFetches": false,
                      "link": ApolloLink {
                        "request": [Function],
                      },
                      "localState": LocalState {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "cacheKeyRoot": KeyTrie {
                            "weakness": true,
                          },
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "fragmentMatcher": HeuristicFragmentMatcher {},
                            "freezeResults": false,
                            "resultCaching": true,
                          },
                          "data": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "silenceBroadcast": false,
                          "storeReader": StoreReader {
                            "executeSelectionSet": [Function],
                            "executeStoreQuery": [Function],
                            "executeSubSelectedArray": [Function],
                            "freezeResults": false,
                          },
                          "storeWriter": StoreWriter {},
                          "typenameDocumentCache": Map {},
                          "watches": Set {},
                        },
                        "client": [Circular],
                      },
                      "mutate": [Function],
                      "query": [Function],
                      "queryDeduplication": true,
                      "queryManager": QueryManager {
                        "assumeImmutableResults": false,
                        "clientAwareness": Object {
                          "name": undefined,
                          "version": undefined,
                        },
                        "dataStore": DataStore {
                          "cache": InMemoryCache {
                            "addTypename": true,
                            "cacheKeyRoot": KeyTrie {
                              "weakness": true,
                            },
                            "config": Object {
                              "addTypename": true,
                              "dataIdFromObject": [Function],
                              "fragmentMatcher": HeuristicFragmentMatcher {},
                              "freezeResults": false,
                              "resultCaching": true,
                            },
                            "data": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "maybeBroadcastWatch": [Function],
                            "optimisticData": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "silenceBroadcast": false,
                            "storeReader": StoreReader {
                              "executeSelectionSet": [Function],
                              "executeStoreQuery": [Function],
                              "executeSubSelectedArray": [Function],
                              "freezeResults": false,
                            },
                            "storeWriter": StoreWriter {},
                            "typenameDocumentCache": Map {},
                            "watches": Set {},
                          },
                        },
                        "fetchQueryRejectFns": Map {},
                        "idCounter": 1,
                        "inFlightLinkObservables": Map {},
                        "link": ApolloLink {
                          "request": [Function],
                        },
                        "localState": LocalState {
                          "cache": InMemoryCache {
                            "addTypename": true,
                            "cacheKeyRoot": KeyTrie {
                              "weakness": true,
                            },
                            "config": Object {
                              "addTypename": true,
                              "dataIdFromObject": [Function],
                              "fragmentMatcher": HeuristicFragmentMatcher {},
                              "freezeResults": false,
                              "resultCaching": true,
                            },
                            "data": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "maybeBroadcastWatch": [Function],
                            "optimisticData": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "silenceBroadcast": false,
                            "storeReader": StoreReader {
                              "executeSelectionSet": [Function],
                              "executeStoreQuery": [Function],
                              "executeSubSelectedArray": [Function],
                              "freezeResults": false,
                            },
                            "storeWriter": StoreWriter {},
                            "typenameDocumentCache": Map {},
                            "watches": Set {},
                          },
                          "client": [Circular],
                        },
                        "mutationStore": MutationStore {
                          "store": Object {},
                        },
                        "onBroadcast": [Function],
                        "pollingInfoByQueryId": Map {},
                        "queries": Map {},
                        "queryDeduplication": true,
                        "queryStore": QueryStore {
                          "store": Object {},
                        },
                        "ssrMode": false,
                        "transformCache": WeakMap {},
                      },
                      "reFetchObservableQueries": [Function],
                      "resetStore": [Function],
                      "resetStoreCallbacks": Array [],
                      "store": DataStore {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "cacheKeyRoot": KeyTrie {
                            "weakness": true,
                          },
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "fragmentMatcher": HeuristicFragmentMatcher {},
                            "freezeResults": false,
                            "resultCaching": true,
                          },
                          "data": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "silenceBroadcast": false,
                          "storeReader": StoreReader {
                            "executeSelectionSet": [Function],
                            "executeStoreQuery": [Function],
                            "executeSubSelectedArray": [Function],
                            "freezeResults": false,
                          },
                          "storeWriter": StoreWriter {},
                          "typenameDocumentCache": Map {},
                          "watches": Set {},
                        },
                      },
                      "typeDefs": undefined,
                      "version": "2.6.10",
                      "watchQuery": [Function],
                    }
                  }
                >
                  <JobsManagementContextProvider
                    apolloClient={
                      ApolloClient {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "cacheKeyRoot": KeyTrie {
                            "weakness": true,
                          },
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "fragmentMatcher": HeuristicFragmentMatcher {},
                            "freezeResults": false,
                            "resultCaching": true,
                          },
                          "data": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": DepTrackingCache {
                            "data": Object {},
                            "depend": [Function],
                          },
                          "silenceBroadcast": false,
                          "storeReader": StoreReader {
                            "executeSelectionSet": [Function],
                            "executeStoreQuery": [Function],
                            "executeSubSelectedArray": [Function],
                            "freezeResults": false,
                          },
                          "storeWriter": StoreWriter {},
                          "typenameDocumentCache": Map {},
                          "watches": Set {},
                        },
                        "clearStoreCallbacks": Array [],
                        "defaultOptions": Object {},
                        "disableNetworkFetches": false,
                        "link": ApolloLink {
                          "request": [Function],
                        },
                        "localState": LocalState {
                          "cache": InMemoryCache {
                            "addTypename": true,
                            "cacheKeyRoot": KeyTrie {
                              "weakness": true,
                            },
                            "config": Object {
                              "addTypename": true,
                              "dataIdFromObject": [Function],
                              "fragmentMatcher": HeuristicFragmentMatcher {},
                              "freezeResults": false,
                              "resultCaching": true,
                            },
                            "data": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "maybeBroadcastWatch": [Function],
                            "optimisticData": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "silenceBroadcast": false,
                            "storeReader": StoreReader {
                              "executeSelectionSet": [Function],
                              "executeStoreQuery": [Function],
                              "executeSubSelectedArray": [Function],
                              "freezeResults": false,
                            },
                            "storeWriter": StoreWriter {},
                            "typenameDocumentCache": Map {},
                            "watches": Set {},
                          },
                          "client": [Circular],
                        },
                        "mutate": [Function],
                        "query": [Function],
                        "queryDeduplication": true,
                        "queryManager": QueryManager {
                          "assumeImmutableResults": false,
                          "clientAwareness": Object {
                            "name": undefined,
                            "version": undefined,
                          },
                          "dataStore": DataStore {
                            "cache": InMemoryCache {
                              "addTypename": true,
                              "cacheKeyRoot": KeyTrie {
                                "weakness": true,
                              },
                              "config": Object {
                                "addTypename": true,
                                "dataIdFromObject": [Function],
                                "fragmentMatcher": HeuristicFragmentMatcher {},
                                "freezeResults": false,
                                "resultCaching": true,
                              },
                              "data": DepTrackingCache {
                                "data": Object {},
                                "depend": [Function],
                              },
                              "maybeBroadcastWatch": [Function],
                              "optimisticData": DepTrackingCache {
                                "data": Object {},
                                "depend": [Function],
                              },
                              "silenceBroadcast": false,
                              "storeReader": StoreReader {
                                "executeSelectionSet": [Function],
                                "executeStoreQuery": [Function],
                                "executeSubSelectedArray": [Function],
                                "freezeResults": false,
                              },
                              "storeWriter": StoreWriter {},
                              "typenameDocumentCache": Map {},
                              "watches": Set {},
                            },
                          },
                          "fetchQueryRejectFns": Map {},
                          "idCounter": 1,
                          "inFlightLinkObservables": Map {},
                          "link": ApolloLink {
                            "request": [Function],
                          },
                          "localState": LocalState {
                            "cache": InMemoryCache {
                              "addTypename": true,
                              "cacheKeyRoot": KeyTrie {
                                "weakness": true,
                              },
                              "config": Object {
                                "addTypename": true,
                                "dataIdFromObject": [Function],
                                "fragmentMatcher": HeuristicFragmentMatcher {},
                                "freezeResults": false,
                                "resultCaching": true,
                              },
                              "data": DepTrackingCache {
                                "data": Object {},
                                "depend": [Function],
                              },
                              "maybeBroadcastWatch": [Function],
                              "optimisticData": DepTrackingCache {
                                "data": Object {},
                                "depend": [Function],
                              },
                              "silenceBroadcast": false,
                              "storeReader": StoreReader {
                                "executeSelectionSet": [Function],
                                "executeStoreQuery": [Function],
                                "executeSubSelectedArray": [Function],
                                "freezeResults": false,
                              },
                              "storeWriter": StoreWriter {},
                              "typenameDocumentCache": Map {},
                              "watches": Set {},
                            },
                            "client": [Circular],
                          },
                          "mutationStore": MutationStore {
                            "store": Object {},
                          },
                          "onBroadcast": [Function],
                          "pollingInfoByQueryId": Map {},
                          "queries": Map {},
                          "queryDeduplication": true,
                          "queryStore": QueryStore {
                            "store": Object {},
                          },
                          "ssrMode": false,
                          "transformCache": WeakMap {},
                        },
                        "reFetchObservableQueries": [Function],
                        "resetStore": [Function],
                        "resetStoreCallbacks": Array [],
                        "store": DataStore {
                          "cache": InMemoryCache {
                            "addTypename": true,
                            "cacheKeyRoot": KeyTrie {
                              "weakness": true,
                            },
                            "config": Object {
                              "addTypename": true,
                              "dataIdFromObject": [Function],
                              "fragmentMatcher": HeuristicFragmentMatcher {},
                              "freezeResults": false,
                              "resultCaching": true,
                            },
                            "data": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "maybeBroadcastWatch": [Function],
                            "optimisticData": DepTrackingCache {
                              "data": Object {},
                              "depend": [Function],
                            },
                            "silenceBroadcast": false,
                            "storeReader": StoreReader {
                              "executeSelectionSet": [Function],
                              "executeStoreQuery": [Function],
                              "executeSubSelectedArray": [Function],
                              "freezeResults": false,
                            },
                            "storeWriter": StoreWriter {},
                            "typenameDocumentCache": Map {},
                            "watches": Set {},
                          },
                        },
                        "typeDefs": undefined,
                        "version": "2.6.10",
                        "watchQuery": [Function],
                      }
                    }
                  >
                    <MemoryRouter>
                      <Router
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "key": "ujk14b",
                                "pathname": "/JobsManagement",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "key": "ujk14b",
                              "pathname": "/JobsManagement",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Switch>
                          <Route
                            computedMatch={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            location={
                              Object {
                                "hash": "",
                                "key": "ujk14b",
                                "pathname": "/JobsManagement",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            path="/"
                            render={[Function]}
                          >
                            <PageLayout
                              PageNav={
                                <ConsolesNav
                                  pathname="/JobsManagement"
                                />
                              }
                              pageNavOpen={true}
                              withHeader={false}
                            >
                              <Page
                                className="kogito-consoles-common--PageLayout"
                                data-ouia-component-type="page"
                                data-ouia-safe={true}
                                defaultManagedSidebarIsOpen={true}
                                header={<React.Fragment />}
                                isBreadcrumbWidthLimited={false}
                                isManagedSidebar={false}
                                isNotificationDrawerExpanded={false}
                                mainContainerId="main-content-page-layout-default-nav"
                                mainTabIndex={-1}
                                onNotificationDrawerExpand={[Function]}
                                onPageResize={[Function]}
                                sidebar={
                                  <PageSidebar
                                    data-ouia-navigation="true"
                                    isNavOpen={true}
                                    nav={
                                      <ConsolesNav
                                        pathname="/JobsManagement"
                                      />
                                    }
                                    theme="dark"
                                  />
                                }
                              >
                                <div
                                  className="pf-c-page kogito-consoles-common--PageLayout"
                                  data-ouia-component-type="page"
                                  data-ouia-safe={true}
                                >
                                  <PageSidebar
                                    data-ouia-navigation="true"
                                    isNavOpen={true}
                                    nav={
                                      <ConsolesNav
                                        pathname="/JobsManagement"
                                      />
                                    }
                                    theme="dark"
                                  >
                                    <div
                                      className="pf-c-page__sidebar pf-m-expanded"
                                      data-ouia-navigation="true"
                                      id="page-sidebar"
                                    >
                                      <div
                                        className="pf-c-page__sidebar-body"
                                      >
                                        <ConsolesNav
                                          pathname="/JobsManagement"
                                        >
                                          <Nav
                                            aria-label="Nav"
                                            onSelect={[Function]}
                                            onToggle={[Function]}
                                            ouiaSafe={true}
                                            theme="dark"
                                          >
                                            <nav
                                              aria-label="Nav"
                                              className="pf-c-nav"
                                              data-ouia-component-id="OUIA-Generated-Nav-1"
                                              data-ouia-component-type="PF4/Nav"
                                              data-ouia-safe={true}
                                            >
                                              <NavList
                                                ariaLeftScroll="Scroll left"
                                                ariaRightScroll="Scroll right"
                                              >
                                                <ul
                                                  className="pf-c-nav__list"
                                                  onScroll={[Function]}
                                                >
                                                  <NavItem
                                                    isActive={false}
                                                    key="process-instances-nav"
                                                  >
                                                    <li
                                                      className="pf-c-nav__item"
                                                      data-ouia-component-id="OUIA-Generated-NavItem-1"
                                                      data-ouia-component-type="PF4/NavItem"
                                                      data-ouia-safe={true}
                                                    >
                                                      <Link
                                                        aria-current={null}
                                                        className="pf-c-nav__link"
                                                        data-ouia-navigation-name="process-instances"
                                                        onClick={[Function]}
                                                        to="/ProcessInstances"
                                                      >
                                                        <LinkAnchor
                                                          aria-current={null}
                                                          className="pf-c-nav__link"
                                                          data-ouia-navigation-name="process-instances"
                                                          href="/ProcessInstances"
                                                          navigate={[Function]}
                                                          onClick={[Function]}
                                                        >
                                                          <a
                                                            aria-current={null}
                                                            className="pf-c-nav__link"
                                                            data-ouia-navigation-name="process-instances"
                                                            href="/ProcessInstances"
                                                            onClick={[Function]}
                                                          >
                                                            Processes
                                                          </a>
                                                        </LinkAnchor>
                                                      </Link>
                                                    </li>
                                                  </NavItem>
                                                  <NavItem
                                                    isActive={true}
                                                    key="jobs-management-nav"
                                                  >
                                                    <li
                                                      className="pf-c-nav__item"
                                                      data-ouia-component-id="OUIA-Generated-NavItem-2"
                                                      data-ouia-component-type="PF4/NavItem"
                                                      data-ouia-safe={true}
                                                    >
                                                      <Link
                                                        aria-current="page"
                                                        className="pf-c-nav__link pf-m-current"
                                                        data-ouia-navigation-name="jobs-management"
                                                        onClick={[Function]}
                                                        to="/JobsManagement"
                                                      >
                                                        <LinkAnchor
                                                          aria-current="page"
                                                          className="pf-c-nav__link pf-m-current"
                                                          data-ouia-navigation-name="jobs-management"
                                                          href="/JobsManagement"
                                                          navigate={[Function]}
                                                          onClick={[Function]}
                                                        >
                                                          <a
                                                            aria-current="page"
                                                            className="pf-c-nav__link pf-m-current"
                                                            data-ouia-navigation-name="jobs-management"
                                                            href="/JobsManagement"
                                                            onClick={[Function]}
                                                          >
                                                            Jobs
                                                          </a>
                                                        </LinkAnchor>
                                                      </Link>
                                                    </li>
                                                  </NavItem>
                                                  <NavItem
                                                    isActive={false}
                                                    key="task-inbox-nav"
                                                  >
                                                    <li
                                                      className="pf-c-nav__item"
                                                      data-ouia-component-id="OUIA-Generated-NavItem-3"
                                                      data-ouia-component-type="PF4/NavItem"
                                                      data-ouia-safe={true}
                                                    >
                                                      <Link
                                                        aria-current={null}
                                                        className="pf-c-nav__link"
                                                        data-ouia-navigation-name="task-inbox"
                                                        onClick={[Function]}
                                                        to="/TaskInbox"
                                                      >
                                                        <LinkAnchor
                                                          aria-current={null}
                                                          className="pf-c-nav__link"
                                                          data-ouia-navigation-name="task-inbox"
                                                          href="/TaskInbox"
                                                          navigate={[Function]}
                                                          onClick={[Function]}
                                                        >
                                                          <a
                                                            aria-current={null}
                                                            className="pf-c-nav__link"
                                                            data-ouia-navigation-name="task-inbox"
                                                            href="/TaskInbox"
                                                            onClick={[Function]}
                                                          >
                                                            Tasks
                                                          </a>
                                                        </LinkAnchor>
                                                      </Link>
                                                    </li>
                                                  </NavItem>
                                                </ul>
                                              </NavList>
                                            </nav>
                                          </Nav>
                                        </ConsolesNav>
                                      </div>
                                    </div>
                                  </PageSidebar>
                                  <main
                                    className="pf-c-page__main"
                                    id="main-content-page-layout-default-nav"
                                    tabIndex={-1}
                                  >
                                    <ConsolesRoutes
                                      navigate="JobsManagement"
                                    >
                                      <Switch>
                                        <Route
                                          component={[Function]}
                                          computedMatch={
                                            Object {
                                              "isExact": true,
                                              "params": Object {},
                                              "path": "/JobsManagement",
                                              "url": "/JobsManagement",
                                            }
                                          }
                                          exact={true}
                                          location={
                                            Object {
                                              "hash": "",
                                              "key": "ujk14b",
                                              "pathname": "/JobsManagement",
                                              "search": "",
                                              "state": undefined,
                                            }
                                          }
                                          path="/JobsManagement"
                                        >
                                          <JobsManagementPage
                                            history={
                                              Object {
                                                "action": "REPLACE",
                                                "block": [Function],
                                                "canGo": [Function],
                                                "createHref": [Function],
                                                "entries": Array [
                                                  Object {
                                                    "hash": "",
                                                    "key": "ujk14b",
                                                    "pathname": "/JobsManagement",
                                                    "search": "",
                                                    "state": undefined,
                                                  },
                                                ],
                                                "go": [Function],
                                                "goBack": [Function],
                                                "goForward": [Function],
                                                "index": 0,
                                                "length": 1,
                                                "listen": [Function],
                                                "location": Object {
                                                  "hash": "",
                                                  "key": "ujk14b",
                                                  "pathname": "/JobsManagement",
                                                  "search": "",
                                                  "state": undefined,
                                                },
                                                "push": [Function],
                                                "replace": [Function],
                                              }
                                            }
                                            location={
                                              Object {
                                                "hash": "",
                                                "key": "ujk14b",
                                                "pathname": "/JobsManagement",
                                                "search": "",
                                                "state": undefined,
                                              }
                                            }
                                            match={
                                              Object {
                                                "isExact": true,
                                                "params": Object {},
                                                "path": "/JobsManagement",
                                                "url": "/JobsManagement",
                                              }
                                            }
                                          >
                                            <PageSectionHeader
                                              titleText="Jobs Management"
                                            >
                                              <PageSection
                                                data-ouia-component-type="page-section-header"
                                                data-ouia-safe={true}
                                                variant="light"
                                              >
                                                <section
                                                  className="pf-c-page__main-section pf-m-light"
                                                  data-ouia-component-type="page-section-header"
                                                  data-ouia-safe={true}
                                                >
                                                  <PageTitle
                                                    title="Jobs Management"
                                                  >
                                                    <Flex
                                                      data-ouia-component-type="page-title"
                                                      data-ouia-safe={true}
                                                    >
                                                      <div
                                                        className="pf-l-flex"
                                                        data-ouia-component-type="page-title"
                                                        data-ouia-safe={true}
                                                      >
                                                        <FlexItem
                                                          spacer={
                                                            Object {
                                                              "default": "spacerSm",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="pf-m-spacer-sm"
                                                          >
                                                            <Title
                                                              headingLevel="h1"
                                                              size="4xl"
                                                            >
                                                              <h1
                                                                className="pf-c-title pf-m-4xl"
                                                              >
                                                                Jobs Management
                                                              </h1>
                                                            </Title>
                                                          </div>
                                                        </FlexItem>
                                                      </div>
                                                    </Flex>
                                                  </PageTitle>
                                                </section>
                                              </PageSection>
                                            </PageSectionHeader>
                                            <PageSection>
                                              <section
                                                className="pf-c-page__main-section"
                                              >
                                                <Card
                                                  className="kogito-consoles__card-size"
                                                >
                                                  <article
                                                    className="pf-c-card kogito-consoles__card-size"
                                                    data-ouia-component-id="OUIA-Generated-Card-1"
                                                    data-ouia-component-type="PF4/Card"
                                                    data-ouia-safe={true}
                                                    id=""
                                                  >
                                                    <JobsManagementContainer>
                                                      <ForwardRef
                                                        driver={
                                                          JobsManagementGatewayApiImpl {
                                                            "_JobsManagementState": Object {
                                                              "filters": Array [],
                                                              "orderBy": Object {},
                                                            },
                                                            "applyFilter": [Function],
                                                            "bulkCancel": [Function],
                                                            "cancelJob": [Function],
                                                            "initialLoad": [Function],
                                                            "queries": GraphQLJobsManagementQueries {
                                                              "client": ApolloClient {
                                                                "cache": InMemoryCache {
                                                                  "addTypename": true,
                                                                  "cacheKeyRoot": KeyTrie {
                                                                    "weakness": true,
                                                                  },
                                                                  "config": Object {
                                                                    "addTypename": true,
                                                                    "dataIdFromObject": [Function],
                                                                    "fragmentMatcher": HeuristicFragmentMatcher {},
                                                                    "freezeResults": false,
                                                                    "resultCaching": true,
                                                                  },
                                                                  "data": DepTrackingCache {
                                                                    "data": Object {},
                                                                    "depend": [Function],
                                                                  },
                                                                  "maybeBroadcastWatch": [Function],
                                                                  "optimisticData": DepTrackingCache {
                                                                    "data": Object {},
                                                                    "depend": [Function],
                                                                  },
                                                                  "silenceBroadcast": false,
                                                                  "storeReader": StoreReader {
                                                                    "executeSelectionSet": [Function],
                                                                    "executeStoreQuery": [Function],
                                                                    "executeSubSelectedArray": [Function],
                                                                    "freezeResults": false,
                                                                  },
                                                                  "storeWriter": StoreWriter {},
                                                                  "typenameDocumentCache": Map {},
                                                                  "watches": Set {},
                                                                },
                                                                "clearStoreCallbacks": Array [],
                                                                "defaultOptions": Object {},
                                                                "disableNetworkFetches": false,
                                                                "link": ApolloLink {
                                                                  "request": [Function],
                                                                },
                                                                "localState": LocalState {
                                                                  "cache": InMemoryCache {
                                                                    "addTypename": true,
                                                                    "cacheKeyRoot": KeyTrie {
                                                                      "weakness": true,
                                                                    },
                                                                    "config": Object {
                                                                      "addTypename": true,
                                                                      "dataIdFromObject": [Function],
                                                                      "fragmentMatcher": HeuristicFragmentMatcher {},
                                                                      "freezeResults": false,
                                                                      "resultCaching": true,
                                                                    },
                                                                    "data": DepTrackingCache {
                                                                      "data": Object {},
                                                                      "depend": [Function],
                                                                    },
                                                                    "maybeBroadcastWatch": [Function],
                                                                    "optimisticData": DepTrackingCache {
                                                                      "data": Object {},
                                                                      "depend": [Function],
                                                                    },
                                                                    "silenceBroadcast": false,
                                                                    "storeReader": StoreReader {
                                                                      "executeSelectionSet": [Function],
                                                                      "executeStoreQuery": [Function],
                                                                      "executeSubSelectedArray": [Function],
                                                                      "freezeResults": false,
                                                                    },
                                                                    "storeWriter": StoreWriter {},
                                                                    "typenameDocumentCache": Map {},
                                                                    "watches": Set {},
                                                                  },
                                                                  "client": [Circular],
                                                                },
                                                                "mutate": [Function],
                                                                "query": [Function],
                                                                "queryDeduplication": true,
                                                                "queryManager": QueryManager {
                                                                  "assumeImmutableResults": false,
                                                                  "clientAwareness": Object {
                                                                    "name": undefined,
                                                                    "version": undefined,
                                                                  },
                                                                  "dataStore": DataStore {
                                                                    "cache": InMemoryCache {
                                                                      "addTypename": true,
                                                                      "cacheKeyRoot": KeyTrie {
                                                                        "weakness": true,
                                                                      },
                                                                      "config": Object {
                                                                        "addTypename": true,
                                                                        "dataIdFromObject": [Function],
                                                                        "fragmentMatcher": HeuristicFragmentMatcher {},
                                                                        "freezeResults": false,
                                                                        "resultCaching": true,
                                                                      },
                                                                      "data": DepTrackingCache {
                                                                        "data": Object {},
                                                                        "depend": [Function],
                                                                      },
                                                                      "maybeBroadcastWatch": [Function],
                                                                      "optimisticData": DepTrackingCache {
                                                                        "data": Object {},
                                                                        "depend": [Function],
                                                                      },
                                                                      "silenceBroadcast": false,
                                                                      "storeReader": StoreReader {
                                                                        "executeSelectionSet": [Function],
                                                                        "executeStoreQuery": [Function],
                                                                        "executeSubSelectedArray": [Function],
                                                                        "freezeResults": false,
                                                                      },
                                                                      "storeWriter": StoreWriter {},
                                                                      "typenameDocumentCache": Map {},
                                                                      "watches": Set {},
                                                                    },
                                                                  },
                                                                  "fetchQueryRejectFns": Map {},
                                                                  "idCounter": 1,
                                                                  "inFlightLinkObservables": Map {},
                                                                  "link": ApolloLink {
                                                                    "request": [Function],
                                                                  },
                                                                  "localState": LocalState {
                                                                    "cache": InMemoryCache {
                                                                      "addTypename": true,
                                                                      "cacheKeyRoot": KeyTrie {
                                                                        "weakness": true,
                                                                      },
                                                                      "config": Object {
                                                                        "addTypename": true,
                                                                        "dataIdFromObject": [Function],
                                                                        "fragmentMatcher": HeuristicFragmentMatcher {},
                                                                        "freezeResults": false,
                                                                        "resultCaching": true,
                                                                      },
                                                                      "data": DepTrackingCache {
                                                                        "data": Object {},
                                                                        "depend": [Function],
                                                                      },
                                                                      "maybeBroadcastWatch": [Function],
                                                                      "optimisticData": DepTrackingCache {
                                                                        "data": Object {},
                                                                        "depend": [Function],
                                                                      },
                                                                      "silenceBroadcast": false,
                                                                      "storeReader": StoreReader {
                                                                        "executeSelectionSet": [Function],
                                                                        "executeStoreQuery": [Function],
                                                                        "executeSubSelectedArray": [Function],
                                                                        "freezeResults": false,
                                                                      },
                                                                      "storeWriter": StoreWriter {},
                                                                      "typenameDocumentCache": Map {},
                                                                      "watches": Set {},
                                                                    },
                                                                    "client": [Circular],
                                                                  },
                                                                  "mutationStore": MutationStore {
                                                                    "store": Object {},
                                                                  },
                                                                  "onBroadcast": [Function],
                                                                  "pollingInfoByQueryId": Map {},
                                                                  "queries": Map {},
                                                                  "queryDeduplication": true,
                                                                  "queryStore": QueryStore {
                                                                    "store": Object {},
                                                                  },
                                                                  "ssrMode": false,
                                                                  "transformCache": WeakMap {},
                                                                },
                                                                "reFetchObservableQueries": [Function],
                                                                "resetStore": [Function],
                                                                "resetStoreCallbacks": Array [],
                                                                "store": DataStore {
                                                                  "cache": InMemoryCache {
                                                                    "addTypename": true,
                                                                    "cacheKeyRoot": KeyTrie {
                                                                      "weakness": true,
                                                                    },
                                                                    "config": Object {
                                                                      "addTypename": true,
                                                                      "dataIdFromObject": [Function],
                                                                      "fragmentMatcher": HeuristicFragmentMatcher {},
                                                                      "freezeResults": false,
                                                                      "resultCaching": true,
                                                                    },
                                                                    "data": DepTrackingCache {
                                                                      "data": Object {},
                                                                      "depend": [Function],
                                                                    },
                                                                    "maybeBroadcastWatch": [Function],
                                                                    "optimisticData": DepTrackingCache {
                                                                      "data": Object {},
                                                                      "depend": [Function],
                                                                    },
                                                                    "silenceBroadcast": false,
                                                                    "storeReader": StoreReader {
                                                                      "executeSelectionSet": [Function],
                                                                      "executeStoreQuery": [Function],
                                                                      "executeSubSelectedArray": [Function],
                                                                      "freezeResults": false,
                                                                    },
                                                                    "storeWriter": StoreWriter {},
                                                                    "typenameDocumentCache": Map {},
                                                                    "watches": Set {},
                                                                  },
                                                                },
                                                                "typeDefs": undefined,
                                                                "version": "2.6.10",
                                                                "watchQuery": [Function],
                                                              },
                                                            },
                                                            "rescheduleJob": [Function],
                                                            "sortBy": [Function],
                                                          }
                                                        }
                                                        targetOrigin="*"
                                                      >
                                                        <ForwardRef>
                                                          <div />
                                                        </ForwardRef>
                                                      </ForwardRef>
                                                    </JobsManagementContainer>
                                                  </article>
                                                </Card>
                                              </section>
                                            </PageSection>
                                          </JobsManagementPage>
                                        </Route>
                                      </Switch>
                                    </ConsolesRoutes>
                                  </main>
                                </div>
                              </Page>
                            </PageLayout>
                          </Route>
                        </Switch>
                      </Router>
                    </MemoryRouter>
                  </JobsManagementContextProvider>
                </ProcessDetailsContextProvider>
              </ProcessListContextProvider>
            </TaskInboxContextProvider>
          </DevUIAppContextProvider>
        </ApolloProvider>
      </ConsolesLayout>
    </RuntimeTools>
  </Router>
</MemoryRouter>
`;
