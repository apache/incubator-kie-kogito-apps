// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DevUILayout tests Snapshot test with default props 1`] = `
<DevUILayout
  apolloClient={
    ApolloClient {
      "__actionHookForDevTools": [MockFunction],
      "__requestRaw": [MockFunction],
      "addResolvers": [MockFunction],
      "clearStore": [MockFunction],
      "extract": [MockFunction],
      "getResolvers": [MockFunction],
      "initQueryManager": [MockFunction],
      "mutate": [MockFunction],
      "onClearStore": [MockFunction],
      "onResetStore": [MockFunction],
      "query": [MockFunction],
      "reFetchObservableQueries": [MockFunction],
      "readFragment": [MockFunction],
      "readQuery": [MockFunction],
      "resetStore": [MockFunction],
      "restore": [MockFunction],
      "setLocalStateFragmentMatcher": [MockFunction],
      "setResolvers": [MockFunction],
      "stop": [MockFunction],
      "subscribe": [MockFunction],
      "watchQuery": [MockFunction],
      "writeData": [MockFunction],
      "writeFragment": [MockFunction],
      "writeQuery": [MockFunction],
    }
  }
  users={
    Array [
      Object {
        "groups": Array [
          "admin",
        ],
        "id": "John snow",
      },
    ]
  }
>
  <ApolloProvider
    client={
      ApolloClient {
        "__actionHookForDevTools": [MockFunction],
        "__requestRaw": [MockFunction],
        "addResolvers": [MockFunction],
        "clearStore": [MockFunction],
        "extract": [MockFunction],
        "getResolvers": [MockFunction],
        "initQueryManager": [MockFunction],
        "mutate": [MockFunction],
        "onClearStore": [MockFunction],
        "onResetStore": [MockFunction],
        "query": [MockFunction],
        "reFetchObservableQueries": [MockFunction],
        "readFragment": [MockFunction],
        "readQuery": [MockFunction],
        "resetStore": [MockFunction],
        "restore": [MockFunction],
        "setLocalStateFragmentMatcher": [MockFunction],
        "setResolvers": [MockFunction],
        "stop": [MockFunction],
        "subscribe": [MockFunction],
        "watchQuery": [MockFunction],
        "writeData": [MockFunction],
        "writeFragment": [MockFunction],
        "writeQuery": [MockFunction],
      }
    }
  >
    <DevUIAppContextProvider
      users={
        Array [
          Object {
            "groups": Array [
              "admin",
            ],
            "id": "John snow",
          },
        ]
      }
    >
      <TaskInboxContextProvider
        apolloClient={
          ApolloClient {
            "__actionHookForDevTools": [MockFunction],
            "__requestRaw": [MockFunction],
            "addResolvers": [MockFunction],
            "clearStore": [MockFunction],
            "extract": [MockFunction],
            "getResolvers": [MockFunction],
            "initQueryManager": [MockFunction],
            "mutate": [MockFunction],
            "onClearStore": [MockFunction],
            "onResetStore": [MockFunction],
            "query": [MockFunction],
            "reFetchObservableQueries": [MockFunction],
            "readFragment": [MockFunction],
            "readQuery": [MockFunction],
            "resetStore": [MockFunction],
            "restore": [MockFunction],
            "setLocalStateFragmentMatcher": [MockFunction],
            "setResolvers": [MockFunction],
            "stop": [MockFunction],
            "subscribe": [MockFunction],
            "watchQuery": [MockFunction],
            "writeData": [MockFunction],
            "writeFragment": [MockFunction],
            "writeQuery": [MockFunction],
          }
        }
      >
        <TaskFormContextProvider>
          <ProcessListContextProvider
            apolloClient={
              ApolloClient {
                "__actionHookForDevTools": [MockFunction],
                "__requestRaw": [MockFunction],
                "addResolvers": [MockFunction],
                "clearStore": [MockFunction],
                "extract": [MockFunction],
                "getResolvers": [MockFunction],
                "initQueryManager": [MockFunction],
                "mutate": [MockFunction],
                "onClearStore": [MockFunction],
                "onResetStore": [MockFunction],
                "query": [MockFunction],
                "reFetchObservableQueries": [MockFunction],
                "readFragment": [MockFunction],
                "readQuery": [MockFunction],
                "resetStore": [MockFunction],
                "restore": [MockFunction],
                "setLocalStateFragmentMatcher": [MockFunction],
                "setResolvers": [MockFunction],
                "stop": [MockFunction],
                "subscribe": [MockFunction],
                "watchQuery": [MockFunction],
                "writeData": [MockFunction],
                "writeFragment": [MockFunction],
                "writeQuery": [MockFunction],
              }
            }
          >
            <ProcessDetailsContextProvider
              apolloClient={
                ApolloClient {
                  "__actionHookForDevTools": [MockFunction],
                  "__requestRaw": [MockFunction],
                  "addResolvers": [MockFunction],
                  "clearStore": [MockFunction],
                  "extract": [MockFunction],
                  "getResolvers": [MockFunction],
                  "initQueryManager": [MockFunction],
                  "mutate": [MockFunction],
                  "onClearStore": [MockFunction],
                  "onResetStore": [MockFunction],
                  "query": [MockFunction],
                  "reFetchObservableQueries": [MockFunction],
                  "readFragment": [MockFunction],
                  "readQuery": [MockFunction],
                  "resetStore": [MockFunction],
                  "restore": [MockFunction],
                  "setLocalStateFragmentMatcher": [MockFunction],
                  "setResolvers": [MockFunction],
                  "stop": [MockFunction],
                  "subscribe": [MockFunction],
                  "watchQuery": [MockFunction],
                  "writeData": [MockFunction],
                  "writeFragment": [MockFunction],
                  "writeQuery": [MockFunction],
                }
              }
            >
              <JobsManagementContextProvider
                apolloClient={
                  ApolloClient {
                    "__actionHookForDevTools": [MockFunction],
                    "__requestRaw": [MockFunction],
                    "addResolvers": [MockFunction],
                    "clearStore": [MockFunction],
                    "extract": [MockFunction],
                    "getResolvers": [MockFunction],
                    "initQueryManager": [MockFunction],
                    "mutate": [MockFunction],
                    "onClearStore": [MockFunction],
                    "onResetStore": [MockFunction],
                    "query": [MockFunction],
                    "reFetchObservableQueries": [MockFunction],
                    "readFragment": [MockFunction],
                    "readQuery": [MockFunction],
                    "resetStore": [MockFunction],
                    "restore": [MockFunction],
                    "setLocalStateFragmentMatcher": [MockFunction],
                    "setResolvers": [MockFunction],
                    "stop": [MockFunction],
                    "subscribe": [MockFunction],
                    "watchQuery": [MockFunction],
                    "writeData": [MockFunction],
                    "writeFragment": [MockFunction],
                    "writeQuery": [MockFunction],
                  }
                }
              >
                <MemoryRouter>
                  <Router
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "key": "19o3j3",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "key": "19o3j3",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                  >
                    <Switch>
                      <Route
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "key": "19o3j3",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/"
                        render={[Function]}
                      >
                        <PageLayout
                          PageNav={
                            <DevUINav
                              pathname="/"
                            />
                          }
                          pageNavOpen={true}
                          withHeader={false}
                        >
                          <MockedComponent />
                        </PageLayout>
                      </Route>
                    </Switch>
                  </Router>
                </MemoryRouter>
              </JobsManagementContextProvider>
            </ProcessDetailsContextProvider>
          </ProcessListContextProvider>
        </TaskFormContextProvider>
      </TaskInboxContextProvider>
    </DevUIAppContextProvider>
  </ApolloProvider>
</DevUILayout>
`;
