// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Process Details Page component tests snapshot testing for error occurance 1`] = `
<ProcessDetailsPage
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  location={
    Object {
      "hash": "",
      "pathname": "/",
      "search": "",
      "state": undefined,
    }
  }
  match={
    Object {
      "isExact": false,
      "params": Object {
        "instanceID": "8035b580-6ae4-4aa8-9ec0-e18e19809e0bc",
      },
      "path": "",
      "url": "",
    }
  }
>
  <div
    data-ouia-component-type="ProcessDetailsPage"
    data-ouia-safe={true}
  >
    <ServerErrors
      error={
        [Error: Network error: No more mocked responses for the query: query getProcessInstanceById($id: String) {
  ProcessInstances(where: {id: {equal: $id}}) {
    id
    processId
    processName
    businessKey
    parentProcessInstanceId
    parentProcessInstance {
      id
      processName
      businessKey
    }
    roles
    variables
    state
    start
    lastUpdate
    end
    addons
    endpoint
    addons
    serviceUrl
    error {
      nodeDefinitionId
      message
    }
    childProcessInstances {
      id
      processName
      businessKey
    }
    nodes {
      id
      nodeId
      name
      enter
      exit
      type
      definitionId
    }
    milestones {
      id
      name
      status
    }
  }
}
, variables: {"id":"8035b580-6ae4-4aa8-9ec0-e18e19809e0bc"}]
      }
      variant="large"
    >
      <MockedComponent />
    </ServerErrors>
  </div>
</ProcessDetailsPage>
`;

exports[`Process Details Page component tests snapshot testing in Active state 1`] = `
<ProcessDetailsPage
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  location={
    Object {
      "hash": "",
      "pathname": "/",
      "search": "",
      "state": Object {
        "filters": Object {
          "businessKey": Array [
            "tra",
          ],
          "status": Array [
            "ACTIVE",
          ],
        },
      },
    }
  }
  match={
    Object {
      "isExact": false,
      "params": Object {
        "instanceID": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
      },
      "path": "",
      "url": "",
    }
  }
>
  <div
    data-ouia-component-type="ProcessDetailsPage"
    data-ouia-safe={true}
  >
    <PageSection
      variant="light"
    >
      <section
        className="pf-c-page__main-section pf-m-light"
      >
        <MockedProcessListModal
          handleModalToggle={[Function]}
          isModalOpen={false}
          modalContent=""
          modalTitle={
            <Title
              headingLevel="h1"
              size="2xl"
            >
              <span>
                
              </span>
            </Title>
          }
          processName="travels"
        />
        <PageTitle
          title="Process Details"
        >
          <Title
            data-ouia-component-type="page-title"
            data-ouia-safe={true}
            headingLevel="h1"
            size="4xl"
          >
            <h1
              className="pf-c-title pf-m-4xl"
              data-ouia-component-type="page-title"
              data-ouia-safe={true}
            >
              Process Details
            </h1>
          </Title>
        </PageTitle>
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Breadcrumb>
                  <nav
                    aria-label="Breadcrumb"
                    className="pf-c-breadcrumb"
                    data-ouia-component-id="OUIA-Generated-Breadcrumb-1"
                    data-ouia-component-type="PF4/Breadcrumb"
                    data-ouia-safe={true}
                  >
                    <ol
                      className="pf-c-breadcrumb__list"
                    >
                      <BreadcrumbItem
                        key=".0"
                        showDivider={false}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <Link
                            to="/"
                          >
                            <LinkAnchor
                              href="/"
                              navigate={[Function]}
                            >
                              <a
                                href="/"
                                onClick={[Function]}
                              >
                                Home
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$0"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances"
                                onClick={[Function]}
                              >
                                Process Instances
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$1"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                                onClick={[Function]}
                              >
                                8035b580-6ae4-4aa8-9ec0-e18e19809e0b
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        isActive={true}
                        key=".2"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          travels
                        </li>
                      </BreadcrumbItem>
                    </ol>
                  </nav>
                </Breadcrumb>
              </div>
            </GridItem>
          </div>
        </Grid>
      </section>
    </PageSection>
    <PageSection>
      <section
        className="pf-c-page__main-section"
      >
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Split
                  className="pf-u-align-items-center"
                  component="div"
                  hasGutter={true}
                >
                  <div
                    className="pf-l-split pf-m-gutter pf-u-align-items-center"
                  >
                    <SplitItem
                      isFilled={true}
                    >
                      <div
                        className="pf-l-split__item pf-m-fill"
                      >
                        <Title
                          className="kogito-management-console--details__title"
                          headingLevel="h2"
                          size="4xl"
                        >
                          <h2
                            className="pf-c-title pf-m-4xl kogito-management-console--details__title"
                          >
                            <ItemDescriptor
                              itemDescription={
                                Object {
                                  "description": null,
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "name": "travels",
                                }
                              }
                            >
                              <MockedComponent />
                            </ItemDescriptor>
                          </h2>
                        </Title>
                      </div>
                    </SplitItem>
                    <SplitItem>
                      <div
                        className="pf-l-split__item"
                      >
                        <OverflowMenu
                          breakpoint="lg"
                        >
                          <div
                            className="pf-c-overflow-menu"
                          >
                            <OverflowMenuContent
                              isPersistent={true}
                            >
                              <div
                                className="pf-c-overflow-menu__content"
                              >
                                <OverflowMenuGroup
                                  groupType="button"
                                  isPersistent={true}
                                >
                                  <div
                                    className="pf-c-overflow-menu__group pf-m-button-group"
                                  >
                                    <Button
                                      className="kogito-management-console--details__buttonMargin"
                                      id="save-button"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      variant="secondary"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label={null}
                                        className="pf-c-button pf-m-secondary kogito-management-console--details__buttonMargin"
                                        data-ouia-component-id="OUIA-Generated-Button-secondary-1"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="save-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        Save
                                      </button>
                                    </Button>
                                    <Button
                                      id="abort-button"
                                      onClick={[Function]}
                                      variant="secondary"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label={null}
                                        className="pf-c-button pf-m-secondary"
                                        data-ouia-component-id="OUIA-Generated-Button-secondary-2"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="abort-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        Abort
                                      </button>
                                    </Button>
                                    <Button
                                      aria-label="Refresh list"
                                      id="refresh-button"
                                      onClick={[Function]}
                                      variant="plain"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label="Refresh list"
                                        className="pf-c-button pf-m-plain"
                                        data-ouia-component-id="OUIA-Generated-Button-plain-1"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="refresh-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        <SyncIcon
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 512 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"
                                            />
                                          </svg>
                                        </SyncIcon>
                                      </button>
                                    </Button>
                                  </div>
                                </OverflowMenuGroup>
                              </div>
                            </OverflowMenuContent>
                          </div>
                        </OverflowMenu>
                      </div>
                    </SplitItem>
                  </div>
                </Split>
              </div>
            </GridItem>
          </div>
        </Grid>
        <Flex
          className="kogito-management-console--details__marginSpaces"
          direction={
            Object {
              "default": "column",
              "lg": "row",
            }
          }
        >
          <div
            className="pf-l-flex pf-m-column pf-m-row-on-lg kogito-management-console--details__marginSpaces"
          >
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-column"
              >
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <FlexItem>
                      <div
                        className=""
                      >
                        <MockedProcessDetailsProcessDiagram
                          svg={
                            <InlineSVG
                              cacheRequests={true}
                              src="<svg version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"800\\" height=\\"300\\" viewBox=\\"0 0 1748 632\\"></svg>"
                              uniquifyIDs={false}
                            />
                          }
                        />
                      </div>
                    </FlexItem>
                  </div>
                </Flex>
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetails
                              data={
                                Object {
                                  "ProcessInstances": Array [
                                    Object {
                                      "addons": Array [
                                        "process-management",
                                      ],
                                      "businessKey": null,
                                      "childProcessInstances": Array [],
                                      "end": null,
                                      "endpoint": "http://localhost:4000",
                                      "error": Object {
                                        "message": "Something went wrong",
                                        "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                      },
                                      "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                      "lastUpdate": "2019-10-22T03:40:44.089Z",
                                      "milestones": Array [
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                          "name": "Milestone 1: Order placed",
                                          "status": "ACTIVE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                          "name": "Milestone 2: Order shipped",
                                          "status": "AVAILABLE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                          "name": "Manager decision",
                                          "status": "COMPLETED",
                                        },
                                      ],
                                      "nodes": Array [
                                        Object {
                                          "definitionId": "StartEvent_1",
                                          "enter": "2019-10-22T04:43:01.135Z",
                                          "exit": "2019-10-22T04:43:01.135Z",
                                          "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                          "name": "StartProcess",
                                          "nodeId": "9",
                                          "type": "StartNode",
                                        },
                                      ],
                                      "parentProcessInstance": null,
                                      "parentProcessInstanceId": null,
                                      "processId": "Travels",
                                      "processName": "travels",
                                      "roles": Array [],
                                      "serviceUrl": "http://localhost:4000",
                                      "start": "2019-10-22T03:40:44.089Z",
                                      "state": "ACTIVE",
                                      "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                    },
                                  ],
                                }
                              }
                              from={
                                Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                  "prev": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                        <FlexItem>
                          <div
                            className=""
                          >
                            <ProcessDetailsMilestones
                              milestones={
                                Array [
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                    "name": "Milestone 1: Order placed",
                                    "status": "ACTIVE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                    "name": "Milestone 2: Order shipped",
                                    "status": "AVAILABLE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                    "name": "Manager decision",
                                    "status": "COMPLETED",
                                  },
                                ]
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetailsProcessVariables
                              displayLabel={true}
                              displaySuccess={false}
                              processInstance={
                                Object {
                                  "addons": Array [
                                    "process-management",
                                  ],
                                  "businessKey": null,
                                  "childProcessInstances": Array [],
                                  "end": null,
                                  "endpoint": "http://localhost:4000",
                                  "error": Object {
                                    "message": "Something went wrong",
                                    "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                  },
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "lastUpdate": "2019-10-22T03:40:44.089Z",
                                  "milestones": Array [
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                      "name": "Milestone 1: Order placed",
                                      "status": "ACTIVE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                      "name": "Milestone 2: Order shipped",
                                      "status": "AVAILABLE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                      "name": "Manager decision",
                                      "status": "COMPLETED",
                                    },
                                  ],
                                  "nodes": Array [
                                    Object {
                                      "definitionId": "StartEvent_1",
                                      "enter": "2019-10-22T04:43:01.135Z",
                                      "exit": "2019-10-22T04:43:01.135Z",
                                      "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                      "name": "StartProcess",
                                      "nodeId": "9",
                                      "type": "StartNode",
                                    },
                                  ],
                                  "parentProcessInstance": null,
                                  "parentProcessInstanceId": null,
                                  "processId": "Travels",
                                  "processName": "travels",
                                  "roles": Array [],
                                  "serviceUrl": "http://localhost:4000",
                                  "start": "2019-10-22T03:40:44.089Z",
                                  "state": "ACTIVE",
                                  "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                }
                              }
                              setDisplayLabel={[Function]}
                              setUpdateJson={[Function]}
                              updateJson={
                                Object {
                                  "flight": Object {
                                    "arrival": "2019-10-30T22:00:00Z[UTC]",
                                    "departure": "2019-10-22T22:00:00Z[UTC]",
                                    "flightNumber": "MX555",
                                  },
                                  "hotel": Object {
                                    "address": Object {
                                      "city": "Berlin",
                                      "country": "Germany",
                                      "street": "street",
                                      "zipCode": "12345",
                                    },
                                    "bookingNumber": "XX-012345",
                                    "name": "Perfect hotel",
                                    "phone": "09876543",
                                  },
                                  "traveller": Object {
                                    "address": Object {
                                      "city": "Karkow",
                                      "country": "Poland",
                                      "street": "palna",
                                      "zipCode": "200300",
                                    },
                                    "email": "rob@redhat.com",
                                    "firstName": "Rob",
                                    "lastName": "Rob",
                                    "nationality": "Polish",
                                  },
                                  "trip": Object {
                                    "begin": "2019-10-22T22:00:00Z[UTC]",
                                    "city": "Berlin",
                                    "country": "Germany",
                                    "end": "2019-10-30T22:00:00Z[UTC]",
                                    "visaRequired": false,
                                  },
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                  </div>
                </Flex>
              </div>
            </Flex>
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
              flex={
                Object {
                  "default": "flex_1",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-flex-1 pf-m-column"
              >
                <FlexItem>
                  <div
                    className=""
                  >
                    <MockedProcessDetailsTimeline
                      data={
                        Object {
                          "addons": Array [
                            "process-management",
                          ],
                          "businessKey": null,
                          "childProcessInstances": Array [],
                          "end": null,
                          "endpoint": "http://localhost:4000",
                          "error": Object {
                            "message": "Something went wrong",
                            "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                          },
                          "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                          "lastUpdate": "2019-10-22T03:40:44.089Z",
                          "milestones": Array [
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                              "name": "Milestone 1: Order placed",
                              "status": "ACTIVE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                              "name": "Milestone 2: Order shipped",
                              "status": "AVAILABLE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                              "name": "Manager decision",
                              "status": "COMPLETED",
                            },
                          ],
                          "nodes": Array [
                            Object {
                              "definitionId": "StartEvent_1",
                              "enter": "2019-10-22T04:43:01.135Z",
                              "exit": "2019-10-22T04:43:01.135Z",
                              "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                              "name": "StartProcess",
                              "nodeId": "9",
                              "type": "StartNode",
                            },
                          ],
                          "parentProcessInstance": null,
                          "parentProcessInstanceId": null,
                          "processId": "Travels",
                          "processName": "travels",
                          "roles": Array [],
                          "serviceUrl": "http://localhost:4000",
                          "start": "2019-10-22T03:40:44.089Z",
                          "state": "ACTIVE",
                          "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                        }
                      }
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 3,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 4,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
                <FlexItem>
                  <div
                    className=""
                  >
                    <ProcessDetailsJobsPanel
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 3,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 4,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
                <FlexItem>
                  <div
                    className=""
                  >
                    <MockedProcessDetailsNodeTrigger
                      processInstanceData={
                        Object {
                          "addons": Array [
                            "process-management",
                          ],
                          "businessKey": null,
                          "childProcessInstances": Array [],
                          "end": null,
                          "endpoint": "http://localhost:4000",
                          "error": Object {
                            "message": "Something went wrong",
                            "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                          },
                          "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                          "lastUpdate": "2019-10-22T03:40:44.089Z",
                          "milestones": Array [
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                              "name": "Milestone 1: Order placed",
                              "status": "ACTIVE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                              "name": "Milestone 2: Order shipped",
                              "status": "AVAILABLE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                              "name": "Manager decision",
                              "status": "COMPLETED",
                            },
                          ],
                          "nodes": Array [
                            Object {
                              "definitionId": "StartEvent_1",
                              "enter": "2019-10-22T04:43:01.135Z",
                              "exit": "2019-10-22T04:43:01.135Z",
                              "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                              "name": "StartProcess",
                              "nodeId": "9",
                              "type": "StartNode",
                            },
                          ],
                          "parentProcessInstance": null,
                          "parentProcessInstanceId": null,
                          "processId": "Travels",
                          "processName": "travels",
                          "roles": Array [],
                          "serviceUrl": "http://localhost:4000",
                          "start": "2019-10-22T03:40:44.089Z",
                          "state": "ACTIVE",
                          "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                        }
                      }
                    />
                  </div>
                </FlexItem>
              </div>
            </Flex>
            <Modal
              actions={
                Array [
                  <Button
                    id="retry-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Retry
                  </Button>,
                  <Button
                    id="discard-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Discard
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Error modal"
              aria-labelledby="Error modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Error
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="retry-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Retry
                      </Button>,
                      <Button
                        id="discard-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Discard
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Error modal"
                  aria-labelledby="Error modal"
                  boxId="pf-modal-part-0"
                  className=""
                  descriptorId="pf-modal-part-2"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--danger-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Error
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-1"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-1"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
            <Modal
              actions={
                Array [
                  <Button
                    id="confirm-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Ok
                  </Button>,
                  <Button
                    id="cancel-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Cancel
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Confirmation modal"
              aria-labelledby="Confirmation modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--warning-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Refresh
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="confirm-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Ok
                      </Button>,
                      <Button
                        id="cancel-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Cancel
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Confirmation modal"
                  aria-labelledby="Confirmation modal"
                  boxId="pf-modal-part-1"
                  className=""
                  descriptorId="pf-modal-part-3"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--warning-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Refresh
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-2"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-2"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
          </div>
        </Flex>
      </section>
    </PageSection>
  </div>
</ProcessDetailsPage>
`;

exports[`Process Details Page component tests snapshot testing in Error state 1`] = `
<ProcessDetailsPage
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  location={
    Object {
      "hash": "",
      "pathname": "/",
      "search": "",
      "state": Object {
        "filters": Object {
          "businessKey": Array [
            "tra",
          ],
          "status": Array [
            "ACTIVE",
          ],
        },
      },
    }
  }
  match={
    Object {
      "isExact": false,
      "params": Object {
        "instanceID": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
      },
      "path": "",
      "url": "",
    }
  }
>
  <div
    data-ouia-component-type="ProcessDetailsPage"
    data-ouia-safe={true}
  >
    <PageSection
      variant="light"
    >
      <section
        className="pf-c-page__main-section pf-m-light"
      >
        <MockedProcessListModal
          handleModalToggle={[Function]}
          isModalOpen={false}
          modalContent=""
          modalTitle={
            <Title
              headingLevel="h1"
              size="2xl"
            >
              <span>
                
              </span>
            </Title>
          }
          processName="travels"
        />
        <PageTitle
          title="Process Details"
        >
          <Title
            data-ouia-component-type="page-title"
            data-ouia-safe={true}
            headingLevel="h1"
            size="4xl"
          >
            <h1
              className="pf-c-title pf-m-4xl"
              data-ouia-component-type="page-title"
              data-ouia-safe={true}
            >
              Process Details
            </h1>
          </Title>
        </PageTitle>
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Breadcrumb>
                  <nav
                    aria-label="Breadcrumb"
                    className="pf-c-breadcrumb"
                    data-ouia-component-id="OUIA-Generated-Breadcrumb-4"
                    data-ouia-component-type="PF4/Breadcrumb"
                    data-ouia-safe={true}
                  >
                    <ol
                      className="pf-c-breadcrumb__list"
                    >
                      <BreadcrumbItem
                        key=".0"
                        showDivider={false}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <Link
                            to="/"
                          >
                            <LinkAnchor
                              href="/"
                              navigate={[Function]}
                            >
                              <a
                                href="/"
                                onClick={[Function]}
                              >
                                Home
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$0"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances"
                                onClick={[Function]}
                              >
                                Process Instances
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$1"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                                onClick={[Function]}
                              >
                                8035b580-6ae4-4aa8-9ec0-e18e19809e0b
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        isActive={true}
                        key=".2"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          travels
                        </li>
                      </BreadcrumbItem>
                    </ol>
                  </nav>
                </Breadcrumb>
              </div>
            </GridItem>
          </div>
        </Grid>
      </section>
    </PageSection>
    <PageSection>
      <section
        className="pf-c-page__main-section"
      >
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Split
                  className="pf-u-align-items-center"
                  component="div"
                  hasGutter={true}
                >
                  <div
                    className="pf-l-split pf-m-gutter pf-u-align-items-center"
                  >
                    <SplitItem
                      isFilled={true}
                    >
                      <div
                        className="pf-l-split__item pf-m-fill"
                      >
                        <Title
                          className="kogito-management-console--details__title"
                          headingLevel="h2"
                          size="4xl"
                        >
                          <h2
                            className="pf-c-title pf-m-4xl kogito-management-console--details__title"
                          >
                            <ItemDescriptor
                              itemDescription={
                                Object {
                                  "description": null,
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "name": "travels",
                                }
                              }
                            >
                              <MockedComponent />
                            </ItemDescriptor>
                          </h2>
                        </Title>
                      </div>
                    </SplitItem>
                    <SplitItem>
                      <div
                        className="pf-l-split__item"
                      >
                        <OverflowMenu
                          breakpoint="lg"
                        >
                          <div
                            className="pf-c-overflow-menu"
                          >
                            <OverflowMenuContent
                              isPersistent={true}
                            >
                              <div
                                className="pf-c-overflow-menu__content"
                              >
                                <OverflowMenuGroup
                                  groupType="button"
                                  isPersistent={true}
                                >
                                  <div
                                    className="pf-c-overflow-menu__group pf-m-button-group"
                                  >
                                    <Button
                                      isDisabled={true}
                                      variant="secondary"
                                    >
                                      <button
                                        aria-disabled={true}
                                        aria-label={null}
                                        className="pf-c-button pf-m-secondary pf-m-disabled"
                                        data-ouia-component-id="OUIA-Generated-Button-secondary-7"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={true}
                                        role={null}
                                        tabIndex={null}
                                        type="button"
                                      >
                                        Abort
                                      </button>
                                    </Button>
                                    <Button
                                      aria-label="Refresh list"
                                      id="refresh-button"
                                      onClick={[Function]}
                                      variant="plain"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label="Refresh list"
                                        className="pf-c-button pf-m-plain"
                                        data-ouia-component-id="OUIA-Generated-Button-plain-4"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="refresh-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        <SyncIcon
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 512 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"
                                            />
                                          </svg>
                                        </SyncIcon>
                                      </button>
                                    </Button>
                                  </div>
                                </OverflowMenuGroup>
                              </div>
                            </OverflowMenuContent>
                          </div>
                        </OverflowMenu>
                      </div>
                    </SplitItem>
                  </div>
                </Split>
              </div>
            </GridItem>
          </div>
        </Grid>
        <Flex
          className="kogito-management-console--details__marginSpaces"
          direction={
            Object {
              "default": "column",
              "lg": "row",
            }
          }
        >
          <div
            className="pf-l-flex pf-m-column pf-m-row-on-lg kogito-management-console--details__marginSpaces"
          >
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-column"
              >
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <FlexItem>
                      <div
                        className=""
                      >
                        <MockedProcessDetailsProcessDiagram
                          svg={
                            <InlineSVG
                              cacheRequests={true}
                              src="<svg version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"800\\" height=\\"300\\" viewBox=\\"0 0 1748 632\\"></svg>"
                              uniquifyIDs={false}
                            />
                          }
                        />
                      </div>
                    </FlexItem>
                  </div>
                </Flex>
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetails
                              data={
                                Object {
                                  "ProcessInstances": Array [
                                    Object {
                                      "addons": Array [],
                                      "businessKey": null,
                                      "childProcessInstances": Array [],
                                      "end": null,
                                      "endpoint": "http://localhost:4000",
                                      "error": Object {
                                        "message": "Something went wrong",
                                        "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                      },
                                      "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                      "lastUpdate": "2019-10-22T03:40:44.089Z",
                                      "milestones": Array [
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                          "name": "Milestone 1: Order placed",
                                          "status": "ACTIVE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                          "name": "Milestone 2: Order shipped",
                                          "status": "AVAILABLE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                          "name": "Manager decision",
                                          "status": "COMPLETED",
                                        },
                                      ],
                                      "nodes": Array [
                                        Object {
                                          "definitionId": "StartEvent_1",
                                          "enter": "2019-10-22T04:43:01.135Z",
                                          "exit": "2019-10-22T04:43:01.135Z",
                                          "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                          "name": "StartProcess",
                                          "nodeId": "9",
                                          "type": "StartNode",
                                        },
                                      ],
                                      "parentProcessInstance": null,
                                      "parentProcessInstanceId": null,
                                      "processId": "Travels",
                                      "processName": "travels",
                                      "roles": Array [],
                                      "serviceUrl": null,
                                      "start": "2019-10-22T03:40:44.089Z",
                                      "state": "ERROR",
                                      "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                    },
                                  ],
                                }
                              }
                              from={
                                Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                  "prev": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                        <FlexItem>
                          <div
                            className=""
                          >
                            <ProcessDetailsMilestones
                              milestones={
                                Array [
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                    "name": "Milestone 1: Order placed",
                                    "status": "ACTIVE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                    "name": "Milestone 2: Order shipped",
                                    "status": "AVAILABLE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                    "name": "Manager decision",
                                    "status": "COMPLETED",
                                  },
                                ]
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetailsProcessVariables
                              displayLabel={true}
                              displaySuccess={false}
                              processInstance={
                                Object {
                                  "addons": Array [],
                                  "businessKey": null,
                                  "childProcessInstances": Array [],
                                  "end": null,
                                  "endpoint": "http://localhost:4000",
                                  "error": Object {
                                    "message": "Something went wrong",
                                    "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                  },
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "lastUpdate": "2019-10-22T03:40:44.089Z",
                                  "milestones": Array [
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                      "name": "Milestone 1: Order placed",
                                      "status": "ACTIVE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                      "name": "Milestone 2: Order shipped",
                                      "status": "AVAILABLE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                      "name": "Manager decision",
                                      "status": "COMPLETED",
                                    },
                                  ],
                                  "nodes": Array [
                                    Object {
                                      "definitionId": "StartEvent_1",
                                      "enter": "2019-10-22T04:43:01.135Z",
                                      "exit": "2019-10-22T04:43:01.135Z",
                                      "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                      "name": "StartProcess",
                                      "nodeId": "9",
                                      "type": "StartNode",
                                    },
                                  ],
                                  "parentProcessInstance": null,
                                  "parentProcessInstanceId": null,
                                  "processId": "Travels",
                                  "processName": "travels",
                                  "roles": Array [],
                                  "serviceUrl": null,
                                  "start": "2019-10-22T03:40:44.089Z",
                                  "state": "ERROR",
                                  "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                }
                              }
                              setDisplayLabel={[Function]}
                              setUpdateJson={[Function]}
                              updateJson={
                                Object {
                                  "flight": Object {
                                    "arrival": "2019-10-30T22:00:00Z[UTC]",
                                    "departure": "2019-10-22T22:00:00Z[UTC]",
                                    "flightNumber": "MX555",
                                  },
                                  "hotel": Object {
                                    "address": Object {
                                      "city": "Berlin",
                                      "country": "Germany",
                                      "street": "street",
                                      "zipCode": "12345",
                                    },
                                    "bookingNumber": "XX-012345",
                                    "name": "Perfect hotel",
                                    "phone": "09876543",
                                  },
                                  "traveller": Object {
                                    "address": Object {
                                      "city": "Karkow",
                                      "country": "Poland",
                                      "street": "palna",
                                      "zipCode": "200300",
                                    },
                                    "email": "rob@redhat.com",
                                    "firstName": "Rob",
                                    "lastName": "Rob",
                                    "nationality": "Polish",
                                  },
                                  "trip": Object {
                                    "begin": "2019-10-22T22:00:00Z[UTC]",
                                    "city": "Berlin",
                                    "country": "Germany",
                                    "end": "2019-10-30T22:00:00Z[UTC]",
                                    "visaRequired": false,
                                  },
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                  </div>
                </Flex>
              </div>
            </Flex>
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
              flex={
                Object {
                  "default": "flex_1",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-flex-1 pf-m-column"
              >
                <FlexItem>
                  <div
                    className=""
                  >
                    <MockedProcessDetailsTimeline
                      data={
                        Object {
                          "addons": Array [],
                          "businessKey": null,
                          "childProcessInstances": Array [],
                          "end": null,
                          "endpoint": "http://localhost:4000",
                          "error": Object {
                            "message": "Something went wrong",
                            "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                          },
                          "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                          "lastUpdate": "2019-10-22T03:40:44.089Z",
                          "milestones": Array [
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                              "name": "Milestone 1: Order placed",
                              "status": "ACTIVE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                              "name": "Milestone 2: Order shipped",
                              "status": "AVAILABLE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                              "name": "Manager decision",
                              "status": "COMPLETED",
                            },
                          ],
                          "nodes": Array [
                            Object {
                              "definitionId": "StartEvent_1",
                              "enter": "2019-10-22T04:43:01.135Z",
                              "exit": "2019-10-22T04:43:01.135Z",
                              "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                              "name": "StartProcess",
                              "nodeId": "9",
                              "type": "StartNode",
                            },
                          ],
                          "parentProcessInstance": null,
                          "parentProcessInstanceId": null,
                          "processId": "Travels",
                          "processName": "travels",
                          "roles": Array [],
                          "serviceUrl": null,
                          "start": "2019-10-22T03:40:44.089Z",
                          "state": "ERROR",
                          "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                        }
                      }
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 6,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 1,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
                <FlexItem>
                  <div
                    className=""
                  >
                    <ProcessDetailsJobsPanel
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 6,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 1,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
              </div>
            </Flex>
            <Modal
              actions={
                Array [
                  <Button
                    id="retry-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Retry
                  </Button>,
                  <Button
                    id="discard-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Discard
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Error modal"
              aria-labelledby="Error modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Error
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="retry-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Retry
                      </Button>,
                      <Button
                        id="discard-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Discard
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Error modal"
                  aria-labelledby="Error modal"
                  boxId="pf-modal-part-6"
                  className=""
                  descriptorId="pf-modal-part-8"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--danger-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Error
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-7"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-7"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
            <Modal
              actions={
                Array [
                  <Button
                    id="confirm-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Ok
                  </Button>,
                  <Button
                    id="cancel-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Cancel
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Confirmation modal"
              aria-labelledby="Confirmation modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--warning-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Refresh
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="confirm-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Ok
                      </Button>,
                      <Button
                        id="cancel-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Cancel
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Confirmation modal"
                  aria-labelledby="Confirmation modal"
                  boxId="pf-modal-part-7"
                  className=""
                  descriptorId="pf-modal-part-9"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--warning-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Refresh
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-8"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-8"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
          </div>
        </Flex>
      </section>
    </PageSection>
  </div>
</ProcessDetailsPage>
`;

exports[`Process Details Page component tests snapshot testing in Suspended state 1`] = `
<ProcessDetailsPage
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  location={
    Object {
      "hash": "",
      "pathname": "/",
      "search": "",
      "state": Object {
        "filters": Object {
          "businessKey": Array [
            "tra",
          ],
          "status": Array [
            "ACTIVE",
          ],
        },
      },
    }
  }
  match={
    Object {
      "isExact": false,
      "params": Object {
        "instanceID": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
      },
      "path": "",
      "url": "",
    }
  }
>
  <div
    data-ouia-component-type="ProcessDetailsPage"
    data-ouia-safe={true}
  >
    <PageSection
      variant="light"
    >
      <section
        className="pf-c-page__main-section pf-m-light"
      >
        <MockedProcessListModal
          handleModalToggle={[Function]}
          isModalOpen={false}
          modalContent=""
          modalTitle={
            <Title
              headingLevel="h1"
              size="2xl"
            >
              <span>
                
              </span>
            </Title>
          }
          processName="travels"
        />
        <PageTitle
          title="Process Details"
        >
          <Title
            data-ouia-component-type="page-title"
            data-ouia-safe={true}
            headingLevel="h1"
            size="4xl"
          >
            <h1
              className="pf-c-title pf-m-4xl"
              data-ouia-component-type="page-title"
              data-ouia-safe={true}
            >
              Process Details
            </h1>
          </Title>
        </PageTitle>
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Breadcrumb>
                  <nav
                    aria-label="Breadcrumb"
                    className="pf-c-breadcrumb"
                    data-ouia-component-id="OUIA-Generated-Breadcrumb-5"
                    data-ouia-component-type="PF4/Breadcrumb"
                    data-ouia-safe={true}
                  >
                    <ol
                      className="pf-c-breadcrumb__list"
                    >
                      <BreadcrumbItem
                        key=".0"
                        showDivider={false}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <Link
                            to="/"
                          >
                            <LinkAnchor
                              href="/"
                              navigate={[Function]}
                            >
                              <a
                                href="/"
                                onClick={[Function]}
                              >
                                Home
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$0"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances"
                                onClick={[Function]}
                              >
                                Process Instances
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        key=".1:$1"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          <Link
                            to={
                              Object {
                                "pathname": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                "state": Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <LinkAnchor
                              href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                              navigate={[Function]}
                            >
                              <a
                                href="/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
                                onClick={[Function]}
                              >
                                8035b580-6ae4-4aa8-9ec0-e18e19809e0b
                              </a>
                            </LinkAnchor>
                          </Link>
                        </li>
                      </BreadcrumbItem>
                      <BreadcrumbItem
                        isActive={true}
                        key=".2"
                        showDivider={true}
                      >
                        <li
                          className="pf-c-breadcrumb__item"
                        >
                          <span
                            className="pf-c-breadcrumb__item-divider"
                          >
                            <AngleRightIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 256 512"
                                width="1em"
                              >
                                <path
                                  d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                />
                              </svg>
                            </AngleRightIcon>
                          </span>
                          travels
                        </li>
                      </BreadcrumbItem>
                    </ol>
                  </nav>
                </Breadcrumb>
              </div>
            </GridItem>
          </div>
        </Grid>
      </section>
    </PageSection>
    <PageSection>
      <section
        className="pf-c-page__main-section"
      >
        <Grid
          hasGutter={true}
          lg={6}
          md={1}
          span={12}
          xl={4}
        >
          <div
            className="pf-l-grid pf-m-all-12-col pf-m-all-1-col-on-md pf-m-all-6-col-on-lg pf-m-all-4-col-on-xl pf-m-gutter"
          >
            <GridItem
              span={12}
            >
              <div
                className="pf-l-grid__item pf-m-12-col"
              >
                <Split
                  className="pf-u-align-items-center"
                  component="div"
                  hasGutter={true}
                >
                  <div
                    className="pf-l-split pf-m-gutter pf-u-align-items-center"
                  >
                    <SplitItem
                      isFilled={true}
                    >
                      <div
                        className="pf-l-split__item pf-m-fill"
                      >
                        <Title
                          className="kogito-management-console--details__title"
                          headingLevel="h2"
                          size="4xl"
                        >
                          <h2
                            className="pf-c-title pf-m-4xl kogito-management-console--details__title"
                          >
                            <ItemDescriptor
                              itemDescription={
                                Object {
                                  "description": null,
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "name": "travels",
                                }
                              }
                            >
                              <MockedComponent />
                            </ItemDescriptor>
                          </h2>
                        </Title>
                      </div>
                    </SplitItem>
                    <SplitItem>
                      <div
                        className="pf-l-split__item"
                      >
                        <OverflowMenu
                          breakpoint="lg"
                        >
                          <div
                            className="pf-c-overflow-menu"
                          >
                            <OverflowMenuContent
                              isPersistent={true}
                            >
                              <div
                                className="pf-c-overflow-menu__content"
                              >
                                <OverflowMenuGroup
                                  groupType="button"
                                  isPersistent={true}
                                >
                                  <div
                                    className="pf-c-overflow-menu__group pf-m-button-group"
                                  >
                                    <Button
                                      className="kogito-management-console--details__buttonMargin"
                                      id="save-button"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      variant="secondary"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label={null}
                                        className="pf-c-button pf-m-secondary kogito-management-console--details__buttonMargin"
                                        data-ouia-component-id="OUIA-Generated-Button-secondary-8"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="save-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        Save
                                      </button>
                                    </Button>
                                    <Button
                                      id="abort-button"
                                      onClick={[Function]}
                                      variant="secondary"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label={null}
                                        className="pf-c-button pf-m-secondary"
                                        data-ouia-component-id="OUIA-Generated-Button-secondary-9"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="abort-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        Abort
                                      </button>
                                    </Button>
                                    <Button
                                      aria-label="Refresh list"
                                      id="refresh-button"
                                      onClick={[Function]}
                                      variant="plain"
                                    >
                                      <button
                                        aria-disabled={false}
                                        aria-label="Refresh list"
                                        className="pf-c-button pf-m-plain"
                                        data-ouia-component-id="OUIA-Generated-Button-plain-5"
                                        data-ouia-component-type="PF4/Button"
                                        data-ouia-safe={true}
                                        disabled={false}
                                        id="refresh-button"
                                        onClick={[Function]}
                                        role={null}
                                        type="button"
                                      >
                                        <SyncIcon
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 512 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z"
                                            />
                                          </svg>
                                        </SyncIcon>
                                      </button>
                                    </Button>
                                  </div>
                                </OverflowMenuGroup>
                              </div>
                            </OverflowMenuContent>
                          </div>
                        </OverflowMenu>
                      </div>
                    </SplitItem>
                  </div>
                </Split>
              </div>
            </GridItem>
          </div>
        </Grid>
        <Flex
          className="kogito-management-console--details__marginSpaces"
          direction={
            Object {
              "default": "column",
              "lg": "row",
            }
          }
        >
          <div
            className="pf-l-flex pf-m-column pf-m-row-on-lg kogito-management-console--details__marginSpaces"
          >
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-column"
              >
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <FlexItem>
                      <div
                        className=""
                      >
                        <MockedProcessDetailsProcessDiagram
                          svg={
                            <InlineSVG
                              cacheRequests={true}
                              src="<svg version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"800\\" height=\\"300\\" viewBox=\\"0 0 1748 632\\"></svg>"
                              uniquifyIDs={false}
                            />
                          }
                        />
                      </div>
                    </FlexItem>
                  </div>
                </Flex>
                <Flex>
                  <div
                    className="pf-l-flex"
                  >
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetails
                              data={
                                Object {
                                  "ProcessInstances": Array [
                                    Object {
                                      "addons": Array [
                                        "process-management",
                                      ],
                                      "businessKey": null,
                                      "childProcessInstances": Array [],
                                      "end": null,
                                      "endpoint": "http://localhost:4000",
                                      "error": Object {
                                        "message": "Something went wrong",
                                        "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                      },
                                      "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                      "lastUpdate": "2019-10-22T03:40:44.089Z",
                                      "milestones": Array [
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                          "name": "Milestone 1: Order placed",
                                          "status": "ACTIVE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                          "name": "Milestone 2: Order shipped",
                                          "status": "AVAILABLE",
                                        },
                                        Object {
                                          "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                          "name": "Manager decision",
                                          "status": "COMPLETED",
                                        },
                                      ],
                                      "nodes": Array [
                                        Object {
                                          "definitionId": "StartEvent_1",
                                          "enter": "2019-10-22T04:43:01.135Z",
                                          "exit": "2019-10-22T04:43:01.135Z",
                                          "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                          "name": "StartProcess",
                                          "nodeId": "9",
                                          "type": "StartNode",
                                        },
                                      ],
                                      "parentProcessInstance": null,
                                      "parentProcessInstanceId": null,
                                      "processId": "Travels",
                                      "processName": "travels",
                                      "roles": Array [],
                                      "serviceUrl": "http://localhost:4000",
                                      "start": "2019-10-22T03:40:44.089Z",
                                      "state": "SUSPENDED",
                                      "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                    },
                                  ],
                                }
                              }
                              from={
                                Object {
                                  "filters": Object {
                                    "businessKey": Array [
                                      "tra",
                                    ],
                                    "status": Array [
                                      "ACTIVE",
                                    ],
                                  },
                                  "prev": "/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                        <FlexItem>
                          <div
                            className=""
                          >
                            <ProcessDetailsMilestones
                              milestones={
                                Array [
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                    "name": "Milestone 1: Order placed",
                                    "status": "ACTIVE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                    "name": "Milestone 2: Order shipped",
                                    "status": "AVAILABLE",
                                  },
                                  Object {
                                    "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                    "name": "Manager decision",
                                    "status": "COMPLETED",
                                  },
                                ]
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                    <Flex
                      direction={
                        Object {
                          "default": "column",
                        }
                      }
                      flex={
                        Object {
                          "default": "flex_1",
                        }
                      }
                    >
                      <div
                        className="pf-l-flex pf-m-flex-1 pf-m-column"
                      >
                        <FlexItem>
                          <div
                            className=""
                          >
                            <MockedProcessDetailsProcessVariables
                              displayLabel={true}
                              displaySuccess={false}
                              processInstance={
                                Object {
                                  "addons": Array [
                                    "process-management",
                                  ],
                                  "businessKey": null,
                                  "childProcessInstances": Array [],
                                  "end": null,
                                  "endpoint": "http://localhost:4000",
                                  "error": Object {
                                    "message": "Something went wrong",
                                    "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                                  },
                                  "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                                  "lastUpdate": "2019-10-22T03:40:44.089Z",
                                  "milestones": Array [
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                                      "name": "Milestone 1: Order placed",
                                      "status": "ACTIVE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                                      "name": "Milestone 2: Order shipped",
                                      "status": "AVAILABLE",
                                    },
                                    Object {
                                      "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                                      "name": "Manager decision",
                                      "status": "COMPLETED",
                                    },
                                  ],
                                  "nodes": Array [
                                    Object {
                                      "definitionId": "StartEvent_1",
                                      "enter": "2019-10-22T04:43:01.135Z",
                                      "exit": "2019-10-22T04:43:01.135Z",
                                      "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                                      "name": "StartProcess",
                                      "nodeId": "9",
                                      "type": "StartNode",
                                    },
                                  ],
                                  "parentProcessInstance": null,
                                  "parentProcessInstanceId": null,
                                  "processId": "Travels",
                                  "processName": "travels",
                                  "roles": Array [],
                                  "serviceUrl": "http://localhost:4000",
                                  "start": "2019-10-22T03:40:44.089Z",
                                  "state": "SUSPENDED",
                                  "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                                }
                              }
                              setDisplayLabel={[Function]}
                              setUpdateJson={[Function]}
                              updateJson={
                                Object {
                                  "flight": Object {
                                    "arrival": "2019-10-30T22:00:00Z[UTC]",
                                    "departure": "2019-10-22T22:00:00Z[UTC]",
                                    "flightNumber": "MX555",
                                  },
                                  "hotel": Object {
                                    "address": Object {
                                      "city": "Berlin",
                                      "country": "Germany",
                                      "street": "street",
                                      "zipCode": "12345",
                                    },
                                    "bookingNumber": "XX-012345",
                                    "name": "Perfect hotel",
                                    "phone": "09876543",
                                  },
                                  "traveller": Object {
                                    "address": Object {
                                      "city": "Karkow",
                                      "country": "Poland",
                                      "street": "palna",
                                      "zipCode": "200300",
                                    },
                                    "email": "rob@redhat.com",
                                    "firstName": "Rob",
                                    "lastName": "Rob",
                                    "nationality": "Polish",
                                  },
                                  "trip": Object {
                                    "begin": "2019-10-22T22:00:00Z[UTC]",
                                    "city": "Berlin",
                                    "country": "Germany",
                                    "end": "2019-10-30T22:00:00Z[UTC]",
                                    "visaRequired": false,
                                  },
                                }
                              }
                            />
                          </div>
                        </FlexItem>
                      </div>
                    </Flex>
                  </div>
                </Flex>
              </div>
            </Flex>
            <Flex
              direction={
                Object {
                  "default": "column",
                }
              }
              flex={
                Object {
                  "default": "flex_1",
                }
              }
            >
              <div
                className="pf-l-flex pf-m-flex-1 pf-m-column"
              >
                <FlexItem>
                  <div
                    className=""
                  >
                    <MockedProcessDetailsTimeline
                      data={
                        Object {
                          "addons": Array [
                            "process-management",
                          ],
                          "businessKey": null,
                          "childProcessInstances": Array [],
                          "end": null,
                          "endpoint": "http://localhost:4000",
                          "error": Object {
                            "message": "Something went wrong",
                            "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                          },
                          "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                          "lastUpdate": "2019-10-22T03:40:44.089Z",
                          "milestones": Array [
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                              "name": "Milestone 1: Order placed",
                              "status": "ACTIVE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                              "name": "Milestone 2: Order shipped",
                              "status": "AVAILABLE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                              "name": "Manager decision",
                              "status": "COMPLETED",
                            },
                          ],
                          "nodes": Array [
                            Object {
                              "definitionId": "StartEvent_1",
                              "enter": "2019-10-22T04:43:01.135Z",
                              "exit": "2019-10-22T04:43:01.135Z",
                              "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                              "name": "StartProcess",
                              "nodeId": "9",
                              "type": "StartNode",
                            },
                          ],
                          "parentProcessInstance": null,
                          "parentProcessInstanceId": null,
                          "processId": "Travels",
                          "processName": "travels",
                          "roles": Array [],
                          "serviceUrl": "http://localhost:4000",
                          "start": "2019-10-22T03:40:44.089Z",
                          "state": "SUSPENDED",
                          "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                        }
                      }
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 4,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 7,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
                <FlexItem>
                  <div
                    className=""
                  >
                    <ProcessDetailsJobsPanel
                      jobsResponse={
                        Object {
                          "data": Object {
                            "Jobs": Array [
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 4,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "69e0a0f5-2360-4174-a8f8-a892a31fc2f9",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "EXECUTED",
                              },
                              Object {
                                "callbackEndpoint": "http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "endpoint": "http://localhost:4000",
                                "executionCounter": 7,
                                "expirationTime": null,
                                "id": "6e74a570-31c8-4020-bd70-19be2cb625f3_0",
                                "lastUpdate": "2020-08-27T03:35:50.147Z",
                                "nodeInstanceId": "2f588da5-a323-4111-9017-3093ef9319d1",
                                "priority": 0,
                                "processId": "travels",
                                "processInstanceId": "5c56eeff-4cbf-3313-a325-4c895e0afced",
                                "repeatInterval": null,
                                "repeatLimit": null,
                                "retries": 0,
                                "rootProcessId": null,
                                "scheduledId": "0",
                                "status": "SCHEDULED",
                              },
                            ],
                          },
                          "loading": false,
                          "refetch": [Function],
                        }
                      }
                    />
                  </div>
                </FlexItem>
                <FlexItem>
                  <div
                    className=""
                  >
                    <MockedProcessDetailsNodeTrigger
                      processInstanceData={
                        Object {
                          "addons": Array [
                            "process-management",
                          ],
                          "businessKey": null,
                          "childProcessInstances": Array [],
                          "end": null,
                          "endpoint": "http://localhost:4000",
                          "error": Object {
                            "message": "Something went wrong",
                            "nodeDefinitionId": "a1e139d5-4e77-48c9-84ae-3459188e90433n",
                          },
                          "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
                          "lastUpdate": "2019-10-22T03:40:44.089Z",
                          "milestones": Array [
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m36",
                              "name": "Milestone 1: Order placed",
                              "status": "ACTIVE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75m66",
                              "name": "Milestone 2: Order shipped",
                              "status": "AVAILABLE",
                            },
                            Object {
                              "id": "27107f38-d888-4edf-9a4f-11b9e6d75i86",
                              "name": "Manager decision",
                              "status": "COMPLETED",
                            },
                          ],
                          "nodes": Array [
                            Object {
                              "definitionId": "StartEvent_1",
                              "enter": "2019-10-22T04:43:01.135Z",
                              "exit": "2019-10-22T04:43:01.135Z",
                              "id": "90e5a337-1c26-4fcc-8ee2-d20e6ba2a1a3",
                              "name": "StartProcess",
                              "nodeId": "9",
                              "type": "StartNode",
                            },
                          ],
                          "parentProcessInstance": null,
                          "parentProcessInstanceId": null,
                          "processId": "Travels",
                          "processName": "travels",
                          "roles": Array [],
                          "serviceUrl": "http://localhost:4000",
                          "start": "2019-10-22T03:40:44.089Z",
                          "state": "SUSPENDED",
                          "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
                        }
                      }
                    />
                  </div>
                </FlexItem>
              </div>
            </Flex>
            <Modal
              actions={
                Array [
                  <Button
                    id="retry-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Retry
                  </Button>,
                  <Button
                    id="discard-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Discard
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Error modal"
              aria-labelledby="Error modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Error
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="retry-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Retry
                      </Button>,
                      <Button
                        id="discard-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Discard
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Error modal"
                  aria-labelledby="Error modal"
                  boxId="pf-modal-part-8"
                  className=""
                  descriptorId="pf-modal-part-10"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--danger-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Error
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-9"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-9"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
            <Modal
              actions={
                Array [
                  <Button
                    id="confirm-button"
                    onClick={[Function]}
                    variant="primary"
                  >
                    Ok
                  </Button>,
                  <Button
                    id="cancel-button"
                    onClick={[Function]}
                    variant="link"
                  >
                    Cancel
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label="Confirmation modal"
              aria-labelledby="Confirmation modal"
              className=""
              hasNoBodyWrapper={false}
              header={
                <React.Fragment>
                  <Title
                    headingLevel="h1"
                    size="2xl"
                  >
                    <InfoCircleIcon
                      className="pf-u-mr-sm"
                      color="var(--pf-global--warning-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    />
                    Refresh
                  </Title>
                </React.Fragment>
              }
              isOpen={false}
              onClose={[Function]}
              ouiaSafe={true}
              showClose={true}
              title=""
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        id="confirm-button"
                        onClick={[Function]}
                        variant="primary"
                      >
                        Ok
                      </Button>,
                      <Button
                        id="cancel-button"
                        onClick={[Function]}
                        variant="link"
                      >
                        Cancel
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label="Confirmation modal"
                  aria-labelledby="Confirmation modal"
                  boxId="pf-modal-part-9"
                  className=""
                  descriptorId="pf-modal-part-11"
                  hasNoBodyWrapper={false}
                  header={
                    <React.Fragment>
                      <Title
                        headingLevel="h1"
                        size="2xl"
                      >
                        <InfoCircleIcon
                          className="pf-u-mr-sm"
                          color="var(--pf-global--warning-color--100)"
                          noVerticalAlign={false}
                          size="sm"
                        />
                        Refresh
                      </Title>
                    </React.Fragment>
                  }
                  isOpen={false}
                  labelId="pf-modal-part-10"
                  onClose={[Function]}
                  ouiaId="OUIA-Generated-Modal-small-10"
                  ouiaSafe={true}
                  showClose={true}
                  title=""
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
          </div>
        </Flex>
      </section>
    </PageSection>
  </div>
</ProcessDetailsPage>
`;
