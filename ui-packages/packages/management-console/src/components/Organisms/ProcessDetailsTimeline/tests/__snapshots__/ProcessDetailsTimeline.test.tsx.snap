// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProcessDetailsTimeline component tests Snapshot testing for completed state 1`] = `
<Card
  data-ouia-component-id="8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
  data-ouia-component-type="timeline"
  data-ouia-safe={true}
>
  <MockedProcessListModal
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <span>
          
        </span>
      </Title>
    }
  />
  <CardHeader>
    <Title
      headingLevel="h3"
      size="xl"
    >
      Timeline
    </Title>
  </CardHeader>
  <CardBody>
    <Stack
      className="kogito-management-console--timeline"
      hasGutter={true}
    >
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="7244ba1b-75ec-4789-8c65-499a0c5b1a6f"
      >
        <SplitItem>
          <Tooltip
            content="Something went wrong"
          >
            <ErrorCircleOIcon
              className="kogito-management-console--timeline-status"
              color="var(--pf-global--danger-color--100)"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              End Event 1
              <span>
                <Tooltip
                  content="Human task"
                >
                  <UserIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--light)"
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="2f588da5-a323-4111-9017-3093ef9319d1"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              Book flight
              <span />
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="6ed7aa17-4bb1-48e3-b34a-5a4c5773dff2"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              StartProcess
              <span>
                <Tooltip
                  content="Human task"
                >
                  <UserIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--light)"
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
    </Stack>
  </CardBody>
  <MockedJobsPanelDetailsModal
    actionType="Job Details"
    handleModalToggle={[Function]}
    isModalOpen={false}
    job={Object {}}
    modalAction={
      Array [
        <Button
          onClick={[Function]}
          variant="primary"
        >
          OK
        </Button>,
      ]
    }
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <InfoCircleIcon
          className="pf-u-mr-sm"
          color="var(--pf-global--info-color--100)"
          noVerticalAlign={false}
          size="sm"
        />
        <span>
          Job Details
        </span>
      </Title>
    }
  />
  <JobsCancelModal
    actionType="Job Cancel"
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={null}
  />
</Card>
`;

exports[`ProcessDetailsTimeline component tests Snapshot testing for no service url 1`] = `
<Card
  data-ouia-component-id="8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
  data-ouia-component-type="timeline"
  data-ouia-safe={true}
>
  <MockedProcessListModal
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <span>
          
        </span>
      </Title>
    }
  />
  <CardHeader>
    <Title
      headingLevel="h3"
      size="xl"
    >
      Timeline
    </Title>
  </CardHeader>
  <CardBody>
    <Stack
      className="kogito-management-console--timeline"
      hasGutter={true}
    >
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="7244ba1b-75ec-4789-8c65-499a0c5b1a6f"
      >
        <SplitItem>
          <Tooltip
            content="Something went wrong"
          >
            <ErrorCircleOIcon
              className="kogito-management-console--timeline-status"
              color="var(--pf-global--danger-color--100)"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              End Event 1
              <span>
                <Tooltip
                  content="Human task"
                >
                  <UserIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--light)"
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="2f588da5-a323-4111-9017-3093ef9319d1"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              Book flight
              <span />
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="6ed7aa17-4bb1-48e3-b34a-5a4c5773dff2"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              StartProcess
              <span>
                <Tooltip
                  content="Human task"
                >
                  <UserIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--light)"
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
    </Stack>
  </CardBody>
  <MockedJobsPanelDetailsModal
    actionType="Job Details"
    handleModalToggle={[Function]}
    isModalOpen={false}
    job={Object {}}
    modalAction={
      Array [
        <Button
          onClick={[Function]}
          variant="primary"
        >
          OK
        </Button>,
      ]
    }
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <InfoCircleIcon
          className="pf-u-mr-sm"
          color="var(--pf-global--info-color--100)"
          noVerticalAlign={false}
          size="sm"
        />
        <span>
          Job Details
        </span>
      </Title>
    }
  />
  <JobsCancelModal
    actionType="Job Cancel"
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={null}
  />
</Card>
`;

exports[`ProcessDetailsTimeline component tests Snapshot testing for service url available 1`] = `
<Card
  data-ouia-component-id="8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
  data-ouia-component-type="timeline"
  data-ouia-safe={true}
>
  <MockedProcessListModal
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <span>
          
        </span>
      </Title>
    }
  />
  <CardHeader>
    <Title
      headingLevel="h3"
      size="xl"
    >
      Timeline
    </Title>
  </CardHeader>
  <CardBody>
    <Stack
      className="kogito-management-console--timeline"
      hasGutter={true}
    >
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="69e0a0f5-2360-4174-a8f8-a892a31fc2f9r25e"
      >
        <SplitItem>
          <Tooltip
            content="Something went wrong"
          >
            <ErrorCircleOIcon
              className="kogito-management-console--timeline-status"
              color="var(--pf-global--danger-color--100)"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              Confirm travel
              <span />
              <Text
                component="small"
              >
                <t
                  ago={false}
                  calendar={false}
                  decimal={false}
                  element={null}
                  filter={[Function]}
                  fromNow={true}
                  interval={60000}
                  local={false}
                  onChange={[Function]}
                  titleFormat=""
                  toNow={false}
                  unit={null}
                  unix={false}
                  utc={false}
                  withTitle={false}
                >
                  <Component />
                </t>
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="69e0a0f5-2360-4174-a8f8-a892a31fc2f9"
      >
        <SplitItem>
          <Tooltip
            content="Something went wrong"
          >
            <ErrorCircleOIcon
              className="kogito-management-console--timeline-status"
              color="var(--pf-global--danger-color--100)"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              Confirm travel
              <span>
                <Tooltip
                  content="Human task"
                >
                  <UserIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--light)"
                  />
                </Tooltip>
                <Tooltip
                  content="Node has job"
                  key="0"
                >
                  <OutlinedClockIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--dark)"
                    onClick={[Function]}
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                <t
                  ago={false}
                  calendar={false}
                  decimal={false}
                  element={null}
                  filter={[Function]}
                  fromNow={true}
                  interval={60000}
                  local={false}
                  onChange={[Function]}
                  titleFormat=""
                  toNow={false}
                  unit={null}
                  unix={false}
                  utc={false}
                  withTitle={false}
                >
                  <Component />
                </t>
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem>
          <Dropdown
            dropdownItems={
              Array [
                <DropdownItem
                  component="button"
                  onClick={[Function]}
                >
                  Retry
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  onClick={[Function]}
                >
                  Skip
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  id="job-details"
                  onClick={[Function]}
                >
                  Job Details
                </DropdownItem>,
              ]
            }
            isOpen={false}
            isPlain={true}
            onSelect={[Function]}
            position="right"
            toggle={
              <KebabToggle
                id="timeline-kebab-toggle-1"
                onToggle={[Function]}
              />
            }
          />
        </SplitItem>
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="7244ba1b-75ec-4789-8c65-499a0c5b1a6f"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              End Event 1
              <span />
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="2f588da5-a323-4111-9017-3093ef9319d1"
      >
        <SplitItem>
          <Tooltip
            content="Active"
          >
            <OnRunningIcon
              className="kogito-management-console--timeline-status"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              Book flight
              <span>
                <Tooltip
                  content="Node has job"
                  key="1"
                >
                  <OutlinedClockIcon
                    className="pf-u-ml-sm"
                    color="var(--pf-global--icon--Color--dark)"
                    onClick={[Function]}
                  />
                </Tooltip>
              </span>
              <Text
                component="small"
              >
                Active
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem>
          <Dropdown
            dropdownItems={
              Array [
                <DropdownItem
                  component="button"
                  onClick={[Function]}
                >
                  Retrigger node
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  onClick={[Function]}
                >
                  Cancel node
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  id="job-details"
                  onClick={[Function]}
                >
                  Job Details
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  id="job-reschedule"
                  onClick={[Function]}
                >
                  Job Reschedule
                </DropdownItem>,
                <DropdownItem
                  component="button"
                  id="job-cancel"
                  onClick={[Function]}
                >
                  Job Cancel
                </DropdownItem>,
              ]
            }
            isOpen={false}
            isPlain={true}
            onSelect={[Function]}
            position="right"
            toggle={
              <KebabToggle
                id="timeline-kebab-toggle-3"
                onToggle={[Function]}
              />
            }
          />
        </SplitItem>
      </Split>
      <Split
        className="kogito-management-console--timeline-item"
        hasGutter={true}
        key="6ed7aa17-4bb1-48e3-b34a-5a4c5773dff2"
      >
        <SplitItem>
          <Tooltip
            content="Completed"
          >
            <CheckCircleIcon
              className="kogito-management-console--timeline-status"
              color="var(--pf-global--success-color--100)"
            />
          </Tooltip>
        </SplitItem>
        <SplitItem
          isFilled={true}
        >
          <TextContent>
            <Text
              component="p"
            >
              StartProcess
              <span />
              <Text
                component="small"
              >
                <t
                  ago={false}
                  calendar={false}
                  decimal={false}
                  element={null}
                  filter={[Function]}
                  fromNow={true}
                  interval={60000}
                  local={false}
                  onChange={[Function]}
                  titleFormat=""
                  toNow={false}
                  unit={null}
                  unix={false}
                  utc={false}
                  withTitle={false}
                >
                  <Component />
                </t>
              </Text>
            </Text>
          </TextContent>
        </SplitItem>
        <SplitItem />
      </Split>
    </Stack>
  </CardBody>
  <MockedJobsPanelDetailsModal
    actionType="Job Details"
    handleModalToggle={[Function]}
    isModalOpen={false}
    job={Object {}}
    modalAction={
      Array [
        <Button
          onClick={[Function]}
          variant="primary"
        >
          OK
        </Button>,
      ]
    }
    modalTitle={
      <Title
        headingLevel="h1"
        size="2xl"
      >
        <InfoCircleIcon
          className="pf-u-mr-sm"
          color="var(--pf-global--info-color--100)"
          noVerticalAlign={false}
          size="sm"
        />
        <span>
          Job Details
        </span>
      </Title>
    }
  />
  <JobsCancelModal
    actionType="Job Cancel"
    handleModalToggle={[Function]}
    isModalOpen={false}
    modalContent=""
    modalTitle={null}
  />
</Card>
`;

exports[`ProcessDetailsTimeline component tests test job actions on nodes test options when there are no jobs 1`] = `
<ProcessDetailsTimeline
  data={
    Object {
      "addons": Array [
        "jobs-management",
        "prometheus-monitoring",
        "process-management",
      ],
      "childProcessInstances": Array [],
      "end": null,
      "endpoint": "http://localhost:4000",
      "error": Object {
        "message": "Something went wrong",
        "nodeDefinitionId": "abc-efg-hij",
      },
      "id": "8035b580-6ae4-4aa8-9ec0-e18e19809e0b",
      "nodes": Array [
        Object {
          "definitionId": "abc-efg-hij",
          "enter": "2019-10-22T04:43:01.144Z",
          "exit": null,
          "id": "7244ba1b-75ec-4789-8c65-499a0c5b1a6f",
          "name": "End Event 1",
          "nodeId": "123-456-789",
          "type": "HumanTaskNode",
        },
        Object {
          "definitionId": "ServiceTask_1",
          "enter": "2019-10-22T04:43:01.144Z",
          "exit": null,
          "id": "2f588da5-a323-4111-9017-3093ef9319d1",
          "name": "Book flight",
          "nodeId": "123-456-789",
          "type": "WorkItemNode",
        },
        Object {
          "definitionId": "StartEvent_1",
          "enter": "2019-10-22T04:43:01.144Z",
          "exit": null,
          "id": "6ed7aa17-4bb1-48e3-b34a-5a4c5773dff2",
          "name": "StartProcess",
          "nodeId": "123-456-789",
          "type": "HumanTaskNode",
        },
      ],
      "parentProcessInstance": null,
      "parentProcessInstanceId": null,
      "processId": "travels",
      "processName": "travels",
      "roles": Array [],
      "rootProcessInstanceId": null,
      "serviceUrl": null,
      "start": "2019-10-22T03:40:44.089Z",
      "state": "COMPLETED",
      "variables": "{\\"flight\\":{\\"arrival\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"departure\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"flightNumber\\":\\"MX555\\"},\\"hotel\\":{\\"address\\":{\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"street\\":\\"street\\",\\"zipCode\\":\\"12345\\"},\\"bookingNumber\\":\\"XX-012345\\",\\"name\\":\\"Perfect hotel\\",\\"phone\\":\\"09876543\\"},\\"trip\\":{\\"begin\\":\\"2019-10-22T22:00:00Z[UTC]\\",\\"city\\":\\"Berlin\\",\\"country\\":\\"Germany\\",\\"end\\":\\"2019-10-30T22:00:00Z[UTC]\\",\\"visaRequired\\":false},\\"traveller\\":{\\"address\\":{\\"city\\":\\"Karkow\\",\\"country\\":\\"Poland\\",\\"street\\":\\"palna\\",\\"zipCode\\":\\"200300\\"},\\"email\\":\\"rob@redhat.com\\",\\"firstName\\":\\"Rob\\",\\"lastName\\":\\"Rob\\",\\"nationality\\":\\"Polish\\"}}",
    }
  }
  jobsResponse={
    Object {
      "data": Object {
        "Jobs": Array [],
      },
      "loading": false,
      "refetch": [MockFunction],
    }
  }
>
  <Card
    data-ouia-component-id="8035b580-6ae4-4aa8-9ec0-e18e19809e0b"
    data-ouia-component-type="timeline"
    data-ouia-safe={true}
  >
    <article
      className="pf-c-card"
      data-ouia-component-id={225}
      data-ouia-component-type="PF4/Card"
      data-ouia-safe={true}
    >
      <MockedProcessListModal
        handleModalToggle={[Function]}
        isModalOpen={false}
        modalContent=""
        modalTitle={
          <Title
            headingLevel="h1"
            size="2xl"
          >
            <span>
              
            </span>
          </Title>
        }
      />
      <CardHeader>
        <div
          className="pf-c-card__header"
        >
          <Title
            headingLevel="h3"
            size="xl"
          >
            <h3
              className="pf-c-title pf-m-xl"
            >
              Timeline
            </h3>
          </Title>
        </div>
      </CardHeader>
      <CardBody>
        <div
          className="pf-c-card__body"
        >
          <Stack
            className="kogito-management-console--timeline"
            hasGutter={true}
          >
            <div
              className="pf-l-stack pf-m-gutter kogito-management-console--timeline"
            >
              <Split
                className="kogito-management-console--timeline-item"
                hasGutter={true}
                key="7244ba1b-75ec-4789-8c65-499a0c5b1a6f"
              >
                <div
                  className="pf-l-split pf-m-gutter kogito-management-console--timeline-item"
                >
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    >
                      <Tooltip
                        content="Something went wrong"
                      >
                        <Popper
                          appendTo={[Function]}
                          distance={15}
                          enableFlip={true}
                          flipBehavior={
                            Array [
                              "top",
                              "right",
                              "bottom",
                              "left",
                              "top",
                              "right",
                              "bottom",
                            ]
                          }
                          isVisible={false}
                          onBlur={[Function]}
                          onDocumentClick={false}
                          onDocumentKeyDown={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onTriggerEnter={[Function]}
                          placement="top"
                          popper={
                            <div
                              className="pf-c-tooltip"
                              id="pf-tooltip-601"
                              role="tooltip"
                              style={
                                Object {
                                  "maxWidth": null,
                                  "opacity": 0,
                                  "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                }
                              }
                            >
                              <TooltipArrow />
                              <TooltipContent
                                isLeftAligned={false}
                              >
                                Something went wrong
                              </TooltipContent>
                            </div>
                          }
                          popperMatchesTriggerWidth={false}
                          positionModifiers={
                            Object {
                              "bottom": "pf-m-bottom",
                              "left": "pf-m-left",
                              "right": "pf-m-right",
                              "top": "pf-m-top",
                            }
                          }
                          trigger={
                            <ErrorCircleOIcon
                              aria-describedby="pf-tooltip-601"
                              className="kogito-management-console--timeline-status"
                              color="var(--pf-global--danger-color--100)"
                            />
                          }
                          zIndex={9999}
                        >
                          <FindRefWrapper
                            onFoundRef={[Function]}
                          >
                            <ErrorCircleOIcon
                              aria-describedby="pf-tooltip-601"
                              className="kogito-management-console--timeline-status"
                              color="var(--pf-global--danger-color--100)"
                            >
                              <MockedIcon />
                            </ErrorCircleOIcon>
                          </FindRefWrapper>
                        </Popper>
                      </Tooltip>
                    </div>
                  </SplitItem>
                  <SplitItem
                    isFilled={true}
                  >
                    <div
                      className="pf-l-split__item pf-m-fill"
                    >
                      <TextContent>
                        <div
                          className="pf-c-content"
                        >
                          <Text
                            component="p"
                          >
                            <p
                              className=""
                              data-pf-content={true}
                            >
                              End Event 1
                              <span>
                                <Tooltip
                                  content="Human task"
                                >
                                  <Popper
                                    appendTo={[Function]}
                                    distance={15}
                                    enableFlip={true}
                                    flipBehavior={
                                      Array [
                                        "top",
                                        "right",
                                        "bottom",
                                        "left",
                                        "top",
                                        "right",
                                        "bottom",
                                      ]
                                    }
                                    isVisible={false}
                                    onBlur={[Function]}
                                    onDocumentClick={false}
                                    onDocumentKeyDown={[Function]}
                                    onFocus={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    onTriggerEnter={[Function]}
                                    placement="top"
                                    popper={
                                      <div
                                        className="pf-c-tooltip"
                                        id="pf-tooltip-602"
                                        role="tooltip"
                                        style={
                                          Object {
                                            "maxWidth": null,
                                            "opacity": 0,
                                            "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                          }
                                        }
                                      >
                                        <TooltipArrow />
                                        <TooltipContent
                                          isLeftAligned={false}
                                        >
                                          Human task
                                        </TooltipContent>
                                      </div>
                                    }
                                    popperMatchesTriggerWidth={false}
                                    positionModifiers={
                                      Object {
                                        "bottom": "pf-m-bottom",
                                        "left": "pf-m-left",
                                        "right": "pf-m-right",
                                        "top": "pf-m-top",
                                      }
                                    }
                                    trigger={
                                      <UserIcon
                                        aria-describedby="pf-tooltip-602"
                                        className="pf-u-ml-sm"
                                        color="var(--pf-global--icon--Color--light)"
                                      />
                                    }
                                    zIndex={9999}
                                  >
                                    <FindRefWrapper
                                      onFoundRef={[Function]}
                                    >
                                      <UserIcon
                                        aria-describedby="pf-tooltip-602"
                                        className="pf-u-ml-sm"
                                        color="var(--pf-global--icon--Color--light)"
                                      >
                                        <MockedIcon />
                                      </UserIcon>
                                    </FindRefWrapper>
                                  </Popper>
                                </Tooltip>
                              </span>
                              <Text
                                component="small"
                              >
                                <small
                                  className=""
                                  data-pf-content={true}
                                >
                                  Active
                                </small>
                              </Text>
                            </p>
                          </Text>
                        </div>
                      </TextContent>
                    </div>
                  </SplitItem>
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    />
                  </SplitItem>
                </div>
              </Split>
              <Split
                className="kogito-management-console--timeline-item"
                hasGutter={true}
                key="2f588da5-a323-4111-9017-3093ef9319d1"
              >
                <div
                  className="pf-l-split pf-m-gutter kogito-management-console--timeline-item"
                >
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    >
                      <Tooltip
                        content="Active"
                      >
                        <Popper
                          appendTo={[Function]}
                          distance={15}
                          enableFlip={true}
                          flipBehavior={
                            Array [
                              "top",
                              "right",
                              "bottom",
                              "left",
                              "top",
                              "right",
                              "bottom",
                            ]
                          }
                          isVisible={false}
                          onBlur={[Function]}
                          onDocumentClick={false}
                          onDocumentKeyDown={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onTriggerEnter={[Function]}
                          placement="top"
                          popper={
                            <div
                              className="pf-c-tooltip"
                              id="pf-tooltip-603"
                              role="tooltip"
                              style={
                                Object {
                                  "maxWidth": null,
                                  "opacity": 0,
                                  "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                }
                              }
                            >
                              <TooltipArrow />
                              <TooltipContent
                                isLeftAligned={false}
                              >
                                Active
                              </TooltipContent>
                            </div>
                          }
                          popperMatchesTriggerWidth={false}
                          positionModifiers={
                            Object {
                              "bottom": "pf-m-bottom",
                              "left": "pf-m-left",
                              "right": "pf-m-right",
                              "top": "pf-m-top",
                            }
                          }
                          trigger={
                            <OnRunningIcon
                              aria-describedby="pf-tooltip-603"
                              className="kogito-management-console--timeline-status"
                            />
                          }
                          zIndex={9999}
                        >
                          <FindRefWrapper
                            onFoundRef={[Function]}
                          >
                            <OnRunningIcon
                              aria-describedby="pf-tooltip-603"
                              className="kogito-management-console--timeline-status"
                            >
                              <MockedIcon />
                            </OnRunningIcon>
                          </FindRefWrapper>
                        </Popper>
                      </Tooltip>
                    </div>
                  </SplitItem>
                  <SplitItem
                    isFilled={true}
                  >
                    <div
                      className="pf-l-split__item pf-m-fill"
                    >
                      <TextContent>
                        <div
                          className="pf-c-content"
                        >
                          <Text
                            component="p"
                          >
                            <p
                              className=""
                              data-pf-content={true}
                            >
                              Book flight
                              <span />
                              <Text
                                component="small"
                              >
                                <small
                                  className=""
                                  data-pf-content={true}
                                >
                                  Active
                                </small>
                              </Text>
                            </p>
                          </Text>
                        </div>
                      </TextContent>
                    </div>
                  </SplitItem>
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    />
                  </SplitItem>
                </div>
              </Split>
              <Split
                className="kogito-management-console--timeline-item"
                hasGutter={true}
                key="6ed7aa17-4bb1-48e3-b34a-5a4c5773dff2"
              >
                <div
                  className="pf-l-split pf-m-gutter kogito-management-console--timeline-item"
                >
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    >
                      <Tooltip
                        content="Active"
                      >
                        <Popper
                          appendTo={[Function]}
                          distance={15}
                          enableFlip={true}
                          flipBehavior={
                            Array [
                              "top",
                              "right",
                              "bottom",
                              "left",
                              "top",
                              "right",
                              "bottom",
                            ]
                          }
                          isVisible={false}
                          onBlur={[Function]}
                          onDocumentClick={false}
                          onDocumentKeyDown={[Function]}
                          onFocus={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onTriggerEnter={[Function]}
                          placement="top"
                          popper={
                            <div
                              className="pf-c-tooltip"
                              id="pf-tooltip-604"
                              role="tooltip"
                              style={
                                Object {
                                  "maxWidth": null,
                                  "opacity": 0,
                                  "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                }
                              }
                            >
                              <TooltipArrow />
                              <TooltipContent
                                isLeftAligned={false}
                              >
                                Active
                              </TooltipContent>
                            </div>
                          }
                          popperMatchesTriggerWidth={false}
                          positionModifiers={
                            Object {
                              "bottom": "pf-m-bottom",
                              "left": "pf-m-left",
                              "right": "pf-m-right",
                              "top": "pf-m-top",
                            }
                          }
                          trigger={
                            <OnRunningIcon
                              aria-describedby="pf-tooltip-604"
                              className="kogito-management-console--timeline-status"
                            />
                          }
                          zIndex={9999}
                        >
                          <FindRefWrapper
                            onFoundRef={[Function]}
                          >
                            <OnRunningIcon
                              aria-describedby="pf-tooltip-604"
                              className="kogito-management-console--timeline-status"
                            >
                              <MockedIcon />
                            </OnRunningIcon>
                          </FindRefWrapper>
                        </Popper>
                      </Tooltip>
                    </div>
                  </SplitItem>
                  <SplitItem
                    isFilled={true}
                  >
                    <div
                      className="pf-l-split__item pf-m-fill"
                    >
                      <TextContent>
                        <div
                          className="pf-c-content"
                        >
                          <Text
                            component="p"
                          >
                            <p
                              className=""
                              data-pf-content={true}
                            >
                              StartProcess
                              <span>
                                <Tooltip
                                  content="Human task"
                                >
                                  <Popper
                                    appendTo={[Function]}
                                    distance={15}
                                    enableFlip={true}
                                    flipBehavior={
                                      Array [
                                        "top",
                                        "right",
                                        "bottom",
                                        "left",
                                        "top",
                                        "right",
                                        "bottom",
                                      ]
                                    }
                                    isVisible={false}
                                    onBlur={[Function]}
                                    onDocumentClick={false}
                                    onDocumentKeyDown={[Function]}
                                    onFocus={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    onTriggerEnter={[Function]}
                                    placement="top"
                                    popper={
                                      <div
                                        className="pf-c-tooltip"
                                        id="pf-tooltip-605"
                                        role="tooltip"
                                        style={
                                          Object {
                                            "maxWidth": null,
                                            "opacity": 0,
                                            "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                          }
                                        }
                                      >
                                        <TooltipArrow />
                                        <TooltipContent
                                          isLeftAligned={false}
                                        >
                                          Human task
                                        </TooltipContent>
                                      </div>
                                    }
                                    popperMatchesTriggerWidth={false}
                                    positionModifiers={
                                      Object {
                                        "bottom": "pf-m-bottom",
                                        "left": "pf-m-left",
                                        "right": "pf-m-right",
                                        "top": "pf-m-top",
                                      }
                                    }
                                    trigger={
                                      <UserIcon
                                        aria-describedby="pf-tooltip-605"
                                        className="pf-u-ml-sm"
                                        color="var(--pf-global--icon--Color--light)"
                                      />
                                    }
                                    zIndex={9999}
                                  >
                                    <FindRefWrapper
                                      onFoundRef={[Function]}
                                    >
                                      <UserIcon
                                        aria-describedby="pf-tooltip-605"
                                        className="pf-u-ml-sm"
                                        color="var(--pf-global--icon--Color--light)"
                                      >
                                        <MockedIcon />
                                      </UserIcon>
                                    </FindRefWrapper>
                                  </Popper>
                                </Tooltip>
                              </span>
                              <Text
                                component="small"
                              >
                                <small
                                  className=""
                                  data-pf-content={true}
                                >
                                  Active
                                </small>
                              </Text>
                            </p>
                          </Text>
                        </div>
                      </TextContent>
                    </div>
                  </SplitItem>
                  <SplitItem>
                    <div
                      className="pf-l-split__item"
                    />
                  </SplitItem>
                </div>
              </Split>
            </div>
          </Stack>
        </div>
      </CardBody>
      <MockedJobsPanelDetailsModal
        actionType="Job Details"
        handleModalToggle={[Function]}
        isModalOpen={false}
        job={Object {}}
        modalAction={
          Array [
            <Button
              onClick={[Function]}
              variant="primary"
            >
              OK
            </Button>,
          ]
        }
        modalTitle={
          <Title
            headingLevel="h1"
            size="2xl"
          >
            <InfoCircleIcon
              className="pf-u-mr-sm"
              color="var(--pf-global--info-color--100)"
              noVerticalAlign={false}
              size="sm"
            />
            <span>
              Job Details
            </span>
          </Title>
        }
      />
      <JobsCancelModal
        actionType="Job Cancel"
        handleModalToggle={[Function]}
        isModalOpen={false}
        modalContent=""
        modalTitle={null}
      />
    </article>
  </Card>
</ProcessDetailsTimeline>
`;
