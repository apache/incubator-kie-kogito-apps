// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProcessForm Test Envelope not connected 1`] = `
<ProcessForm
  driver={
    Object {
      "getCustomForm": [MockFunction],
      "getProcessFormSchema": [MockFunction],
      "startProcess": [MockFunction],
    }
  }
  isEnvelopeConnectedToChannel={false}
  processDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "processName": "process1",
    }
  }
  targetOrigin="http://localhost:4000/hiring"
>
  <Bullseye>
    <div
      className="pf-l-bullseye"
    >
      <KogitoSpinner
        ouiaId="process-form-loading"
        spinnerText="Loading process forms..."
      >
        <EmptyState
          data-ouia-component-id="process-form-loading"
          data-ouia-component-type="kogito-spinner"
          data-ouia-safe={true}
        >
          <div
            className="pf-c-empty-state"
            data-ouia-component-id="process-form-loading"
            data-ouia-component-type="kogito-spinner"
            data-ouia-safe={true}
          >
            <div
              className="pf-c-empty-state__content"
            >
              <EmptyStateIcon
                component={[Function]}
                variant="container"
              >
                <div
                  className="pf-c-empty-state__icon"
                >
                  <Spinner>
                    <span
                      aria-label="Contents"
                      aria-valuetext="Loading..."
                      className="pf-c-spinner pf-m-xl"
                      role="progressbar"
                    >
                      <span
                        className="pf-c-spinner__clipper"
                      />
                      <span
                        className="pf-c-spinner__lead-ball"
                      />
                      <span
                        className="pf-c-spinner__tail-ball"
                      />
                    </span>
                  </Spinner>
                </div>
              </EmptyStateIcon>
              <Title
                headingLevel="h3"
                size="lg"
              >
                <h3
                  className="pf-c-title pf-m-lg"
                  data-ouia-component-id="OUIA-Generated-Title-1"
                  data-ouia-component-type="PF4/Title"
                  data-ouia-safe={true}
                >
                  Loading process forms...
                </h3>
              </Title>
            </div>
          </div>
        </EmptyState>
      </KogitoSpinner>
    </div>
  </Bullseye>
</ProcessForm>
`;

exports[`ProcessForm Test Process Custom Form rendering 1`] = `
<ProcessForm
  driver={
    Object {
      "getCustomForm": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "endpoint": "http://localhost:4000/hiring",
              "processName": "process1",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getProcessFormSchema": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "endpoint": "http://localhost:4000/hiring",
              "processName": "process1",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "startProcess": [MockFunction],
    }
  }
  isEnvelopeConnectedToChannel={true}
  processDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "processName": "process1",
    }
  }
  targetOrigin="http://localhost:4000/hiring"
>
  <MockedCustomProcessFormDisplayer
    customForm={
      <div>
        form mock
      </div>
    }
    data-ouia-component-type="process-form"
    data-ouia-safe={true}
    driver={
      Object {
        "getCustomForm": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "endpoint": "http://localhost:4000/hiring",
                "processName": "process1",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "getProcessFormSchema": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "endpoint": "http://localhost:4000/hiring",
                "processName": "process1",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "startProcess": [MockFunction],
      }
    }
    schema={
      Object {
        "properties": Object {
          "flight": Object {
            "properties": Object {
              "arrival": Object {
                "format": "date-time",
                "type": "string",
              },
              "departure": Object {
                "format": "date-time",
                "type": "string",
              },
              "flightNumber": Object {
                "type": "string",
              },
              "gate": Object {
                "type": "string",
              },
              "seat": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
          "hotel": Object {
            "properties": Object {
              "address": Object {
                "properties": Object {
                  "city": Object {
                    "type": "string",
                  },
                  "country": Object {
                    "type": "string",
                  },
                  "street": Object {
                    "type": "string",
                  },
                  "zipCode": Object {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "bookingNumber": Object {
                "type": "string",
              },
              "name": Object {
                "type": "string",
              },
              "phone": Object {
                "type": "string",
              },
              "room": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
      }
    }
    targetOrigin="http://localhost:4000/hiring"
  />
</ProcessForm>
`;

exports[`ProcessForm Test Process Form rendering 1`] = `
<ProcessForm
  driver={
    Object {
      "getCustomForm": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "endpoint": "http://localhost:4000/hiring",
              "processName": "process1",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getProcessFormSchema": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "endpoint": "http://localhost:4000/hiring",
              "processName": "process1",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "startProcess": [MockFunction],
    }
  }
  isEnvelopeConnectedToChannel={true}
  processDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "processName": "process1",
    }
  }
  targetOrigin="http://localhost:4000/hiring"
>
  <div
    data-ouia-component-type="process-form"
    data-ouia-safe={true}
  >
    <FormRenderer
      formActions={
        Array [
          Object {
            "name": "Start",
          },
        ]
      }
      formSchema={
        Object {
          "properties": Object {
            "flight": Object {
              "properties": Object {
                "arrival": Object {
                  "format": "date-time",
                  "type": "string",
                },
                "departure": Object {
                  "format": "date-time",
                  "type": "string",
                },
                "flightNumber": Object {
                  "type": "string",
                },
                "gate": Object {
                  "type": "string",
                },
                "seat": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
            "hotel": Object {
              "properties": Object {
                "address": Object {
                  "properties": Object {
                    "city": Object {
                      "type": "string",
                    },
                    "country": Object {
                      "type": "string",
                    },
                    "street": Object {
                      "type": "string",
                    },
                    "zipCode": Object {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "bookingNumber": Object {
                  "type": "string",
                },
                "name": Object {
                  "type": "string",
                },
                "phone": Object {
                  "type": "string",
                },
                "room": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        }
      }
      model={Object {}}
      onSubmit={[Function]}
      readOnly={false}
    >
      <MockedComponent />
    </FormRenderer>
  </div>
</ProcessForm>
`;
