// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormEditor test Test execute option - configuration 1`] = `
<FormDetailsContextProvider>
  <ForwardRef
    code="<React.FC><div><span>1</span></div></React.FC>"
    formContent={
      Object {
        "configuration": Object {
          "resources": Object {
            "scripts": Object {},
            "styles": Object {},
          },
          "schema": "json schema",
        },
        "formInfo": Object {
          "lastModified": 2020-07-11T18:30:00.000Z,
          "name": "form1",
          "type": "HTML",
        },
        "source": "<div><span>1</span></div>",
      }
    }
    formType="tsx"
    isSource={false}
    saveFormContent={[MockFunction]}
    setFormContent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "configuration": Object {
                "resources": Object {
                  "scripts": Object {
                    "bootstrap.min.js": "https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js",
                    "jquery.js": "https://code.jquery.com/jquery-3.2.1.slim.min.js",
                    "popper.js": "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js",
                  },
                  "styles": Object {
                    "bootstrap.min.css": " https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css",
                  },
                },
                "schema": "json schema",
              },
              "formInfo": Object {
                "lastModified": 2020-07-11T18:30:00.000Z,
                "name": "form1",
                "type": "HTML",
              },
              "source": "<div><span>1</span></div>",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <div
      data-ouia-component-type="form-view"
      data-ouia-safe={true}
    >
      <CodeEditor
        code="<React.FC><div><span>1</span></div></React.FC>"
        customControls={
          <React.Fragment>
            <CodeEditorControl
              aria-label="Execute form"
              icon={
                <PlayIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Execute form"
            />
            <CodeEditorControl
              aria-label="Undo changes"
              icon={
                <UndoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Undo changes"
            />
            <CodeEditorControl
              aria-label="Redo changes"
              icon={
                <RedoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Redo changes"
            />
            <CodeEditorControl
              aria-label="Save form"
              icon={
                <SaveIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Save form"
            />
          </React.Fragment>
        }
        height="700px"
        isCopyEnabled={true}
        isDarkTheme={false}
        isLanguageLabelVisible={true}
        isLineNumbersVisible={true}
        isMinimapVisible={false}
        isReadOnly={false}
        onEditorDidMount={[Function]}
      >
        <MockedComponent />
      </CodeEditor>
    </div>
  </ForwardRef>
</FormDetailsContextProvider>
`;

exports[`FormEditor test Test execute option - source content 1`] = `
<FormDetailsContextProvider>
  <ForwardRef
    code="<React.FC><div><span>1</span></div></React.FC>"
    formContent={
      Object {
        "configuration": Object {
          "resources": Object {
            "scripts": Object {},
            "styles": Object {},
          },
          "schema": "json schema",
        },
        "formInfo": Object {
          "lastModified": 2020-07-11T18:30:00.000Z,
          "name": "form1",
          "type": "HTML",
        },
        "source": "<div><span>1</span></div>",
      }
    }
    formType="tsx"
    isSource={true}
    saveFormContent={[MockFunction]}
    setFormContent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "configuration": Object {
                "resources": Object {
                  "scripts": Object {},
                  "styles": Object {},
                },
                "schema": "json schema",
              },
              "formInfo": Object {
                "lastModified": 2020-07-11T18:30:00.000Z,
                "name": "form1",
                "type": "HTML",
              },
              "source": "<React.FC><div><span>2</span></div></React.FC>",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <div
      data-ouia-component-type="form-view"
      data-ouia-safe={true}
    >
      <CodeEditor
        code="<React.FC><div><span>1</span></div></React.FC>"
        customControls={
          <React.Fragment>
            <CodeEditorControl
              aria-label="Execute form"
              icon={
                <PlayIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Execute form"
            />
            <CodeEditorControl
              aria-label="Undo changes"
              icon={
                <UndoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Undo changes"
            />
            <CodeEditorControl
              aria-label="Redo changes"
              icon={
                <RedoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Redo changes"
            />
            <CodeEditorControl
              aria-label="Save form"
              icon={
                <SaveIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Save form"
            />
          </React.Fragment>
        }
        height="700px"
        isCopyEnabled={true}
        isDarkTheme={false}
        isLanguageLabelVisible={true}
        isLineNumbersVisible={true}
        isMinimapVisible={false}
        isReadOnly={false}
        language="typescript"
        onEditorDidMount={[Function]}
      >
        <MockedComponent />
      </CodeEditor>
    </div>
  </ForwardRef>
</FormDetailsContextProvider>
`;

exports[`FormEditor test Test save option 1`] = `
<FormDetailsContextProvider>
  <ForwardRef
    code="<React.FC><div><span>1</span></div></React.FC>"
    formContent={
      Object {
        "configuration": Object {
          "resources": Object {
            "scripts": Object {},
            "styles": Object {},
          },
          "schema": "json schema",
        },
        "formInfo": Object {
          "lastModified": 2020-07-11T18:30:00.000Z,
          "name": "form1",
          "type": "HTML",
        },
        "source": "<div><span>1</span></div>",
      }
    }
    formType="tsx"
    isSource={true}
    saveFormContent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "configuration": Object {
                "resources": Object {
                  "scripts": Object {},
                  "styles": Object {},
                },
                "schema": "json schema",
              },
              "formInfo": Object {
                "lastModified": 2020-07-11T18:30:00.000Z,
                "name": "form1",
                "type": "HTML",
              },
              "source": "<div><span>1</span></div>",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setFormContent={[MockFunction]}
  >
    <div
      data-ouia-component-type="form-view"
      data-ouia-safe={true}
    >
      <CodeEditor
        code="<React.FC><div><span>1</span></div></React.FC>"
        customControls={
          <React.Fragment>
            <CodeEditorControl
              aria-label="Execute form"
              icon={
                <PlayIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Execute form"
            />
            <CodeEditorControl
              aria-label="Undo changes"
              icon={
                <UndoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Undo changes"
            />
            <CodeEditorControl
              aria-label="Redo changes"
              icon={
                <RedoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Redo changes"
            />
            <CodeEditorControl
              aria-label="Save form"
              icon={
                <SaveIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Save form"
            />
          </React.Fragment>
        }
        height="700px"
        isCopyEnabled={true}
        isDarkTheme={false}
        isLanguageLabelVisible={true}
        isLineNumbersVisible={true}
        isMinimapVisible={false}
        isReadOnly={false}
        language="typescript"
        onEditorDidMount={[Function]}
      >
        <MockedComponent />
      </CodeEditor>
    </div>
  </ForwardRef>
</FormDetailsContextProvider>
`;

exports[`FormEditor test call refresh 1`] = `
<ForwardRef
  code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  isConfig={true}
  saveFormContent={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Redo changes"
          />
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Save form"
          />
        </React.Fragment>
      }
      height="700px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="json"
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render config 1`] = `
<ForwardRef
  code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  isConfig={true}
  saveFormContent={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Redo changes"
          />
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Save form"
          />
        </React.Fragment>
      }
      height="700px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="json"
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render source - html 1`] = `
<ForwardRef
  code="<div><span>1</span></div>"
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  formType="html"
  isSource={true}
  saveFormContent={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="<div><span>1</span></div>"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Redo changes"
          />
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            toolTipText="Save form"
          />
        </React.Fragment>
      }
      height="700px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="html"
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render source - tsx 1`] = `
<FormDetailsContextProvider>
  <ForwardRef
    code="<React.FC><div><span>1</span></div></React.FC>"
    formContent={
      Object {
        "configuration": Object {
          "resources": Object {
            "scripts": Object {},
            "styles": Object {},
          },
          "schema": "json schema",
        },
        "formInfo": Object {
          "lastModified": 2020-07-11T18:30:00.000Z,
          "name": "form1",
          "type": "HTML",
        },
        "source": "<div><span>1</span></div>",
      }
    }
    formType="tsx"
    isSource={true}
    saveFormContent={[MockFunction]}
    setFormContent={[MockFunction]}
  >
    <div
      data-ouia-component-type="form-view"
      data-ouia-safe={true}
    >
      <CodeEditor
        code="<React.FC><div><span>1</span></div></React.FC>"
        customControls={
          <React.Fragment>
            <CodeEditorControl
              aria-label="Execute form"
              icon={
                <PlayIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Execute form"
            />
            <CodeEditorControl
              aria-label="Undo changes"
              icon={
                <UndoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Undo changes"
            />
            <CodeEditorControl
              aria-label="Redo changes"
              icon={
                <RedoIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Redo changes"
            />
            <CodeEditorControl
              aria-label="Save form"
              icon={
                <SaveIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                />
              }
              onClick={[Function]}
              toolTipText="Save form"
            />
          </React.Fragment>
        }
        height="700px"
        isCopyEnabled={true}
        isDarkTheme={false}
        isLanguageLabelVisible={true}
        isLineNumbersVisible={true}
        isMinimapVisible={false}
        isReadOnly={false}
        language="typescript"
        onEditorDidMount={[Function]}
      >
        <MockedComponent />
      </CodeEditor>
    </div>
  </ForwardRef>
</FormDetailsContextProvider>
`;
