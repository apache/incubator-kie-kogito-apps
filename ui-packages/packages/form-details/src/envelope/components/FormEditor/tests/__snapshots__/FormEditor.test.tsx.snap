// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormEditor test call refresh 1`] = `
<ForwardRef
  code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
  contentChange={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span><span>2</span></div>",
    }
  }
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  isConfig={true}
  saveFormContent={[MockFunction]}
  setContentChange={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Save form"
          />
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Redo changes"
          />
        </React.Fragment>
      }
      height="800px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="json"
      onChange={[Function]}
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render config 1`] = `
<ForwardRef
  code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
  contentChange={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span><span>2</span></div>",
    }
  }
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  isConfig={true}
  saveFormContent={[MockFunction]}
  setContentChange={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="{\\"1\\":\\"1\\",\\"2\\":\\"2\\"}"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Save form"
          />
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Redo changes"
          />
        </React.Fragment>
      }
      height="800px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="json"
      onChange={[Function]}
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render source - html 1`] = `
<ForwardRef
  code="<div><span>1</span></div>"
  contentChange={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span><span>2</span></div>",
    }
  }
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  formType="html"
  isSource={true}
  saveFormContent={[MockFunction]}
  setContentChange={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="<div><span>1</span></div>"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Save form"
          />
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Redo changes"
          />
        </React.Fragment>
      }
      height="800px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="html"
      onChange={[Function]}
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;

exports[`FormEditor test render source - tsx 1`] = `
<ForwardRef
  code="<React.FC><div><span>1</span></div></React.FC>"
  contentChange={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span><span>2</span></div>",
    }
  }
  formContent={
    Object {
      "configuration": Object {
        "resources": Object {
          "scripts": Object {},
          "styles": Object {},
        },
        "schema": "json schema",
      },
      "formInfo": Object {
        "lastModified": 2020-07-11T18:30:00.000Z,
        "name": "form1",
        "type": "HTML",
      },
      "source": "<div><span>1</span></div>",
    }
  }
  formType="tsx"
  isSource={true}
  saveFormContent={[MockFunction]}
  setContentChange={[MockFunction]}
  setFormContent={[MockFunction]}
>
  <div
    data-ouia-component-type="form-view"
    data-ouia-safe={true}
  >
    <CodeEditor
      code="<React.FC><div><span>1</span></div></React.FC>"
      customControls={
        <React.Fragment>
          <CodeEditorControl
            aria-label="Save form"
            icon={
              <SaveIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Save form"
          />
          <CodeEditorControl
            aria-label="Execute form"
            icon={
              <PlayIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Execute form"
          />
          <CodeEditorControl
            aria-label="Undo changes"
            icon={
              <UndoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Undo changes"
          />
          <CodeEditorControl
            aria-label="Redo changes"
            icon={
              <RedoIcon
                className="pf-global--primary-color--100"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            isVisible={true}
            onClick={[Function]}
            toolTipText="Redo changes"
          />
        </React.Fragment>
      }
      height="800px"
      isCopyEnabled={true}
      isDarkTheme={false}
      isLanguageLabelVisible={true}
      isLineNumbersVisible={true}
      isMinimapVisible={false}
      isReadOnly={false}
      language="typescript"
      onChange={[Function]}
      onEditorDidMount={[Function]}
    >
      <MockedComponent />
    </CodeEditor>
  </div>
</ForwardRef>
`;
