// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomWorkflowForm Test Custom Workflow Form - loading 1`] = `
<CustomWorkflowForm
  customFormSchema={
    Object {
      "description": "Schema for expression test",
      "properties": Object {
        "numbers": Object {
          "description": "The array of numbers to be operated with",
          "items": Object {
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      },
      "required": Array [
        "numbers",
      ],
      "title": "Expression",
      "type": "object",
    }
  }
  driver={
    Object {
      "getCustomWorkflowSchema": [MockFunction],
      "resetBusinessKey": [MockFunction],
      "startWorkflow": [MockFunction] {
        "calls": Array [
          Array [
            "http://localhost:4000/hiring",
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
    }
  }
  workflowDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "workflowName": "workflow1",
    }
  }
>
  <Bullseye>
    <div
      className="pf-l-bullseye"
    >
      <KogitoSpinner
        ouiaId="custom-workflow-form-loading"
        spinnerText="Starting workflow..."
      >
        <EmptyState
          data-ouia-component-id="custom-workflow-form-loading"
          data-ouia-component-type="kogito-spinner"
          data-ouia-safe={true}
        >
          <div
            className="pf-c-empty-state"
            data-ouia-component-id="custom-workflow-form-loading"
            data-ouia-component-type="kogito-spinner"
            data-ouia-safe={true}
          >
            <div
              className="pf-c-empty-state__content"
            >
              <EmptyStateIcon
                component={[Function]}
                variant="container"
              >
                <div
                  className="pf-c-empty-state__icon"
                >
                  <Spinner>
                    <span
                      aria-valuetext="Loading..."
                      className="pf-c-spinner pf-m-xl"
                      role="progressbar"
                    >
                      <span
                        className="pf-c-spinner__clipper"
                      />
                      <span
                        className="pf-c-spinner__lead-ball"
                      />
                      <span
                        className="pf-c-spinner__tail-ball"
                      />
                    </span>
                  </Spinner>
                </div>
              </EmptyStateIcon>
              <Title
                headingLevel="h3"
                size="lg"
              >
                <h3
                  className="pf-c-title pf-m-lg"
                  data-ouia-component-id="OUIA-Generated-Title-2"
                  data-ouia-component-type="PF4/Title"
                  data-ouia-safe={true}
                >
                  Starting workflow...
                </h3>
              </Title>
            </div>
          </div>
        </EmptyState>
      </KogitoSpinner>
    </div>
  </Bullseye>
</CustomWorkflowForm>
`;

exports[`CustomWorkflowForm Test Custom Workflow Form - loading 2`] = `
<CustomWorkflowForm
  customFormSchema={
    Object {
      "description": "Schema for expression test",
      "properties": Object {
        "numbers": Object {
          "description": "The array of numbers to be operated with",
          "items": Object {
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      },
      "required": Array [
        "numbers",
      ],
      "title": "Expression",
      "type": "object",
    }
  }
  driver={
    Object {
      "getCustomWorkflowSchema": [MockFunction],
      "resetBusinessKey": [MockFunction],
      "startWorkflow": [MockFunction] {
        "calls": Array [
          Array [
            "http://localhost:4000/hiring",
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
    }
  }
  workflowDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "workflowName": "workflow1",
    }
  }
>
  <div
    data-ouia-component-type="custom-workflow-form"
    data-ouia-safe={true}
  >
    <FormRenderer
      formActions={
        Array [
          Object {
            "name": "Start",
          },
          Object {
            "actionType": "reset",
            "execute": [Function],
            "name": "Reset",
          },
        ]
      }
      formSchema={
        Object {
          "description": "Schema for expression test",
          "properties": Object {
            "numbers": Object {
              "description": "The array of numbers to be operated with",
              "items": Object {
                "properties": Object {
                  "x": Object {
                    "type": "number",
                  },
                  "y": Object {
                    "type": "number",
                  },
                },
                "type": "object",
              },
              "type": "array",
            },
          },
          "required": Array [
            "numbers",
          ],
          "title": "Expression",
          "type": "object",
        }
      }
      onSubmit={[Function]}
      readOnly={false}
    >
      <MockedComponent />
    </FormRenderer>
  </div>
</CustomWorkflowForm>
`;

exports[`CustomWorkflowForm Test Custom Workflow Form rendering 1`] = `
<CustomWorkflowForm
  customFormSchema={
    Object {
      "description": "Schema for expression test",
      "properties": Object {
        "numbers": Object {
          "description": "The array of numbers to be operated with",
          "items": Object {
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      },
      "required": Array [
        "numbers",
      ],
      "title": "Expression",
      "type": "object",
    }
  }
  driver={
    Object {
      "getCustomWorkflowSchema": [MockFunction],
      "resetBusinessKey": [MockFunction],
      "startWorkflow": [MockFunction],
    }
  }
  workflowDefinition={
    Object {
      "endpoint": "http://localhost:4000/hiring",
      "workflowName": "workflow1",
    }
  }
>
  <div
    data-ouia-component-type="custom-workflow-form"
    data-ouia-safe={true}
  >
    <FormRenderer
      formActions={
        Array [
          Object {
            "name": "Start",
          },
          Object {
            "actionType": "reset",
            "execute": [Function],
            "name": "Reset",
          },
        ]
      }
      formSchema={
        Object {
          "description": "Schema for expression test",
          "properties": Object {
            "numbers": Object {
              "description": "The array of numbers to be operated with",
              "items": Object {
                "properties": Object {
                  "x": Object {
                    "type": "number",
                  },
                  "y": Object {
                    "type": "number",
                  },
                },
                "type": "object",
              },
              "type": "array",
            },
          },
          "required": Array [
            "numbers",
          ],
          "title": "Expression",
          "type": "object",
        }
      }
      onSubmit={[Function]}
      readOnly={false}
    >
      <MockedComponent />
    </FormRenderer>
  </div>
</CustomWorkflowForm>
`;
