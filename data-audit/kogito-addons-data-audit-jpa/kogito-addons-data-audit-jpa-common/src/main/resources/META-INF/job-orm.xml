<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

	<!-- SCHEDULED, RETRY, EXECUTED, ERROR, CANCELED -->

	<!-- missing request RunningRequests GetRequestsByBusinessKeyAndstatus GetRequestsByCommand 
		GetRequestsByCommandAndstatus GetRequestsByDeploymentAndstatus GetRequestsByProcessInstanceAndstatus 
		PendingRequestByIdForProcessing -->

	<!-- all the basic queries needs to compute the last part based on the execution 
		time -->
	<named-native-query name="GetAllScheduledJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
	              o1.expiration_time as expirationTime, 
	              o1.priority as priority, 
	              o1.process_instance_id as processInstanceId, 
	              o1.node_instance_id as nodeInstanceId, 
	              o1.repeat_interval as repeatInterval, 
	              o1.repeat_limit as repeatLimit, 
	              o1.scheduled_id as scheduledId, 
	              o1.retries as retries, 
	              o1.status as status, 
	              o1.execution_counter as executionCounter,  
	              o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status = 'SCHEDULED'
        </query>
	</named-native-query>


	<named-native-query name="GetJobById"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.job_id = :jobId
        </query>
	</named-native-query>

	<named-native-query name="GetJobHistoryById"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
             WHERE o1.job_id = :jobId
          ORDER BY o1.event_date DESC
        </query>
	</named-native-query>

	<named-native-query
		name="GetJobHistoryByProcessInstanceId"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
             WHERE o1.process_instance_id = :processInstanceId
          ORDER BY o1.event_date DESC
        </query>
	</named-native-query>

	<named-native-query name="GetAllPendingJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status IN ('SCHEDULED', 'RETRY')
        </query>
	</named-native-query>

	<named-native-query
		name="GetAllEligibleJobsForExecution"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status IN ('SCHEDULED')
        </query>
	</named-native-query>

	<named-native-query
		name="GetAllEligibleJobsForRetry" result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status IN ('RETRY', 'ERROR')
        </query>
	</named-native-query>


	<named-native-query name="GetAllJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL 
          ORDER BY o1.event_date DESC
        </query>
	</named-native-query>

	<named-native-query name="GetAllCompletedJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status = 'EXECUTED'
        </query>
	</named-native-query>

	<named-native-query name="GetAllInErrorJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status = 'ERROR'
        </query>
	</named-native-query>

	<named-native-query name="GetAllCancelledJobs"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status = 'CANCELED'
        </query>
	</named-native-query>


	<named-native-query name="GetAllJobsByStatus"
		result-set-mapping="JobExecutionTO">
		<query>
             SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.status IN (:status) 
          ORDER BY o1.event_date DESC
        </query>
	</named-native-query>

	<named-native-query name="GetJobByProcessInstanceId"
		result-set-mapping="JobExecutionTO">
		<query>
            SELECT 
                  o1.job_id as jobId,
                  o1.expiration_time as expirationTime, 
                  o1.priority as priority, 
                  o1.process_instance_id as processInstanceId, 
                  o1.node_instance_id as nodeInstanceId, 
                  o1.repeat_interval as repeatInterval, 
                  o1.repeat_limit as repeatLimit, 
                  o1.scheduled_id as scheduledId, 
                  o1.retries as retries, 
                  o1.status as status, 
                  o1.execution_counter as executionCounter,  
                  o1.event_date as eventDate
              FROM Job_Execution_Log o1 
              LEFT JOIN Job_Execution_Log o2 ON o1.job_id = o2.job_id AND o1.event_date &lt; o2.event_date 
             WHERE o2.job_id IS NULL AND o1.process_instance_id = :processInstanceId
          ORDER BY o1.event_date DESC
        </query>
	</named-native-query>

	<sql-result-set-mapping name="JobExecutionTO">
		<constructor-result
			target-class="org.kie.kogito.app.audit.graphql.type.JobExecutionTO">
			<column name="jobId" />
			<column name="expirationTime" class="java.util.Date" />
			<column name="priority" />
			<column name="processInstanceId" />
			<column name="nodeInstanceId" />
			<column name="repeatInterval" />
			<column name="repeatLimit" />
			<column name="scheduledId" />
			<column name="retries" />
			<column name="status" />
			<column name="executionCounter" />
			<column name="eventDate" class="java.util.Date" />
		</constructor-result>
	</sql-result-set-mapping>
</entity-mappings>