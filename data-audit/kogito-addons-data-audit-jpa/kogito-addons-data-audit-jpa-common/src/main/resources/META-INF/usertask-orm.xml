<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

	<!-- 
		queries that are not being migrated
	 -->
        
  <named-native-query name="GetAllUserTaskInstanceState" result-set-mapping="UserTaskInstanceStateTOMapping">
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
		       log.task_id as taskId,
		       log.name as name,
		       log.description as description,
		       log.actual_user as actualUser,
		       log.state as state,
		       log.node_definition_id as nodeDefinitionId,
		       log.node_instance_id as nodeInstanceId,
		       log.event_type as eventType
		  FROM Task_Instance_State_Log log
     LEFT JOIN Task_Instance_State_Log log_newer ON log.user_task_instance_id = log_newer.user_task_instance_id 
                                             AND log_newer.event_date &lt; log_newer.event_date
         WHERE log_newer.event_id IS NULL
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
    
  <named-native-query name="GetAllUserTaskInstanceAssignments">
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.event_user as eventUser,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
			   log.task_name as userTaskName,
			   log.assignment_type as assignmentType,
			   users.user_id
		  FROM Task_Instance_Assignment_Log log
     LEFT JOIN Task_Instance_Assignment_Users_Log users ON users.task_instance_assignment_log_id = log.id
         WHERE log.user_task_instance_id = :userTaskInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
  
  <named-native-query name="GetAllUserTaskInstanceAttachments" result-set-mapping="UserTaskInstanceAttachmentTOMapping">
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.event_user as eventUser,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
			   log.attachment_id as attachmentId,
			   log.attachment_name as attachmentName,
			   log.attachment_uri as attachmentURI,
			   log.event_type as eventType
		  FROM Task_Instance_Attachment_Log log
     LEFT JOIN Task_Instance_Attachment_Log log_newer ON log.user_task_instance_id = log_newer.user_task_instance_id 
     											  AND log.attachment_id = log_newer.attachment_id 
                                                  AND log_newer.event_date &lt; log_newer.event_date
         WHERE log_newer.event_id IS NULL AND log.user_task_instance_id = :userTaskInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
  
  <named-native-query name="GetAllUserTaskInstanceComment" result-set-mapping="UserTaskInstanceCommentTOMapping">
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
			   log.comment_id as commentId,
			   log.comment_content as commentContent,
			   log.event_type as eventType
		  FROM Task_Instance_Comment_Log log
     LEFT JOIN Task_Instance_Comment_Log log_newer ON log.user_task_instance_id = log_newer.user_task_instance_id 
     										   AND log.comment_id = log_newer.comment_id 
                                               AND log_newer.event_date &lt; log_newer.event_date
         WHERE log_newer.event_id IS NULL AND log.user_task_instance_id = :userTaskInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
  
  <named-native-query name="GetAllUserTaskInstanceDeadline" >
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
			   log.event_type as eventType,
			   notification.property_name as propertyName,
			   notification.property_value as propertyValue 
		  FROM Task_Instance_Deadline_Log log
     LEFT JOIN TaskInstanceDeadlineNotificationLog notification ON log.id = notification.task_instance_deadline_log_id
         WHERE log.user_task_instance_id = :userTaskInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
  
  <named-native-query name="GetAllUserTaskInstanceVariable" result-set-mapping="UserTaskInstanceVariableTOMapping">
    <query>
		SELECT log.event_id as eventId,
		       log.event_date as eventDate,
		       log.event_user as eventUser,
		       log.user_task_definition_id as userTaskDefinitionId,
		       log.user_task_instance_id as userTaskInstanceId,
		       log.process_instance_id as processInstanceId,
		       log.business_key as businessKey,
			   log.variable_id as variableId,
			   log.variable_name as variableName,
			   log.variable_value as variableValue,
			   log.variable_type as variableType
		  FROM Task_Instance_Variable_Log log
     LEFT JOIN Task_Instance_Variable_Log log_newer ON log.user_task_instance_id = log_newer.user_task_instance_id 
     										 AND log.variable_id = log_newer.variable_id 
     										 AND log.variable_type = log_newer.variable_type 
                                             AND log.event_date &lt; log_newer.event_date
         WHERE log_newer.event_id IS NULL AND log.user_task_instance_id = :userTaskInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-native-query>  
  
  
        
	<sql-result-set-mapping name="UserTaskInstanceStateTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceStateTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="taskId" />
			<column name="name" />
			<column name="description" />
			<column name="actualUser" />
			<column name="state" />
			<column name="nodeDefinitionId" />
			<column name="nodeInstanceId" />
			<column name="eventType" />
		</constructor-result>
	</sql-result-set-mapping>
	
	<sql-result-set-mapping name="UserTaskInstanceVariableTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceVariableTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
		    <column name="eventUser" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="variableId" />
			<column name="variableName" />
			<column name="variableValue" />
			<column name="variableType" />
		</constructor-result>
	</sql-result-set-mapping>
	
	<sql-result-set-mapping name="UserTaskInstanceAssignmentTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceAssignmentTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
		    <column name="eventUser" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="userTaskName" />
			<column name="assignmentType" />
		</constructor-result>
	</sql-result-set-mapping>
	
	<sql-result-set-mapping name="UserTaskInstanceAttachmentTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceAttachmentTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
		    <column name="eventUser" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="attachmentId" />
			<column name="attachmentName" />
			<column name="attachmentURI" />
			<column name="eventType" />
		</constructor-result>
	</sql-result-set-mapping>
	
	<sql-result-set-mapping name="UserTaskInstanceCommentTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceCommentTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="commentId" />
			<column name="commentContent" />
			<column name="eventType" />
		</constructor-result>
	</sql-result-set-mapping>
	
	<sql-result-set-mapping name="UserTaskInstanceDeadlineTOMapping">
		<constructor-result target-class="org.kie.kogito.app.audit.graphql.type.UserTaskInstanceDeadlineTO">
			<column name="eventId" />
		    <column name="eventDate" class="java.util.Date" />
			<column name="userTaskDefinitionId" />
			<column name="userTaskInstanceId" />
			<column name="processInstanceId" />
			<column name="businessKey" />
			<column name="eventType" />
		</constructor-result>
	</sql-result-set-mapping>
</entity-mappings>