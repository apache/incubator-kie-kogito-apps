package org.kie.kogito.explainability.model;

import java.util.List;
import java.util.stream.Collectors;

/**
 * The saliency map generated by an explanation algorithm.
 * A saliency contains a feature importance for each explained feature.
 */
public class Saliency {

    private final List<FeatureImportance> perFeatureImportance;

    public Saliency(List<FeatureImportance> perFeatureImportance, int k) {
        this.perFeatureImportance = perFeatureImportance.stream().sorted((f0, f1) -> Double.compare(
                Math.abs(f1.getScore()), Math.abs(f0.getScore()))).limit(k).collect(Collectors.toList());
    }

    public Saliency(List<FeatureImportance> perFeatureImportance) {
        this.perFeatureImportance = perFeatureImportance;
    }

    public List<FeatureImportance> getPerFeatureImportance() {
        return perFeatureImportance;
    }

    public List<FeatureImportance> getTopFeatures(int k) {
        return perFeatureImportance.stream().sorted((f0, f1) -> Double.compare(
                Math.abs(f1.getScore()), Math.abs(f0.getScore()))).limit(k).collect(Collectors.toList());
    }

    public List<FeatureImportance> getPositiveFeatures(int k) {
        return perFeatureImportance.stream().sorted((f0, f1) -> Double.compare(
                Math.abs(f1.getScore()), Math.abs(f0.getScore()))).filter(f -> f.getScore() >= 0).limit(k).collect(Collectors.toList());
    }

    public List<FeatureImportance> getNegativeFeatures(int k) {
        return perFeatureImportance.stream().sorted((f0, f1) -> Double.compare(
                Math.abs(f1.getScore()), Math.abs(f0.getScore()))).filter(f -> f.getScore() < 0).limit(k).collect(Collectors.toList());
    }

    @Override
    public String toString() {
        return "Saliency{" +
                "perFeatureImportance=" + perFeatureImportance +
                '}';
    }
}

