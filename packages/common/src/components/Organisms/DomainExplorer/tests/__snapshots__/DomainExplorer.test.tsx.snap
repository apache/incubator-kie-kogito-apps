// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Domain Explorer Container component Check error response for getPicker query 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <DomainExplorer
      domainName="Travels"
      domains={
        Array [
          "Travels",
          "VisaApplications",
        ]
      }
      history={
        Object {
          "locations": Object {
            "key": "ugubul",
          },
        }
      }
      loadingState={false}
      location={
        Object {
          "key": "ugubul",
          "pathname": "/DomainExplorer/Travels",
          "state": Object {
            "parameters": Array [
              Object {
                "flight": Array [
                  "arrival",
                ],
              },
              Object {
                "flight": Array [
                  "departure",
                ],
              },
            ],
          },
        }
      }
      match={
        Object {
          "params": Object {
            "domainName": "Travels",
          },
        }
      }
      metaData={
        Object {
          "metadata": Array [
            Object {
              "processInstances": Array [
                "id",
                "processName",
                "state",
                "start",
                "lastUpdate",
                "businessKey",
              ],
            },
          ],
        }
      }
      rememberedParams={
        Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ]
      }
      rememberedSelections={Array []}
    >
      <withRouter(ServerErrors)
        error={Object {}}
      >
        <ServerErrors
          error={Object {}}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <PageSection
            variant="light"
          >
            <section
              className="pf-c-page__main-section pf-m-light"
            >
              <Bullseye>
                <div
                  className="pf-l-bullseye"
                >
                  <EmptyState
                    variant="full"
                  >
                    <div
                      className="pf-c-empty-state"
                    >
                      <EmptyStateIcon
                        color="var(--pf-global--danger-color--100)"
                        icon={[Function]}
                        size="md"
                      >
                        <ExclamationCircleIcon
                          aria-hidden="true"
                          className="pf-c-empty-state__icon"
                          color="var(--pf-global--danger-color--100)"
                          noVerticalAlign={false}
                          size="md"
                          title={null}
                        >
                          <svg
                            aria-hidden="true"
                            aria-labelledby={null}
                            className="pf-c-empty-state__icon"
                            fill="var(--pf-global--danger-color--100)"
                            height="1.5em"
                            role="img"
                            style={
                              Object {
                                "verticalAlign": "-0.1875em",
                              }
                            }
                            viewBox="0 0 512 512"
                            width="1.5em"
                          >
                            <path
                              d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                              transform=""
                            />
                          </svg>
                        </ExclamationCircleIcon>
                      </EmptyStateIcon>
                      <Title
                        headingLevel="h1"
                        size="4xl"
                      >
                        <h1
                          className="pf-c-title pf-m-4xl"
                        >
                          Error fetching data
                        </h1>
                      </Title>
                      <EmptyStateBody>
                        <div
                          className="pf-c-empty-state__body"
                        >
                          An error occurred while accessing data.
                           
                          <Component
                            isInline={true}
                            onClick={[Function]}
                            variant="link"
                          >
                            <ComponentWithOuia
                              component={[Function]}
                              componentProps={
                                Object {
                                  "children": "See more details",
                                  "isInline": true,
                                  "onClick": [Function],
                                  "variant": "link",
                                }
                              }
                              consumerContext={null}
                            >
                              <Button
                                isInline={true}
                                onClick={[Function]}
                                ouiaContext={
                                  Object {
                                    "isOuia": false,
                                    "ouiaId": null,
                                  }
                                }
                                variant="link"
                              >
                                <button
                                  aria-disabled={null}
                                  aria-label={null}
                                  className="pf-c-button pf-m-link pf-m-inline"
                                  disabled={false}
                                  onClick={[Function]}
                                  tabIndex={null}
                                  type="button"
                                >
                                  <span
                                    className="pf-c-button__text"
                                  >
                                    See more details
                                  </span>
                                </button>
                              </Button>
                            </ComponentWithOuia>
                          </Component>
                        </div>
                      </EmptyStateBody>
                      <Component
                        onClick={[Function]}
                        variant="primary"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "Go back",
                              "onClick": [Function],
                              "variant": "primary",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="primary"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-primary"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              Go back
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyState>
                </div>
              </Bullseye>
            </section>
          </PageSection>
        </ServerErrors>
      </withRouter(ServerErrors)>
    </DomainExplorer>
  </Router>
</BrowserRouter>
`;

exports[`Domain Explorer Container component Check error response for getQueryFields query 1`] = `
<DomainExplorer
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
          ],
        },
      ],
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <withRouter(ServerErrors)
    error={Object {}}
  >
    <ServerErrors
      error={Object {}}
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      match={
        Object {
          "isExact": true,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <PageSection
        variant="light"
      >
        <section
          className="pf-c-page__main-section pf-m-light"
        >
          <Bullseye>
            <div
              className="pf-l-bullseye"
            >
              <EmptyState
                variant="full"
              >
                <div
                  className="pf-c-empty-state"
                >
                  <EmptyStateIcon
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                    size="md"
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="md"
                      title={null}
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon"
                        fill="var(--pf-global--danger-color--100)"
                        height="1.5em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.1875em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1.5em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </EmptyStateIcon>
                  <Title
                    headingLevel="h1"
                    size="4xl"
                  >
                    <h1
                      className="pf-c-title pf-m-4xl"
                    >
                      Error fetching data
                    </h1>
                  </Title>
                  <EmptyStateBody>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      An error occurred while accessing data.
                       
                      <Component
                        isInline={true}
                        onClick={[Function]}
                        variant="link"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "See more details",
                              "isInline": true,
                              "onClick": [Function],
                              "variant": "link",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            isInline={true}
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link pf-m-inline"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <span
                                className="pf-c-button__text"
                              >
                                See more details
                              </span>
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyStateBody>
                  <Component
                    onClick={[Function]}
                    variant="primary"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "children": "Go back",
                          "onClick": [Function],
                          "variant": "primary",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="primary"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-primary"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          Go back
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
              </EmptyState>
            </div>
          </Bullseye>
        </section>
      </PageSection>
    </ServerErrors>
  </withRouter(ServerErrors)>
</DomainExplorer>
`;

exports[`Domain Explorer Container component Check error response for getQueryTypes 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <DomainExplorer
      domainName="Travels"
      domains={
        Array [
          "Travels",
          "VisaApplications",
        ]
      }
      history={
        Object {
          "locations": Object {
            "key": "ugubul",
          },
        }
      }
      loadingState={false}
      location={
        Object {
          "key": "ugubul",
          "pathname": "/DomainExplorer/Travels",
          "state": Object {
            "parameters": Array [
              Object {
                "flight": Array [
                  "arrival",
                ],
              },
              Object {
                "flight": Array [
                  "departure",
                ],
              },
            ],
          },
        }
      }
      match={
        Object {
          "params": Object {
            "domainName": "Travels",
          },
        }
      }
      metaData={
        Object {
          "metadata": Array [
            Object {
              "processInstances": Array [
                "id",
                "processName",
                "state",
                "start",
                "lastUpdate",
                "businessKey",
              ],
            },
          ],
        }
      }
      rememberedParams={
        Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ]
      }
      rememberedSelections={Array []}
    >
      <withRouter(ServerErrors)
        error={Object {}}
      >
        <ServerErrors
          error={Object {}}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <PageSection
            variant="light"
          >
            <section
              className="pf-c-page__main-section pf-m-light"
            >
              <Bullseye>
                <div
                  className="pf-l-bullseye"
                >
                  <EmptyState
                    variant="full"
                  >
                    <div
                      className="pf-c-empty-state"
                    >
                      <EmptyStateIcon
                        color="var(--pf-global--danger-color--100)"
                        icon={[Function]}
                        size="md"
                      >
                        <ExclamationCircleIcon
                          aria-hidden="true"
                          className="pf-c-empty-state__icon"
                          color="var(--pf-global--danger-color--100)"
                          noVerticalAlign={false}
                          size="md"
                          title={null}
                        >
                          <svg
                            aria-hidden="true"
                            aria-labelledby={null}
                            className="pf-c-empty-state__icon"
                            fill="var(--pf-global--danger-color--100)"
                            height="1.5em"
                            role="img"
                            style={
                              Object {
                                "verticalAlign": "-0.1875em",
                              }
                            }
                            viewBox="0 0 512 512"
                            width="1.5em"
                          >
                            <path
                              d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                              transform=""
                            />
                          </svg>
                        </ExclamationCircleIcon>
                      </EmptyStateIcon>
                      <Title
                        headingLevel="h1"
                        size="4xl"
                      >
                        <h1
                          className="pf-c-title pf-m-4xl"
                        >
                          Error fetching data
                        </h1>
                      </Title>
                      <EmptyStateBody>
                        <div
                          className="pf-c-empty-state__body"
                        >
                          An error occurred while accessing data.
                           
                          <Component
                            isInline={true}
                            onClick={[Function]}
                            variant="link"
                          >
                            <ComponentWithOuia
                              component={[Function]}
                              componentProps={
                                Object {
                                  "children": "See more details",
                                  "isInline": true,
                                  "onClick": [Function],
                                  "variant": "link",
                                }
                              }
                              consumerContext={null}
                            >
                              <Button
                                isInline={true}
                                onClick={[Function]}
                                ouiaContext={
                                  Object {
                                    "isOuia": false,
                                    "ouiaId": null,
                                  }
                                }
                                variant="link"
                              >
                                <button
                                  aria-disabled={null}
                                  aria-label={null}
                                  className="pf-c-button pf-m-link pf-m-inline"
                                  disabled={false}
                                  onClick={[Function]}
                                  tabIndex={null}
                                  type="button"
                                >
                                  <span
                                    className="pf-c-button__text"
                                  >
                                    See more details
                                  </span>
                                </button>
                              </Button>
                            </ComponentWithOuia>
                          </Component>
                        </div>
                      </EmptyStateBody>
                      <Component
                        onClick={[Function]}
                        variant="primary"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "Go back",
                              "onClick": [Function],
                              "variant": "primary",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="primary"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-primary"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              Go back
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyState>
                </div>
              </Bullseye>
            </section>
          </PageSection>
        </ServerErrors>
      </withRouter(ServerErrors)>
    </DomainExplorer>
  </Router>
</BrowserRouter>
`;

exports[`Domain Explorer Container component Mock query testing 1`] = `
<DomainExplorer
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
          ],
        },
      ],
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <withRouter(ServerErrors)
    error={[TypeError: Cannot read property 'query' of undefined]}
  >
    <ServerErrors
      error={[TypeError: Cannot read property 'query' of undefined]}
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      match={
        Object {
          "isExact": true,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <PageSection
        variant="light"
      >
        <section
          className="pf-c-page__main-section pf-m-light"
        >
          <Bullseye>
            <div
              className="pf-l-bullseye"
            >
              <EmptyState
                variant="full"
              >
                <div
                  className="pf-c-empty-state"
                >
                  <EmptyStateIcon
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                    size="md"
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="md"
                      title={null}
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon"
                        fill="var(--pf-global--danger-color--100)"
                        height="1.5em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.1875em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1.5em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </EmptyStateIcon>
                  <Title
                    headingLevel="h1"
                    size="4xl"
                  >
                    <h1
                      className="pf-c-title pf-m-4xl"
                    >
                      Error fetching data
                    </h1>
                  </Title>
                  <EmptyStateBody>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      An error occurred while accessing data.
                       
                      <Component
                        isInline={true}
                        onClick={[Function]}
                        variant="link"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "See more details",
                              "isInline": true,
                              "onClick": [Function],
                              "variant": "link",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            isInline={true}
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link pf-m-inline"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <span
                                className="pf-c-button__text"
                              >
                                See more details
                              </span>
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyStateBody>
                  <Component
                    onClick={[Function]}
                    variant="primary"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "children": "Go back",
                          "onClick": [Function],
                          "variant": "primary",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="primary"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-primary"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          Go back
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
              </EmptyState>
            </div>
          </Bullseye>
        </section>
      </PageSection>
    </ServerErrors>
  </withRouter(ServerErrors)>
</DomainExplorer>
`;

exports[`Domain Explorer Container component Snapshot test 1`] = `
<DomainExplorer
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  loadingState={false}
  location={
    Object {
      "key": "ugubul",
      "pathname": "/DomainExplorer/Travels",
      "state": Object {
        "parameters": Array [
          Object {
            "flight": Array [
              "arrival",
            ],
          },
          Object {
            "flight": Array [
              "departure",
            ],
          },
        ],
      },
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={
    Object {
      "metadata": Array [
        Object {
          "processInstances": Array [
            "id",
            "processName",
            "state",
            "start",
            "lastUpdate",
            "businessKey",
          ],
        },
      ],
    }
  }
  rememberedParams={
    Array [
      Object {
        "flight": Array [
          "arrival",
        ],
      },
      Object {
        "flight": Array [
          "departure",
        ],
      },
    ]
  }
  rememberedSelections={Array []}
>
  <withRouter(ServerErrors)
    error={[TypeError: Cannot read property 'query' of undefined]}
  >
    <ServerErrors
      error={[TypeError: Cannot read property 'query' of undefined]}
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      match={
        Object {
          "isExact": true,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <PageSection
        variant="light"
      >
        <section
          className="pf-c-page__main-section pf-m-light"
        >
          <Bullseye>
            <div
              className="pf-l-bullseye"
            >
              <EmptyState
                variant="full"
              >
                <div
                  className="pf-c-empty-state"
                >
                  <EmptyStateIcon
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                    size="md"
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="md"
                      title={null}
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon"
                        fill="var(--pf-global--danger-color--100)"
                        height="1.5em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.1875em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1.5em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </EmptyStateIcon>
                  <Title
                    headingLevel="h1"
                    size="4xl"
                  >
                    <h1
                      className="pf-c-title pf-m-4xl"
                    >
                      Error fetching data
                    </h1>
                  </Title>
                  <EmptyStateBody>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      An error occurred while accessing data.
                       
                      <Component
                        isInline={true}
                        onClick={[Function]}
                        variant="link"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "See more details",
                              "isInline": true,
                              "onClick": [Function],
                              "variant": "link",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            isInline={true}
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link pf-m-inline"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <span
                                className="pf-c-button__text"
                              >
                                See more details
                              </span>
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyStateBody>
                  <Component
                    onClick={[Function]}
                    variant="primary"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "children": "Go back",
                          "onClick": [Function],
                          "variant": "primary",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="primary"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-primary"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          Go back
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
              </EmptyState>
            </div>
          </Bullseye>
        </section>
      </PageSection>
    </ServerErrors>
  </withRouter(ServerErrors)>
</DomainExplorer>
`;

exports[`Domain Explorer Container component check assertions on rememberedParams 1`] = `
<DomainExplorer
  domainName="Travels"
  domains={
    Array [
      "Travels",
      "VisaApplications",
    ]
  }
  history={
    Object {
      "locations": Object {
        "key": "ugubul",
      },
    }
  }
  location={
    Object {
      "pathname": "/DomainExplorer/Travels",
      "state": Object {},
    }
  }
  match={
    Object {
      "params": Object {
        "domainName": "Travels",
      },
    }
  }
  metaData={Object {}}
  rememberedParams={Array []}
  rememberedSelections={Array []}
>
  <withRouter(ServerErrors)
    error={Object {}}
  >
    <ServerErrors
      error={Object {}}
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      match={
        Object {
          "isExact": true,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <PageSection
        variant="light"
      >
        <section
          className="pf-c-page__main-section pf-m-light"
        >
          <Bullseye>
            <div
              className="pf-l-bullseye"
            >
              <EmptyState
                variant="full"
              >
                <div
                  className="pf-c-empty-state"
                >
                  <EmptyStateIcon
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                    size="md"
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="md"
                      title={null}
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon"
                        fill="var(--pf-global--danger-color--100)"
                        height="1.5em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.1875em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1.5em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </EmptyStateIcon>
                  <Title
                    headingLevel="h1"
                    size="4xl"
                  >
                    <h1
                      className="pf-c-title pf-m-4xl"
                    >
                      Error fetching data
                    </h1>
                  </Title>
                  <EmptyStateBody>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      An error occurred while accessing data.
                       
                      <Component
                        isInline={true}
                        onClick={[Function]}
                        variant="link"
                      >
                        <ComponentWithOuia
                          component={[Function]}
                          componentProps={
                            Object {
                              "children": "See more details",
                              "isInline": true,
                              "onClick": [Function],
                              "variant": "link",
                            }
                          }
                          consumerContext={null}
                        >
                          <Button
                            isInline={true}
                            onClick={[Function]}
                            ouiaContext={
                              Object {
                                "isOuia": false,
                                "ouiaId": null,
                              }
                            }
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link pf-m-inline"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <span
                                className="pf-c-button__text"
                              >
                                See more details
                              </span>
                            </button>
                          </Button>
                        </ComponentWithOuia>
                      </Component>
                    </div>
                  </EmptyStateBody>
                  <Component
                    onClick={[Function]}
                    variant="primary"
                  >
                    <ComponentWithOuia
                      component={[Function]}
                      componentProps={
                        Object {
                          "children": "Go back",
                          "onClick": [Function],
                          "variant": "primary",
                        }
                      }
                      consumerContext={null}
                    >
                      <Button
                        onClick={[Function]}
                        ouiaContext={
                          Object {
                            "isOuia": false,
                            "ouiaId": null,
                          }
                        }
                        variant="primary"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-primary"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={null}
                          type="button"
                        >
                          Go back
                        </button>
                      </Button>
                    </ComponentWithOuia>
                  </Component>
                </div>
              </EmptyState>
            </div>
          </Bullseye>
        </section>
      </PageSection>
    </ServerErrors>
  </withRouter(ServerErrors)>
</DomainExplorer>
`;
