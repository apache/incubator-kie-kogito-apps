extend schema {
    subscription: Subscription
    mutation: Mutation
}

extend type Query {
    Jobs(where: JobArgument, orderBy: JobOrderBy, pagination: Pagination):  [Job]
}

type Mutation {
    ProcessInstanceAbort(id: String): String
    ProcessInstanceRetry(id: String): String
    ProcessInstanceSkip(id: String): String
    ProcessInstanceUpdateVariables(id: String, variables: String): String
    NodeInstanceTrigger(id: String, nodeId: String): String
    NodeInstanceRetrigger(id: String, nodeInstanceId: String): String
    NodeInstanceCancel(id: String, nodeInstanceId: String): String
    JobCancel(id: String): String
    JobReschedule(id: String, data: String): String
    UserTaskInstanceUpdate(taskId: String, user: String, groups: [String],  description: String, priority: String,
        actualOwner: String, adminGroups: [String!], adminUsers: [String!], excludedUsers: [String!],
        potentialGroups: [String!], potentialUsers: [String!], inputParams: String): String
    UserTaskInstanceCommentCreate(taskId: String, user: String, groups: [String], comment: String): String
    UserTaskInstanceAttachmentCreate(taskId: String, user: String, groups: [String], name: String, uri: String): String
    UserTaskInstanceCommentUpdate(user:String, groups:[String],commentId: String, comment: String): String
    UserTaskInstanceCommentDelete(user:String, groups:[String],commentId: String): String
    UserTaskInstanceAttachmentUpdate(user:String, groups:[String],attachmentId: String,  name: String, uri: String): String
    UserTaskInstanceAttachmentDelete(user:String, groups:[String], attachmentId: String): String
}

type KogitoMetadata {
    lastUpdate: DateTime!
    processInstances: [ProcessInstanceMeta]
    userTasks: [UserTaskInstanceMeta]
}

input KogitoMetadataOrderBy {
    lastUpdate: OrderBy
}

input KogitoMetadataArgument {
    lastUpdate: DateArgument
    processInstances: ProcessInstanceMetaArgument
    userTasks: UserTaskInstanceMetaArgument
}

type ProcessInstanceMeta {
    id: String!
    processId: String!
    processName: String
    parentProcessInstanceId: String
    rootProcessInstanceId: String
    rootProcessId: String
    roles: [String!]
    state: ProcessInstanceState!
    endpoint: String!
    serviceUrl: String
    start: DateTime!
    end: DateTime
    lastUpdate: DateTime!
    businessKey: String
}

input ProcessInstanceMetaArgument {
    id: IdArgument
    processId: StringArgument
    processName: StringArgument
    parentProcessInstanceId: IdArgument
    rootProcessInstanceId: IdArgument
    rootProcessId: StringArgument
    state: ProcessInstanceStateArgument
    endpoint: StringArgument
    roles: StringArrayArgument
    start: DateArgument
    end: DateArgument
    businessKey: StringArgument
}

extend type UserTaskInstance {
    schema(user: String, groups:[String]): String
}

type UserTaskInstanceMeta {
    id: String!
    description: String
    name: String
    priority: String
    processInstanceId: String!
    state: String!
    actualOwner: String
    adminGroups: [String!]
    adminUsers: [String!]
    completed: DateTime
    started: DateTime!
    excludedUsers: [String!]
    potentialGroups: [String!]
    potentialUsers: [String!]
    referenceName: String
    lastUpdate: DateTime!
    comments: [Comment!]
    attachments: [Attachment!]
}

input UserTaskInstanceMetaArgument {
    state: StringArgument
    id: IdArgument
    description: StringArgument
    name: StringArgument
    priority: StringArgument
    processInstanceId: IdArgument
    actualOwner: StringArgument
    potentialUsers: StringArrayArgument
    potentialGroups: StringArrayArgument
    excludedUsers: StringArrayArgument
    adminGroups: StringArrayArgument
    adminUsers: StringArrayArgument
    completed: DateArgument
    started: DateArgument
    referenceName: StringArgument
}

type Subscription {
    ProcessInstanceAdded: ProcessInstance!
    ProcessInstanceUpdated: ProcessInstance!
    UserTaskInstanceAdded: UserTaskInstance!
    UserTaskInstanceUpdated: UserTaskInstance!
    JobAdded: Job!
    JobUpdated: Job!
}

type Job {
    id: String!
    processId: String
    processInstanceId: String
    nodeInstanceId: String
    rootProcessInstanceId: String
    rootProcessId: String
    status: JobStatus!
    expirationTime: DateTime
    priority: Int
    callbackEndpoint: String
    repeatInterval: Int
    repeatLimit: Int
    scheduledId: String
    retries: Int
    lastUpdate: DateTime
    executionCounter: Int
    endpoint: String
}

enum JobStatus {
    ERROR,
    EXECUTED,
    SCHEDULED,
    RETRY,
    CANCELED
}

input JobStatusArgument {
    equal: JobStatus
    in: [JobStatus]
}

input JobArgument {
    and: [JobArgument!]
    or: [JobArgument!]
    not: JobArgument
    id: IdArgument
    processId: StringArgument
    processInstanceId: IdArgument
    nodeInstanceId: IdArgument
    rootProcessInstanceId: IdArgument
    rootProcessId: StringArgument
    status: JobStatusArgument
    expirationTime: DateArgument
    priority: NumericArgument
    scheduledId: IdArgument
    lastUpdate: DateArgument
}

input JobOrderBy {
    processId: OrderBy
    rootProcessId: OrderBy
    status: OrderBy
    expirationTime: OrderBy
    priority: OrderBy
    retries: OrderBy
    lastUpdate: OrderBy
    executionCounter: OrderBy
}